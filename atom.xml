<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaoqianchang</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaoqianchang.github.io/"/>
  <updated>2017-05-16T04:12:37.427Z</updated>
  <id>http://xiaoqianchang.github.io/</id>
  
  <author>
    <name>xiaoqianchang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>注解</title>
    <link href="http://xiaoqianchang.github.io/2017/05/15/annotation/"/>
    <id>http://xiaoqianchang.github.io/2017/05/15/annotation/</id>
    <published>2017-05-15T15:13:11.000Z</published>
    <updated>2017-05-16T04:12:37.427Z</updated>
    
    <content type="html">&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注解概述&lt;/li&gt;
&lt;li&gt;如何使用注解&lt;/li&gt;
&lt;li&gt;自定义注解&lt;/li&gt;
&lt;li&gt;注解处理器&lt;/li&gt;
&lt;li&gt;实例&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是注解&quot;&gt;&lt;a href=&quot;#什么是注解&quot; class=&quot;headerlink&quot; title=&quot;什么是注解&quot;&gt;&lt;/a&gt;什么是注解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注解（也被称为元数据）是指程序功能外，在代码中添加的额外信息，这些信息可以用来修饰、标识功能代码，但不影响代码运行。&lt;/li&gt;
&lt;li&gt;注解的功能类似于代码中的注释，所不同的是注解不是提供代码功能的说明，而是实现程序功能的重要组成部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;为什么使用注解&quot;&gt;&lt;a href=&quot;#为什么使用注解&quot; class=&quot;headerlink&quot; title=&quot;为什么使用注解&quot;&gt;&lt;/a&gt;为什么使用注解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Annotation 一般可以取代复杂的配置文件，用于告之容器管理者某个类、方法的行为。&lt;/li&gt;
&lt;li&gt;Annotation 是JDK5.0及以后版本引入的。它可以用于创建文档，跟踪代码中的依赖性，甚至执行基本编译时检查。&lt;/li&gt;
&lt;li&gt;如果说反射是很多技术实现（动态代理、依赖注入等）的基础，那么注解就是用使这些技术平民化的基础&lt;/li&gt;
&lt;li&gt;注解是以‘@注解名’在代码中存在的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据注解参数的个数，我们可以将注解分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标记注解：没有变量，只有名称标识。例如：@annotation。&lt;/li&gt;
&lt;li&gt;单值注解：在标记注解的基础上提供一段数据。如：@annotation（“data”）。&lt;/li&gt;
&lt;li&gt;完整注解：可以包括多个数据成员，每个数据成员由名称和值构成。如：@annotation(val1=“data1”, val2=“data2”)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Java常用注解——-Override&quot;&gt;&lt;a href=&quot;#Java常用注解——-Override&quot; class=&quot;headerlink&quot; title=&quot;Java常用注解——@Override&quot;&gt;&lt;/a&gt;Java常用注解——@Override&lt;/h2&gt;&lt;p&gt;在java.lang 中&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Target(value=METHOD) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Retention(value=SOURCE) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface Override&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示一个方法声明打算重写超类中的另一个方法声明。如果方法利用此注释类型进行注解但没有重写超类方法，则编译器会生成一条错误消息。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private String id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	A(String id) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.id = id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Java常用注解——-Deprecated&quot;&gt;&lt;a href=&quot;#Java常用注解——-Deprecated&quot; class=&quot;headerlink&quot; title=&quot;Java常用注解——@Deprecated&quot;&gt;&lt;/a&gt;Java常用注解——@Deprecated&lt;/h2&gt;&lt;p&gt;在java.lang 包中&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Documented &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Retention(value=RUNTIME) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface Deprecated&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用 &lt;strong&gt;@Deprecated&lt;/strong&gt; 注释的程序元素，不鼓励程序员使用这样的元素，通常是因为它很危险或存在更好的选择。在使用不被赞成的程序元素或在不被赞成的代码中执行重写时，编译器会发出警告。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Deprecated&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public abstract class Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Deprecated&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Java常用注解——-SuppressWarnings&quot;&gt;&lt;a href=&quot;#Java常用注解——-SuppressWarnings&quot; class=&quot;headerlink&quot; title=&quot;Java常用注解——@SuppressWarnings&quot;&gt;&lt;/a&gt;Java常用注解——@SuppressWarnings&lt;/h2&gt;&lt;p&gt;在java.lang中 &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Target(value=&amp;#123;TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR,LOCAL_VARIABLE&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Retention(value=SOURCE) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface SuppressWarnings&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;指示应该在注释元素（以及包含在该注释元素中的所有程序元素）中取消显示指定的编译器警告。注意，在给定元素中取消显示的警告集是所有包含元素中取消显示的警告的超集。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@SuppressWarnings(value = &lt;span class=&quot;string&quot;&gt;&quot;unused&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void speak(String message) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		@SuppressWarnings(&amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;unused&quot;&lt;/span&gt; &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		List list = new ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Speak:	&quot;&lt;/span&gt; + message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;元注解&quot;&gt;&lt;a href=&quot;#元注解&quot; class=&quot;headerlink&quot; title=&quot;元注解&quot;&gt;&lt;/a&gt;元注解&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;元注解是java定义的用于创建注解的工具，它们本身也是注解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Target&quot;&gt;&lt;a href=&quot;#Target&quot; class=&quot;headerlink&quot; title=&quot;@Target&quot;&gt;&lt;/a&gt;@Target&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;@Taget&lt;/strong&gt; 注解表明了自定义注解的作用域。可能的作用域被定义在一个枚举类型中：ElementType。ElementType 中的常量值如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ANNOTATION_TYPE ：作用在注解类型上的注解。&lt;/li&gt;
&lt;li&gt;CONSTRUCTOR ：作用在构造方法上的注解。&lt;/li&gt;
&lt;li&gt;FIELD ：作用在属性上的注解。&lt;/li&gt;
&lt;li&gt;LOCAL_VARIABLE ：作用在本地变量上的注解。&lt;/li&gt;
&lt;li&gt;METHOD ：作用在方法上的注解。&lt;/li&gt;
&lt;li&gt;PACKAGE ：作用在包上的注解。&lt;/li&gt;
&lt;li&gt;PARAMETER ：作用在参数上的注解。&lt;/li&gt;
&lt;li&gt;Type ：作用在类、接口或枚举上的注解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Retention&quot;&gt;&lt;a href=&quot;#Retention&quot; class=&quot;headerlink&quot; title=&quot;@Retention&quot;&gt;&lt;/a&gt;@Retention&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;@Retention&lt;/strong&gt; 用于声明注解信息的保留策略，可选的级别被存放在枚举 RetentionPolicy 中，该枚举中的常量值如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RetentionPolicy.SOURCE ：注解信息仅保留在源文件中，编译时将丢弃注解信息。&lt;/li&gt;
&lt;li&gt;RetentionPolicy.CLASS ：注解信息将被编译进Class文件中，但这些注解信息在运行时将丢弃。&lt;/li&gt;
&lt;li&gt;RetentionPolicy.RUNTIME ：注解信息将被保留到运行时，你可以通过反射来读取这些注解信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Documented&quot;&gt;&lt;a href=&quot;#Documented&quot; class=&quot;headerlink&quot; title=&quot;@Documented&quot;&gt;&lt;/a&gt;@Documented&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Documented&lt;/strong&gt; 注解表明制作 javadoc 时，是否将注解信息加入文档。如果注解在声明时使用了 @Documented，则在制作 javadoc 时注解信息会加入 javadoc。&lt;/p&gt;
&lt;h3 id=&quot;Inherited&quot;&gt;&lt;a href=&quot;#Inherited&quot; class=&quot;headerlink&quot; title=&quot;@Inherited&quot;&gt;&lt;/a&gt;@Inherited&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Inherited&lt;/strong&gt; 注解表明注解是否会被子类继承，缺省情况是不继承的。当注解在声明时，使用了 @Inherited 注解，则该注解会被使用了该注解的类的子类所继承。&lt;/p&gt;
&lt;h2 id=&quot;自定义注解&quot;&gt;&lt;a href=&quot;#自定义注解&quot; class=&quot;headerlink&quot; title=&quot;自定义注解&quot;&gt;&lt;/a&gt;自定义注解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;strong&gt;@interface&lt;/strong&gt; 自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。&lt;/li&gt;
&lt;li&gt;注解的定义跟接口很相似，而且，注解类型编译后也会产生一个Class文件，这与接口和类无异。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.lang.annotation.ElementType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.lang.annotation.Retention;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.lang.annotation.RetentionPolicy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.lang.annotation.Target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Target(ElementType.METHOD)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface Test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;为自定义注解添加变量&quot;&gt;&lt;a href=&quot;#为自定义注解添加变量&quot; class=&quot;headerlink&quot; title=&quot;为自定义注解添加变量&quot;&gt;&lt;/a&gt;为自定义注解添加变量&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface Entity &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public int &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;() default -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String name();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用自定义注解&quot;&gt;&lt;a href=&quot;#使用自定义注解&quot; class=&quot;headerlink&quot; title=&quot;使用自定义注解&quot;&gt;&lt;/a&gt;使用自定义注解&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Entity(name = &lt;span class=&quot;string&quot;&gt;&quot;Person&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void speak(String message) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;注解参数说明&quot;&gt;&lt;a href=&quot;#注解参数说明&quot; class=&quot;headerlink&quot; title=&quot;注解参数说明&quot;&gt;&lt;/a&gt;注解参数说明&lt;/h2&gt;&lt;p&gt;参数类型必须使用指定参数类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有基本类型,包括(int,float,boolean)&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Class&lt;/li&gt;
&lt;li&gt;enum&lt;/li&gt;
&lt;li&gt;Annotation&lt;/li&gt;
&lt;li&gt;以及以上类型的数组&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;多变量使用枚举&quot;&gt;&lt;a href=&quot;#多变量使用枚举&quot; class=&quot;headerlink&quot; title=&quot;多变量使用枚举&quot;&gt;&lt;/a&gt;多变量使用枚举&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public @interface MyAnnotation &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String value1() default &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MyEnum value2() default MyEnum.Sunny;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;enum MyEnum &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Sunny, Rainy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class AnnotationTest2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@MyAnnotation(value1 = &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, value2 = MyEnum.Sunny)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;method&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数组变量&quot;&gt;&lt;a href=&quot;#数组变量&quot; class=&quot;headerlink&quot; title=&quot;数组变量&quot;&gt;&lt;/a&gt;数组变量&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public @interface MyAnnotation &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String[] value1() default &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用自定义注解：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class AnnotationTest2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@MyAnnotation(value1 = &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;b&quot;&lt;/span&gt; &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;execute&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;method&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;嵌套&quot;&gt;&lt;a href=&quot;#嵌套&quot; class=&quot;headerlink&quot; title=&quot;嵌套&quot;&gt;&lt;/a&gt;嵌套&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Target(ElementType.FIELD)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface ID &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String value() default &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface Entity &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String name() default &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public ID id() default @ID(&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;注解参数的赋值要求&quot;&gt;&lt;a href=&quot;#注解参数的赋值要求&quot; class=&quot;headerlink&quot; title=&quot;注解参数的赋值要求&quot;&gt;&lt;/a&gt;注解参数的赋值要求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编译器要求注解的参数不能是不确定值，即要么在定义注解的时候就进行赋值，要么在使用的时候进行赋值。&lt;/li&gt;
&lt;li&gt;如果定义一个参数而未进行赋值，则编译器会抛出一个错误：The annotation must define the attribute value。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;注解参数的快捷方式&quot;&gt;&lt;a href=&quot;#注解参数的快捷方式&quot; class=&quot;headerlink&quot; title=&quot;注解参数的快捷方式&quot;&gt;&lt;/a&gt;注解参数的快捷方式&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Target(ElementType.FIELD)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface ID &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String value();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String description() default &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@ID(&lt;span class=&quot;string&quot;&gt;&quot;personID&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private Integer id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;注解处理器&quot;&gt;&lt;a href=&quot;#注解处理器&quot; class=&quot;headerlink&quot; title=&quot;注解处理器&quot;&gt;&lt;/a&gt;注解处理器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;如果没有读取分析注解的工具，那注解就不会比注释更有用。&lt;/li&gt;
&lt;li&gt;JDK5扩展了反射机制的API，可以帮助程序员有效的创建这类工具，而且，它还提供了一个外部工具apt，用于帮助程序员分析处理注解。&lt;/li&gt;
&lt;li&gt;要想使用反射去读取注解，必须将Retention的值选为Runtime。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/annotation/annotation1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Apt工具&quot;&gt;&lt;a href=&quot;#Apt工具&quot; class=&quot;headerlink&quot; title=&quot;Apt工具&quot;&gt;&lt;/a&gt;Apt工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Apt是由sun开发的一款用于处理注解的工具。&lt;/li&gt;
&lt;li&gt;apt与javac一样用于处理源代码级别的命令。&lt;/li&gt;
&lt;li&gt;默认情况下apt会在代码未编译前对代码进行分析处理。&lt;/li&gt;
&lt;li&gt;Apt首先通过注解处理器分析处理用户编写的源文件，如果该轮处理的过程中产生了新文件，则apt会对产生的文件进行新一轮的处理，直至不再产生新文件为止，然后将这些文件一同编译，因此一般情况下apt命令包含了javac的功能。&lt;/li&gt;
&lt;li&gt;apt是一个命令行工具，与之配套的还有一套用来描述程序语义结构的&lt;strong&gt;Mirror API&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mirror API（com.sun.mirror.*）&lt;/strong&gt;描述的是程序在编译时刻的静态结构。通过Mirror API可以获取到被注解的Java类型元素的信息，从而提供相应的处理逻辑。具体的处理工作交给apt工具来完成。&lt;/li&gt;
&lt;li&gt;编写注解处理器的核心是 &lt;strong&gt;AnnotationProcessorFactory&lt;/strong&gt; 和 &lt;strong&gt;AnnotationProcessor&lt;/strong&gt; 两个接口。后者表示的是注解处理器，而前者则是为某些注解类型创建注解处理器的工厂。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编写Apt应用一般包括以下四个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写需要进行注解处理的类（一般地，这些类应该带有需要处理的注解）。&lt;/li&gt;
&lt;li&gt;实现至少一个 &lt;strong&gt;AnnotationProcessorFactory&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;实现 &lt;strong&gt;AnnotationProcessor&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用APT命令行，执行注解处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;描述代码分工安排的注解。通过该注解可以在源代码中记录每个类或接口的分工和进度情况。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public @interface Assignment &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String assignee();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int effort();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	double finished() default &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;AnnotationProcessorFactory 接口有三个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;getProcessorFor&lt;/strong&gt; 是根据注解的类型来返回特定的注解处理器；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;supportedAnnotationTypes&lt;/strong&gt; 是返回该工厂生成的注解处理器所能支持的注解类型；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;supportedOptions&lt;/strong&gt; 用来表示所支持的附加选项。在运行apt命令行工具的时候，可以通过-A来传递额外的参数给注解处理器，如&lt;em&gt;-A verbose=true&lt;/em&gt;。当工厂通过 &lt;strong&gt;supportedOptions&lt;/strong&gt; 方法声明了所能识别的附加选项之后，注解处理器就可以在运行时刻通过 &lt;strong&gt;AnnotationProcessorEnvironment&lt;/strong&gt; 的 &lt;strong&gt;getOptions&lt;/strong&gt; 方法获取到选项的实际值。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class AssignmentApf  implements AnnotationProcessorFactory &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public AnnotationProcessor  getProcessorFor(Set&amp;lt;AnnotationTypeDeclaration&amp;gt; atds,? AnnotationProcessorEnvironment env) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (atds.isEmpty()) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		  &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; AnnotationProcessors.NO_OP; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; new AssignmentAp(env); //返回注解处理器 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Collection&amp;lt;String&amp;gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;supportedAnnotationTypes&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; Collections.unmodifiableList(Arrays.asList(&lt;span class=&quot;string&quot;&gt;&quot;annotation.Assignment&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Collection&amp;lt;String&amp;gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;supportedOptions&lt;/span&gt;&lt;/span&gt;() &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; Collections.emptySet(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;注解处理器本身的基本实现&quot;&gt;&lt;a href=&quot;#注解处理器本身的基本实现&quot; class=&quot;headerlink&quot; title=&quot;注解处理器本身的基本实现&quot;&gt;&lt;/a&gt;注解处理器本身的基本实现&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注解处理器的处理逻辑都在 &lt;strong&gt;process&lt;/strong&gt; 方法中完成。&lt;/li&gt;
&lt;li&gt;通过一个声明（&lt;strong&gt;Declaration&lt;/strong&gt;）的 &lt;strong&gt;getAnnotationMirrors&lt;/strong&gt; 方法就可以获取到该声明上所添加的注解的实际值。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class AssignmentAp implements AnnotationProcessor &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private AnnotationProcessorEnvironment env;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private AnnotationTypeDeclaration assignmentDeclaration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public AssignmentAp(AnnotationProcessorEnvironment env) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.env = env;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		assignmentDeclaration = (AnnotationTypeDeclaration) env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.getTypeDeclaration(&lt;span class=&quot;string&quot;&gt;&quot;annotation.Assignment&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;process&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Collection&amp;lt;Declaration&amp;gt; declarations = env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.getDeclarationsAnnotatedWith(assignmentDeclaration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Declaration declaration : declarations) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			processAssignmentAnnotations(declaration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private void processAssignmentAnnotations(Declaration declaration) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Collection&amp;lt;AnnotationMirror&amp;gt; annotations = declaration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.getAnnotationMirrors();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (AnnotationMirror mirror : annotations) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mirror.getAnnotationType().getDeclaration()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					.equals(assignmentDeclaration)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				Map&amp;lt;AnnotationTypeElementDeclaration, AnnotationValue&amp;gt; values = mirror&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						.getElementValues();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				String assignee = (String) getAnnotationValue(values,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;string&quot;&gt;&quot;assignee&quot;&lt;/span&gt;); // 获取注解的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在创建好注解处理器之后，就可以通过apt命令行工具来对源代码中的注解进行处理。 命令的运行格式是&lt;em&gt;apt -classpath bin -factory annotation.apt.AssignmentApfsrc/annotation/work/&lt;/em&gt;.java&lt;em&gt;，即通过&lt;/em&gt;-factory*来指定注解处理器工厂类的名称。&lt;/li&gt;
&lt;li&gt;实际上，apt工具在完成处理之后，会自动调用javac来编译处理完成后的源代码。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注解概述&lt;/li&gt;
&lt;li&gt;如何使用注解&lt;/li&gt;
&lt;li&gt;自定义注解&lt;/li&gt;
&lt;li&gt;注解处理器&lt;/li&gt;
&lt;li&gt;实例&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/tags/Java/"/>
    
      <category term="annotation" scheme="http://xiaoqianchang.github.io/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Java 集合框架</title>
    <link href="http://xiaoqianchang.github.io/2017/05/15/java-collections-framework/"/>
    <id>http://xiaoqianchang.github.io/2017/05/15/java-collections-framework/</id>
    <published>2017-05-15T13:19:11.000Z</published>
    <updated>2017-05-16T04:11:36.776Z</updated>
    
    <content type="html">&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Java集合框架的层次结构&lt;/li&gt;
&lt;li&gt;Collection 接口&lt;/li&gt;
&lt;li&gt;HashSet 、LinkedHashSet 和 TreeSet&lt;/li&gt;
&lt;li&gt;Comparable 和Comparator 接口&lt;/li&gt;
&lt;li&gt;ArrayList 和LinkedList&lt;/li&gt;
&lt;li&gt;规则集和线性表性能比较&lt;/li&gt;
&lt;li&gt;Vector 和Stack&lt;/li&gt;
&lt;li&gt;Queue和 PriorityQueue&lt;/li&gt;
&lt;li&gt;Map接口及 HashMap, LinkedHashMap和TreeMap&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Java集合框架的层次结构&quot;&gt;&lt;a href=&quot;#Java集合框架的层次结构&quot; class=&quot;headerlink&quot; title=&quot;Java集合框架的层次结构&quot;&gt;&lt;/a&gt;Java集合框架的层次结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个集合就是一个容器对象，用来代表一组对象，其中的每个对象称为元素。&lt;/li&gt;
&lt;li&gt;Java 集合框架支持三种类型的集合：规则集sets, 线性表lists, 和映射 maps。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Set 和 List 是Collection的子接口&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;映射的实例是一组关联关键字的对象。&lt;br&gt;可以使用关键字从映射中获取一个对象或者把一个对象放到映射中&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Collection-接口&quot;&gt;&lt;a href=&quot;#Collection-接口&quot; class=&quot;headerlink&quot; title=&quot;Collection 接口&quot;&gt;&lt;/a&gt;Collection 接口&lt;/h2&gt;&lt;p&gt;Collection接口是处理对象集合的根接口&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Set-接口&quot;&gt;&lt;a href=&quot;#Set-接口&quot; class=&quot;headerlink&quot; title=&quot;Set 接口&quot;&gt;&lt;/a&gt;Set 接口&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Set接口继承 Collection 接口。它没有引入新的方法或者常量，只是规定Set的实例不能包含重复元素。&lt;/li&gt;
&lt;li&gt;实现Set的类必须确保没有重复元素添加到这个规则集。也就是说，在一个规则集中，一定不存在两个元素e1 、 e2 使得 e1.equals(e2) 的返回值是true。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Set-接口继承结构&quot;&gt;&lt;a href=&quot;#Set-接口继承结构&quot; class=&quot;headerlink&quot; title=&quot;Set 接口继承结构&quot;&gt;&lt;/a&gt;Set 接口继承结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;AbstractSet-类&quot;&gt;&lt;a href=&quot;#AbstractSet-类&quot; class=&quot;headerlink&quot; title=&quot;AbstractSet 类&quot;&gt;&lt;/a&gt;AbstractSet 类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AbstractSet 类是一个便利类，它继承 AbstractCollection 并实现Set。&lt;/li&gt;
&lt;li&gt;AbstractSet类提供了 equals 和 hashCode 方法的具体实现。一个规则集的散列码是这个规则集中所有元素散列码的和。&lt;/li&gt;
&lt;li&gt;由于AbstractSet类没有实现size 和iterator 方法，所以 AbstractSet 是一个抽象类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;HashSet-类&quot;&gt;&lt;a href=&quot;#HashSet-类&quot; class=&quot;headerlink&quot; title=&quot;HashSet 类&quot;&gt;&lt;/a&gt;HashSet 类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HashSet 类是一个实现Set接口的具体类。&lt;/li&gt;
&lt;li&gt;它可以用来存储互不相同的元素。&lt;/li&gt;
&lt;li&gt;考虑到效率，添加到散列集中对象必须以一种正确分散散列码的方式实现 hashCode 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for-each 循环&lt;br&gt;可以使用 JDK 1.5中的加强循环来替代迭代器:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Object element: &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  System.out.print(element.toString() + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;SortedSet-接口和-TreeSet-类&quot;&gt;&lt;a href=&quot;#SortedSet-接口和-TreeSet-类&quot; class=&quot;headerlink&quot; title=&quot;SortedSet 接口和 TreeSet 类&quot;&gt;&lt;/a&gt;SortedSet 接口和 TreeSet 类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SortedSet 是 Set的一个子接口，它确保规则集中的元素是有序的。&lt;/li&gt;
&lt;li&gt;TreeSet 是实现 SortedSet 接口的一个具体类。可以使用迭代器以排序次序遍历规则集元素有两种排序方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 TreeSet 对规则集元素排序&lt;/p&gt;
&lt;p&gt;方式一：使用 Comparable 接口。&lt;/p&gt;
&lt;p&gt;方式二：如果元素所属的类没有实现 Comparable 接口，或者在实现 Comparable 接口的类中不想使用 compareTo 方法，那么就可以指定一个比较器。&lt;/p&gt;
&lt;h3 id=&quot;Comparator-接口&quot;&gt;&lt;a href=&quot;#Comparator-接口&quot; class=&quot;headerlink&quot; title=&quot;Comparator 接口&quot;&gt;&lt;/a&gt;Comparator 接口&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;有时希望将不同类型的元素插入到树形集。这些元素可能不是 Comparable&lt;br&gt;的实例或者是不可以比较的。这时就可以定义比较器来比较这些元素。&lt;/li&gt;
&lt;li&gt;为了做到这点，需要创建一个实现 java.util.Comparator 接口的类。 Comparator 接口有两个方法：&lt;br&gt;compare 和 equals。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;public int compare(Object element1, Object element2)&lt;/code&gt;&lt;br&gt;如果 element1 小于 element2 ，就返回一个负值；如果 element1 大于element2，就返回一个正值；若相等就返回0&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public boolean equals(Object element)&lt;/code&gt;&lt;br&gt;如果指定对象也是一个比较器，并且与这个比较器具有相同的排序，就返回true&lt;/p&gt;
&lt;h2 id=&quot;List-接口&quot;&gt;&lt;a href=&quot;#List-接口&quot; class=&quot;headerlink&quot; title=&quot;List 接口&quot;&gt;&lt;/a&gt;List 接口&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;规则集中只能存放不重复的元素。&lt;/li&gt;
&lt;li&gt;为了允许在集合内存储重复元素，需要使用线性表。&lt;/li&gt;
&lt;li&gt;线性表不但可以存储重复元素，还可以让用户指定元素存储位置。&lt;/li&gt;
&lt;li&gt;用户可以使用下标来随机访问元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;List-迭代器&quot;&gt;&lt;a href=&quot;#List-迭代器&quot; class=&quot;headerlink&quot; title=&quot;List 迭代器&quot;&gt;&lt;/a&gt;List 迭代器&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;ArrayList-和-LinkedList&quot;&gt;&lt;a href=&quot;#ArrayList-和-LinkedList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList 和 LinkedList&quot;&gt;&lt;/a&gt;ArrayList 和 LinkedList&lt;/h3&gt;&lt;p&gt;ArrayList 类和 LinkedList 类是 实现 List 接口的两个具体类。&lt;br&gt;要选用这两种类中的哪一个取决于特定需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果需要通过下标随机访问元素，除了在末尾之外，无需再其他位置上插入或者删除元素，那么 ArrayList 提供了更高效率。&lt;/li&gt;
&lt;li&gt;如果应用程序需要在线性表的任意位置上插入或者删除元素，就应该选择LinkedList。&lt;/li&gt;
&lt;li&gt;线性表的大小是可以动态增大或者减小的，而数组一旦被创建，它的大小就是固定的。如果应用程序不需要插入或者删除元素，那么数组是效率最高的数据结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ArrayList：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;LinkedList：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Collections-类&quot;&gt;&lt;a href=&quot;#Collections-类&quot; class=&quot;headerlink&quot; title=&quot;Collections 类&quot;&gt;&lt;/a&gt;Collections 类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Collections 类提供了许多静态方法用来操作集合和映射、创建同步集合类、创建只读集合类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Collections 类 UML 图：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;规则集和线性表的性能&quot;&gt;&lt;a href=&quot;#规则集和线性表的性能&quot; class=&quot;headerlink&quot; title=&quot;规则集和线性表的性能&quot;&gt;&lt;/a&gt;规则集和线性表的性能&lt;/h2&gt;&lt;h2 id=&quot;Vector-和-Stack&quot;&gt;&lt;a href=&quot;#Vector-和-Stack&quot; class=&quot;headerlink&quot; title=&quot;Vector 和 Stack&quot;&gt;&lt;/a&gt;Vector 和 Stack&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Java 集合框架式在Java2中引入的。Java2之前也支持一些数据结构，其中就有 Vector 类和 Stack 类。为了适应Java集合框架，这些类被重新设计，但为了向后兼容，保留了它们旧形式的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Vector-类&quot;&gt;&lt;a href=&quot;#Vector-类&quot; class=&quot;headerlink&quot; title=&quot;Vector 类&quot;&gt;&lt;/a&gt;Vector 类&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在 Java 2中，除了包含用于访问和修改向量的同步方法外， Vector 与 ArrayList 是一样的。至此介绍过的集合数据结构中没有一个是同步的。如果需要同步，可以使用集合类中同步版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Stack-类&quot;&gt;&lt;a href=&quot;#Stack-类&quot; class=&quot;headerlink&quot; title=&quot;Stack 类&quot;&gt;&lt;/a&gt;Stack 类&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Stack 类是用来表示后进先出的栈对象的 。只有栈顶元素可以被访问, 可以返回、插入、删除栈顶元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;队列和优先队列&quot;&gt;&lt;a href=&quot;#队列和优先队列&quot; class=&quot;headerlink&quot; title=&quot;队列和优先队列&quot;&gt;&lt;/a&gt;队列和优先队列&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;队列是一种先进先出的数据结构。在队尾添加元素，在队头删除元素。&lt;/li&gt;
&lt;li&gt;在优先队列中，元素被赋予优先级。当访问元素时，拥有最高优先级的元素首先被删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Queue-接口&quot;&gt;&lt;a href=&quot;#Queue-接口&quot; class=&quot;headerlink&quot; title=&quot;Queue 接口&quot;&gt;&lt;/a&gt;Queue 接口&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;PriorityQueue-类&quot;&gt;&lt;a href=&quot;#PriorityQueue-类&quot; class=&quot;headerlink&quot; title=&quot;PriorityQueue 类&quot;&gt;&lt;/a&gt;PriorityQueue 类&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections13.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Map-接口&quot;&gt;&lt;a href=&quot;#Map-接口&quot; class=&quot;headerlink&quot; title=&quot;Map 接口&quot;&gt;&lt;/a&gt;Map 接口&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Map 是一种依照键值存储元素的容器，键值类似于下标。在List中，下标是整数的；而在 Map中，键值可以是任意类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections14.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Map-接口-UML-图&quot;&gt;&lt;a href=&quot;#Map-接口-UML-图&quot; class=&quot;headerlink&quot; title=&quot;Map 接口 UML 图&quot;&gt;&lt;/a&gt;Map 接口 UML 图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections15.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;具体Map-类&quot;&gt;&lt;a href=&quot;#具体Map-类&quot; class=&quot;headerlink&quot; title=&quot;具体Map 类&quot;&gt;&lt;/a&gt;具体Map 类&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections16.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;HashMap-和-TreeMap&quot;&gt;&lt;a href=&quot;#HashMap-和-TreeMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap 和 TreeMap&quot;&gt;&lt;/a&gt;HashMap 和 TreeMap&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HashMap 和 TreeMap 类是Map 接口的两个具体实现。&lt;/li&gt;
&lt;li&gt;对于定位一个值，插入一个映射或者删除一个映射而言， HashMap类是高效的。&lt;/li&gt;
&lt;li&gt;TreeMap 类实现了，所以它在遍历排好顺序的键值时是高效的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;LinkedHashMap&quot;&gt;&lt;a href=&quot;#LinkedHashMap&quot; class=&quot;headerlink&quot; title=&quot;LinkedHashMap&quot;&gt;&lt;/a&gt;LinkedHashMap&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;LinkedHashMap 在JDK 1.4中引入。它用链表实现来扩展 HashMap，支持映射中条目的排序。&lt;/li&gt;
&lt;li&gt;HashMap中的条目是没有顺序的，但是在 LinkedHashMap 中，元素既可以按照它们插入映射的顺序排序 (称为插入顺序), 也可以按照它们最后一次访问时的顺序，从早到晚排序 (访问顺序). LinkedHashMap 的无参构造方法是以插入顺序来创建对象的。&lt;/li&gt;
&lt;li&gt;要按访问顺序创建LinkedHashMap 对象，应使用LinkedHashMap(initialCapacity, loadFactor, true)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Arrays-类&quot;&gt;&lt;a href=&quot;#Arrays-类&quot; class=&quot;headerlink&quot; title=&quot;Arrays 类&quot;&gt;&lt;/a&gt;Arrays 类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Arrays 类包含许多静态方法用于对数组进行排序、查找、比较数组、填充数组元素，以及把数组转换成线性表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Arrays-类-UML-图&quot;&gt;&lt;a href=&quot;#Arrays-类-UML-图&quot; class=&quot;headerlink&quot; title=&quot;Arrays 类 UML 图&quot;&gt;&lt;/a&gt;Arrays 类 UML 图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/collections/collections17.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Java集合框架的层次结构&lt;/li&gt;
&lt;li&gt;Collection 接口&lt;/li&gt;
&lt;li&gt;HashSet 、LinkedHashSet 和 TreeSet&lt;/li&gt;
&lt;li&gt;Comparable 和Comparator 接口&lt;/li&gt;
&lt;li&gt;ArrayList 和LinkedList&lt;/li&gt;
&lt;li&gt;规则集和线性表性能比较&lt;/li&gt;
&lt;li&gt;Vector 和Stack&lt;/li&gt;
&lt;li&gt;Queue和 PriorityQueue&lt;/li&gt;
&lt;li&gt;Map接口及 HashMap, LinkedHashMap和TreeMap&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/tags/Java/"/>
    
      <category term="collections" scheme="http://xiaoqianchang.github.io/tags/collections/"/>
    
  </entry>
  
  <entry>
    <title>范型程序设计</title>
    <link href="http://xiaoqianchang.github.io/2017/05/15/generic-programming/"/>
    <id>http://xiaoqianchang.github.io/2017/05/15/generic-programming/</id>
    <published>2017-05-15T09:31:52.000Z</published>
    <updated>2017-05-16T04:10:38.496Z</updated>
    
    <content type="html">&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建泛型类、接口&lt;/li&gt;
&lt;li&gt;使用泛型类、接口&lt;/li&gt;
&lt;li&gt;泛型的优点&lt;/li&gt;
&lt;li&gt;创建泛型方法、受限泛型类型&lt;/li&gt;
&lt;li&gt;使用原类型&lt;/li&gt;
&lt;li&gt;泛型消除&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是泛型&quot;&gt;&lt;a href=&quot;#什么是泛型&quot; class=&quot;headerlink&quot; title=&quot;什么是泛型&quot;&gt;&lt;/a&gt;什么是泛型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;字面意思是：编写的代码适用于广泛的类型&lt;/li&gt;
&lt;li&gt;泛型的核心概念是参数化类型&lt;/li&gt;
&lt;li&gt;所谓的参数化类型是指编写代码时，它所适用的类型并不立即指明，而是使用参数符号来代替，具体的适用类型延迟到用户使用时才指定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;为什么要用泛型&quot;&gt;&lt;a href=&quot;#为什么要用泛型&quot; class=&quot;headerlink&quot; title=&quot;为什么要用泛型&quot;&gt;&lt;/a&gt;为什么要用泛型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;能够在编译时而不是运行时检查出错误&lt;/li&gt;
&lt;li&gt;保证了程序的类型安全并消除了一些繁琐的类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/generic/generic1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Generic Instantiation&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/generic/generic2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图左边&lt;em&gt;Runtime error&lt;/em&gt;，右边&lt;em&gt;Compile error&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在java泛型之前，一般的程序都是多态与继承来提高代码的灵活性和重用性。最常见的用继承来实现泛型的就是List容器。对于List来说，它存放的都是Object类型，由于java中除了基本类型外的所有类都继承自Object，因此，可以添加任何类型到List中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问题1：当我们从List中取出元素时，必须显示的将其转型成我们需要的类型。&lt;br&gt;问题2：当试图在只允许存放Integer的List中添加字符串类型时，编译器并不会报错。&lt;br&gt;针对以上可能出现的情况，泛型机制很好的解决了这些问题。&lt;/p&gt;
&lt;h2 id=&quot;泛型类&quot;&gt;&lt;a href=&quot;#泛型类&quot; class=&quot;headerlink&quot; title=&quot;泛型类&quot;&gt;&lt;/a&gt;泛型类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;泛型类是指该类使用的参数类型作用于整个类，即在类的内部任何地方(不包括静态代码区域)都可把参数类型当做一个真实类型来使用，比如用它做为返回值、用它定义变量等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;泛型类的定义&quot;&gt;&lt;a href=&quot;#泛型类的定义&quot; class=&quot;headerlink&quot; title=&quot;泛型类的定义&quot;&gt;&lt;/a&gt;泛型类的定义&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;定义泛型类的定义很简单，只需在定义类的时候，在类名后加入&lt;t&gt;这样一句代码即可，其中T是一个参数，是可变的。&lt;/t&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Person&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private T t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Person(T t)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.t = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;参数的类型是：&quot;&lt;/span&gt; + t.getClass().getCanonicalName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个类指明多个类型参数：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Teacher&amp;lt;V,S&amp;gt; extends Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	protected V v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private S s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Teacher(Object t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		super(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;(V v, S s)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.v = v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.s = s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;子类使用父类的类型参数：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Teacher&amp;lt;T,S&amp;gt; extends Person&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	protected T t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private S s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Teacher(T t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		super(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;(T t, S s)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.t = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.s = s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;泛型类的使用&quot;&gt;&lt;a href=&quot;#泛型类的使用&quot; class=&quot;headerlink&quot; title=&quot;泛型类的使用&quot;&gt;&lt;/a&gt;泛型类的使用&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;泛型类的使用方法也很简单，只需在构造的时候指明参数类型即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class GenericTest&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void  main(String[] args)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Person&amp;lt;Integer&amp;gt; p = new Person&amp;lt;Integer&amp;gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(p.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;泛型接口&quot;&gt;&lt;a href=&quot;#泛型接口&quot; class=&quot;headerlink&quot; title=&quot;泛型接口&quot;&gt;&lt;/a&gt;泛型接口&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;泛型接口的制定方式和泛型类相似&lt;/li&gt;
&lt;li&gt;如果一个类实现了泛型接口，那么该类也必须泛型，至少接受传递给接口的类型参数&lt;/li&gt;
&lt;li&gt;如果一个类实现泛型接口的特定类型，那么实现接口的类则不必泛型，如：class MyClass implements Containment&lt;double&gt; {//OK&lt;/double&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface Factory&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public T create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Car &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Computer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class CarFacotry implements Factory&amp;lt;Car&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Car &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;装载发动机！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;装载座椅！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;装载轮子！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; new Car();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ComputerFactory implements Factory&amp;lt;Computer&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Computer &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;装载主板！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;装载CPU!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;装载内存&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; new Computer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class GenericTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void  main(String[] args) throws Exception&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Factory&amp;lt;Car&amp;gt; carFactory = new CarFacotry();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Factory&amp;lt;Computer&amp;gt; computerFactory = new ComputerFactory();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;======开始生产车子！=======&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		carFactory.create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;=====开始生产电脑！========&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		computerFactory.create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;泛型方法&quot;&gt;&lt;a href=&quot;#泛型方法&quot; class=&quot;headerlink&quot; title=&quot;泛型方法&quot;&gt;&lt;/a&gt;泛型方法&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static &amp;lt;E&amp;gt; void &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(E[] list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; list.length; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.print(list[i] + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static void &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(Object[] list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; list.length; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.print(list[i] + &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;泛型边界&quot;&gt;&lt;a href=&quot;#泛型边界&quot; class=&quot;headerlink&quot; title=&quot;泛型边界&quot;&gt;&lt;/a&gt;泛型边界&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;泛型边界是指为泛型参数指定范围&lt;/li&gt;
&lt;li&gt;Java泛型系统允许使用extends和super关键字设置边界。&lt;/li&gt;
&lt;li&gt;extends设定上行边界，即指明参数类型的顶层类，限定实例化泛型类时传入的具体类型，只能是继承自顶层类的。 super设置下行边界，即指定参数类型的底层类，限定传入的参数类型只能是设定类的父类。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static void main(String[] args ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Rectangle rectangle = new Rectangle(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Circle9 circle = new Circle9(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Same area? &quot;&lt;/span&gt; + equalArea(rectangle, circle));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static &amp;lt;E extends GeometricObject&amp;gt; boolean equalArea(E object1, E object2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; object1.getArea() == object2.getArea();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;泛型边界在需要确保一种类型参数与另一种兼容时特别有用：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Pair&amp;lt;T, V extends T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	T first;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	V second;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Pair(T a, V b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		first = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		second = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;通配符&quot;&gt;&lt;a href=&quot;#通配符&quot; class=&quot;headerlink&quot; title=&quot;通配符&quot;&gt;&lt;/a&gt;通配符&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;有时泛型实例的作用域无法指明具体的参数类型。&lt;/li&gt;
&lt;li&gt;通配符类型，表示任何类型，通配符类型的符号是“?”，因此通配符类型可应用与所有继承自Object的类上。&lt;/li&gt;
&lt;li&gt;要为通配符建立一个上行边界：&lt;code&gt;&amp;lt;? extends superclass&amp;gt;&lt;/code&gt; &lt;code&gt;superclass 用作上行边界的类名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;还可以指定通配符的下行边界：&lt;code&gt;&amp;lt;? super subclass&amp;gt;&lt;/code&gt; &lt;code&gt;只有subclass或其超类接受实参&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Animal &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Bird extends Animal &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Fish extends Animal &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Zoo&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private T t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Zoo(T t)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.t = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public T &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; this.t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class GenericTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void  main(String[] args) throws Exception&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Zoo&amp;lt;? extends Animal&amp;gt; zoo = new Zoo&amp;lt;Bird&amp;gt;(new Bird());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		zoo = new Zoo&amp;lt;Fish&amp;gt;(new Fish());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//		zoo = new Zoo&amp;lt;Integer&amp;gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;); //不合法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class GenericTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void  main(String[] args) throws Exception&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Zoo&amp;lt;? super Bird&amp;gt; zoo = new Zoo&amp;lt;Bird&amp;gt;(new Bird());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		zoo = new Zoo&amp;lt;Animal&amp;gt;(new Animal());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//		zoo = new Zoo&amp;lt;Fish&amp;gt;(new Fish()); //不合法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;原类型和向后兼容&quot;&gt;&lt;a href=&quot;#原类型和向后兼容&quot; class=&quot;headerlink&quot; title=&quot;原类型和向后兼容&quot;&gt;&lt;/a&gt;原类型和向后兼容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;提供从旧的非泛型代码的过渡措施。&lt;/li&gt;
&lt;li&gt;允许不带任何类型参数使用泛型类，创建一个原类型。&lt;/li&gt;
&lt;li&gt;使用原类型的缺点是丧失了泛型的类型安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// raw &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ArrayList list = new ArrayList(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This is roughly equivalent to &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ArrayList&amp;lt;Object&amp;gt; list = new ArrayList&amp;lt;Object&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;原类型是不安全的&quot;&gt;&lt;a href=&quot;#原类型是不安全的&quot; class=&quot;headerlink&quot; title=&quot;原类型是不安全的&quot;&gt;&lt;/a&gt;原类型是不安全的&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Max.java: Find a maximum object&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Max &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /** Return the maximum between two objects */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public static Comparable max(Comparable o1, Comparable o2) &amp;#123;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o1.compareTo(o2) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; o1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; o2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当&lt;code&gt;Max.max(&amp;quot;Welcome&amp;quot;, 23);&lt;/code&gt;时，上面代码&lt;em&gt;Runtime Error&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id=&quot;泛型擦除&quot;&gt;&lt;a href=&quot;#泛型擦除&quot; class=&quot;headerlink&quot; title=&quot;泛型擦除&quot;&gt;&lt;/a&gt;泛型擦除&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;泛型擦除是指泛型代码在编译后，都会被擦除成原类型&lt;/li&gt;
&lt;li&gt;Zoo&lt;fish&gt;和Zoo&lt;bird&gt;，实质上在运行时是同一种类型，即原类型Zoo。&lt;/bird&gt;&lt;/fish&gt;&lt;/li&gt;
&lt;li&gt;运行时，java并不存在类型参数这一概念，因此你将无法获取任何相关的参数类型信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编译器在先对(a)中泛型的类型进行安全验证，然后再把代码翻译成原类型代码(b)，用在运行时&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/generic/generic3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GenericStack&amp;lt;String&amp;gt; stack1 = new GenericStack&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GenericStack&amp;lt;Integer&amp;gt; stack2 = new GenericStack&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;尽管 GenericStack&lt;string&gt; 和 GenericStack&lt;integer&gt; 是两个类型, 在JVM中只装载了GenericStack 一个类&lt;/integer&gt;&lt;/string&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;为何要擦除&quot;&gt;&lt;a href=&quot;#为何要擦除&quot; class=&quot;headerlink&quot; title=&quot;为何要擦除&quot;&gt;&lt;/a&gt;为何要擦除&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;擦除并不是一种语言特性，而是java泛型实现的一种折中办法。因为泛型在jdk5之后才是java的组成部分，因此这种折中是必须的。擦除的核心动机是使得泛化的代码可以使用非泛化的类库，反之依然，这称之为”迁移性兼容”。&lt;/li&gt;
&lt;li&gt;擦除的实质，将原有的类型参数替换成即非泛化的上界。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;泛型类：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Zoo&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private T t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Zoo(T t)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.t = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public T &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; this.t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译后（擦除后），没有指明上界，因此被擦除成了Object类型&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Zoo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Zoo(Object t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.t = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Object &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Object t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;泛型类：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Zoo&amp;lt;T extends Animal&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private T t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Zoo(T t)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.t = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public T &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; this.t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;编译后（擦除后），对于指明上界的的泛型，类型参数将被擦除其指明的上界。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Zoo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Zoo(Animal t) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.t = t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Animal &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Animal t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;泛型限制&quot;&gt;&lt;a href=&quot;#泛型限制&quot; class=&quot;headerlink&quot; title=&quot;泛型限制&quot;&gt;&lt;/a&gt;泛型限制&lt;/h2&gt;&lt;h3 id=&quot;类型参数不能实例化&quot;&gt;&lt;a href=&quot;#类型参数不能实例化&quot; class=&quot;headerlink&quot; title=&quot;类型参数不能实例化&quot;&gt;&lt;/a&gt;类型参数不能实例化&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Can&lt;span class=&quot;string&quot;&gt;&#39;t create an instance of T. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Gen&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	T ob;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Gen() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ob = new T(); // Illegal!!!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为运行时参数类型信息被擦除，因此无法确定类型参数T所代表的具体类型拥有无参的构造函数，甚至T所代表的具体类型可能不能进行实例化，如抽象类。&lt;/p&gt;
&lt;h3 id=&quot;instanceof判断类型&quot;&gt;&lt;a href=&quot;#instanceof判断类型&quot; class=&quot;headerlink&quot; title=&quot;instanceof判断类型&quot;&gt;&lt;/a&gt;instanceof判断类型&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Zoo&amp;lt;Bird&amp;gt; birdZoo = new Zoo&amp;lt;Bird&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(birdZoo instanceof Zoo&amp;lt;Bird&amp;gt;) &amp;#123;…&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;jvm提示Cannot perform instanceof check against parameterized type X,Use instead its raw form Zoo since generic type information will be erased at runtime错误？？？&lt;/p&gt;
&lt;p&gt;由于泛型采用擦除机制，对于一个泛型类来说，即使其参数类型有多种不同，但在运行时它们都共享着一个原生对象&lt;br&gt;如果允许编译的话，那下面的代码？&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Zoo&amp;lt;Fish&amp;gt; birdZoo = new Zoo&amp;lt;Fish&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(birdZoo instanceof Zoo&amp;lt;Bird&amp;gt;) &amp;#123;…&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并不意味这instanceof不能与泛型同存，下面就是个例外：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Zoo&amp;lt;Bird&amp;gt; birdZoo = new Zoo&amp;lt;Bird&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(birdZoo instanceof Zoo&amp;lt;?&amp;gt;) &amp;#123;System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;success&quot;&lt;/span&gt;);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个例外就是通配符，instanceof判断中允许使用参数类型为通配符的泛型，因为使用通配符类型并不存在以上争议。&lt;/p&gt;
&lt;h3 id=&quot;抛出或捕获参数类型信息&quot;&gt;&lt;a href=&quot;#抛出或捕获参数类型信息&quot; class=&quot;headerlink&quot; title=&quot;抛出或捕获参数类型信息&quot;&gt;&lt;/a&gt;抛出或捕获参数类型信息&lt;/h3&gt;&lt;p&gt;泛型类对象是不能被抛出或捕获的，因为泛型类是不能继承或实现Throwable接口及其子类的。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class GenericException&amp;lt;T&amp;gt; extends Exception &amp;#123;//无法编译&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类型参数也不能使用在Catch捕获的对象中&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class GenericException&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;excetionTest&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		try&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;catch(T t)&amp;#123;//提示错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;JVM却允许我们在异常的处理中使用类型参数&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class GenericException&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;excetionTest&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		try&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;catch(Exception e)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			T t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Java中不能声明泛型类数组&lt;br&gt;&lt;code&gt;List&amp;lt;Integer&amp;gt;[] list = new ArrayList&amp;lt;String&amp;gt;[2];//编译错误&lt;/code&gt;&lt;br&gt;因为擦除后List&lt;integer&gt;[]将会被擦除成List[]，如果允许声明泛型数组的话，我们就可以这样做：&lt;/integer&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object[] objects = list;
Objects[0] = new ArrayList&amp;lt;String&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样做显然没有问题，编译时将无法检测处错误，但运行时仍然会导致错误&lt;/p&gt;
&lt;p&gt;当定义一个泛型类时，泛型类型参数将不允许使用在静态代码中&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Generic&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static T t;//编译错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static T &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而并不是说不能使用类型参数编写静态代码，当类型编写静态的泛型方法时，java是允许我们使用类型参数的&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Generic&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static &amp;lt;T&amp;gt; T get(Class&amp;lt;T&amp;gt; clazz) throws Exception&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; clazz.newInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;边界处不能使用基本类型，而且基本类型不能用于指明类型参数&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Generic&amp;lt;T extends int&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		List&amp;lt;int&amp;gt; list = new ArrayList&amp;lt;int&amp;gt;();//编译错误&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是因为擦除时将使用边界替换参数类型，而边界必须继承自Object。在java中基本类型并不继承Object&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建泛型类、接口&lt;/li&gt;
&lt;li&gt;使用泛型类、接口&lt;/li&gt;
&lt;li&gt;泛型的优点&lt;/li&gt;
&lt;li&gt;创建泛型方法、受限泛型类型&lt;/li&gt;
&lt;li&gt;使用原类型&lt;/li&gt;
&lt;li&gt;泛型消除&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/tags/Java/"/>
    
      <category term="范型" scheme="http://xiaoqianchang.github.io/tags/%E8%8C%83%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>算法递归程序设计</title>
    <link href="http://xiaoqianchang.github.io/2017/05/11/algorithm-recursive-programming/"/>
    <id>http://xiaoqianchang.github.io/2017/05/11/algorithm-recursive-programming/</id>
    <published>2017-05-11T03:28:31.000Z</published>
    <updated>2017-05-16T04:09:27.832Z</updated>
    
    <content type="html">&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;递归的概念及用途。&lt;/li&gt;
&lt;li&gt;递归算法的设计方法。&lt;/li&gt;
&lt;li&gt;递归算法的执行过程。&lt;/li&gt;
&lt;li&gt;递归算法与迭代算法的关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;著名的八皇后问题：在棋盘上放置8个皇后，使其中任意两个都不同行、不同列、不在一条对角线上，如下图所示：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/eightqueens1.png&quot; alt=&quot;eightqueens&quot;&gt;&lt;/p&gt;
&lt;p&gt;解决这个问题的方法——递归&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;递归的概念&quot;&gt;&lt;a href=&quot;#递归的概念&quot; class=&quot;headerlink&quot; title=&quot;递归的概念&quot;&gt;&lt;/a&gt;递归的概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;递归算法是一种直接或者间接调用自身函数或者方法的算法。递归算法的实质是把问题分解成规模缩小的同类问题的子问题，然后递归调用方法来表示问题的解。递归算法对解决一大类问题很有效，它可以使算法简洁和易于理解。递归算法，其实说白了，就是程序的自身调用。它表现在一段程序中往往会遇到调用自身的那样一种coding策略，这样我们就可以利用大道至简的思想，把一个大的复杂的问题层层转换为一个小的和原问题相似的问题来求解的这样一种策略。递归往往能给我们带来非常简洁非常直观的代码形势，从而使我们的编码大大简化，然而递归的思维确实很我们的常规思维相逆的，我们通常都是从上而下的思维问题，而递归趋势从下往上的进行思维。这样我们就能看到我们会用很少的语句解决了非常大的问题，所以递归策略的最主要体现就是小的代码量解决了非常复杂的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;递归的定义&quot;&gt;&lt;a href=&quot;#递归的定义&quot; class=&quot;headerlink&quot; title=&quot;递归的定义&quot;&gt;&lt;/a&gt;递归的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;若一个对象部分地包含它自己，或用它自己给自己定义，则称这个对象是递归的；若一个过程直接地或间接地调用自己，则称这个过程是递归的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直接递归&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;fun_a&lt;/span&gt;&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  … &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; fun_a()  …&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;间接递归&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;fun_a&lt;/span&gt;&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  …  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun_b()  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;fun_b&lt;/span&gt;&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  …  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fun_a() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;递归分类&quot;&gt;&lt;a href=&quot;#递归分类&quot; class=&quot;headerlink&quot; title=&quot;递归分类&quot;&gt;&lt;/a&gt;递归分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;问题的定义是递归的&lt;br&gt;例如：阶乘函数的定义&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;               当n=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;时  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n！= &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n*(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)！       当n&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;时&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factorial(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;factorial(n) = n*factorial(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码呈现：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public int factorial(int n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; n * factorial(n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;问题的解法存在自调用&lt;br&gt;例如：折半查找算法&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui2.png&quot; alt=&quot;折半查找算法&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;折半查找递归算法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static int bSearch(int[] a, int x, int low, int high) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(low &amp;gt; high) &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; 		            //查找不成功&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mid = (low + high) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x == a[mid]) &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; mid; 			    //查找成功&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x &amp;lt; a[mid])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; bSearch(a, x, low, mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); 	//在上半区查找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; bSearch(a, x, mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, high); 	//在下半区查找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;测试主函数设计如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int[] a = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int x = &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int bn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bn = bSearch(a, x, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(bn == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;x不在数组a中&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;x在数组a中，下标为&quot;&lt;/span&gt; + bn);	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;递归模型&quot;&gt;&lt;a href=&quot;#递归模型&quot; class=&quot;headerlink&quot; title=&quot;递归模型&quot;&gt;&lt;/a&gt;递归模型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;递归模型反映一个递归问题的递归结构。一般地，一个递归模型是由&lt;strong&gt;递归出口&lt;/strong&gt;和&lt;strong&gt;递归体&lt;/strong&gt;两部分组成，前者确定递归到何时为止，后者确定递归的方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;递归出口的一般格式为：&lt;br&gt;f(s0)=m0；这里的s0与m0均为常量，有的递归问题可能有几个递归出口。&lt;/p&gt;
&lt;p&gt;递归体的一般格式为：&lt;br&gt;f(s)=g(f(s1), f(s2),……, f(sn),c1, c2,……，cm)&lt;br&gt;这里的s是一个递归“大问题”，s1，s2，……，sn是递归“小问题”，c1，c2，……，cm是若干个可以直接（用非递归方法）解决的问题，g是一个非递归函数，反映了递归问题的结构。&lt;/p&gt;
&lt;p&gt;例如，阶乘函数&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui3.png&quot; alt=&quot;阶乘函数&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;递归的执行过程&quot;&gt;&lt;a href=&quot;#递归的执行过程&quot; class=&quot;headerlink&quot; title=&quot;递归的执行过程&quot;&gt;&lt;/a&gt;递归的执行过程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;实际上，递归是把一个不能或不好直接求解的“大问题”转化为一个或几个“小问题”来解决，再把这些“小问题”进一步分解成更小的“小问题”来解决，如此分解，直至每一个“小问题”都可以直接解决（此时分解到递归出口）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;递归过程和运行时栈&quot;&gt;&lt;a href=&quot;#递归过程和运行时栈&quot; class=&quot;headerlink&quot; title=&quot;递归过程和运行时栈&quot;&gt;&lt;/a&gt;递归过程和运行时栈&lt;/h2&gt;&lt;p&gt;递归函数的执行过程具有三个特点： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数名相同； &lt;/li&gt;
&lt;li&gt;不断地自调用； &lt;/li&gt;
&lt;li&gt;最后被调用的函数要最先被返回。&lt;br&gt;系统用于保存递归函数调用信息的堆栈称作&lt;strong&gt;运行时栈&lt;/strong&gt;。&lt;br&gt;每一层递归调用所需保存的信息构成运行时栈的一个&lt;strong&gt;工作记录&lt;/strong&gt;&lt;br&gt;栈顶的工作记录保存的是当前调用函数的信息，所以栈顶的工作记录也称为&lt;strong&gt;活动记录&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Computing-Factorial&quot;&gt;&lt;a href=&quot;#Computing-Factorial&quot; class=&quot;headerlink&quot; title=&quot;Computing Factorial&quot;&gt;&lt;/a&gt;Computing Factorial&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;factorial(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * factorial(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * factorial(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * ( &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * factorial(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * ( &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * ( &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * ( &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Trace-Recursive-factorial&quot;&gt;&lt;a href=&quot;#Trace-Recursive-factorial&quot; class=&quot;headerlink&quot; title=&quot;Trace Recursive factorial&quot;&gt;&lt;/a&gt;Trace Recursive factorial&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui5.png&quot; alt=&quot;Trace Recursive factorial&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;factorial-4-Stack-Trace&quot;&gt;&lt;a href=&quot;#factorial-4-Stack-Trace&quot; class=&quot;headerlink&quot; title=&quot;factorial(4) Stack Trace&quot;&gt;&lt;/a&gt;factorial(4) Stack Trace&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui6.png&quot; alt=&quot;factorial(4) Stack Trace&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Fibonacci-数&quot;&gt;&lt;a href=&quot;#Fibonacci-数&quot; class=&quot;headerlink&quot; title=&quot;Fibonacci 数&quot;&gt;&lt;/a&gt;Fibonacci 数&lt;/h3&gt;&lt;p&gt;Fibonacci series: 0 1 1 2 3 5 8 13 21 34 55 89…&lt;br&gt;         indices: 0 1 2 3 4 5 6 7  8  9  10 11&lt;br&gt;fib(0) = 0;&lt;br&gt;fib(1) = 1;&lt;br&gt;fib(index) = fib(index -1) + fib(index -2); index &amp;gt;=2&lt;/p&gt;
&lt;p&gt;fib(3) = fib(2) + fib(1) = (fib(1) + fib(0)) + fib(1) = (1 + 0) +fib(1) = 1 + fib(1) = 1 + 1 = 2&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static int Fibonacci(int n)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; n;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; Fibonacci(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + Fibonacci(n-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;图形讲解如下：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;递归算法的设计方法&quot;&gt;&lt;a href=&quot;#递归算法的设计方法&quot; class=&quot;headerlink&quot; title=&quot;递归算法的设计方法&quot;&gt;&lt;/a&gt;递归算法的设计方法&lt;/h2&gt;&lt;p&gt;适宜于用递归算法求解的问题的充分必要条件是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题具有某种可借用的类同自身的子问题描述的性质。&lt;/li&gt;
&lt;li&gt;某一有限步的子问题（也称作本原问题）有直接的解存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个问题存在上述两个基本要素时，设计该问题的递归算法的方法是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把对原问题的求解表示成对子问题求解的形式。&lt;/li&gt;
&lt;li&gt;设计递归出口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：一条信息打印n次。&lt;br&gt;   把这个问题分解成两个子问题：打印一次和打印n-1次。第二个问题和原始问题相同，只是规模小了。递归出口时 n==0. &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static void nPrintln(String message, int &lt;span class=&quot;built_in&quot;&gt;times&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;times&lt;/span&gt; &amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nPrintln(message, &lt;span class=&quot;built_in&quot;&gt;times&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; // The base &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; is &lt;span class=&quot;built_in&quot;&gt;times&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例：回文序列&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static boolean isPalindrome(String s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s.length() &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) // Base &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s.charAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) != s.charAt(s.length() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) // Base &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; isPalindrome(s.substring(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, s.length() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入”abcba”—返回true&lt;/p&gt;
&lt;h2 id=&quot;递归辅助方法&quot;&gt;&lt;a href=&quot;#递归辅助方法&quot; class=&quot;headerlink&quot; title=&quot;递归辅助方法&quot;&gt;&lt;/a&gt;递归辅助方法&lt;/h2&gt;&lt;p&gt;前面的例子 isPalindrome 效率差，原因是它每次递归调用都会创建一个新的字符串。可以用辅助方法改进之:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static boolean isPalindrome(String s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; isPalindrome(s, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, s.length() - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static boolean isPalindrome(String s, int low, int high) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (high &amp;lt;= low) // Base &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (s.charAt(low) != s.charAt(high)) // Base &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; isPalindrome(s, low + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, high - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;递归技术的关键问题&quot;&gt;&lt;a href=&quot;#递归技术的关键问题&quot; class=&quot;headerlink&quot; title=&quot;递归技术的关键问题&quot;&gt;&lt;/a&gt;递归技术的关键问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为防止递归的无休止调用，在递归函数中要及时返回，这就是结束条件的作用。在所有的递归函数中都有一个终止递归的条件判断。&lt;/li&gt;
&lt;li&gt;递归函数可以简化程序，但一般不能提高程序的执行效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;案例一：文件夹大小&quot;&gt;&lt;a href=&quot;#案例一：文件夹大小&quot; class=&quot;headerlink&quot; title=&quot;案例一：文件夹大小&quot;&gt;&lt;/a&gt;案例一：文件夹大小&lt;/h2&gt;&lt;p&gt;前面的问题也可以不用递归就解决，但是有些问题不用递归很难解决。比如：统计文件夹的大小问题，它是文件夹下所有文件大小的总和，而一个文件夹有可能包括子文件夹，假设文件夹结构如下：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;文件夹大小可以递归地定义为:&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;案例二-：汉诺塔问题的递归求解过程&quot;&gt;&lt;a href=&quot;#案例二-：汉诺塔问题的递归求解过程&quot; class=&quot;headerlink&quot; title=&quot;案例二 ：汉诺塔问题的递归求解过程&quot;&gt;&lt;/a&gt;案例二 ：汉诺塔问题的递归求解过程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;汉诺塔(Tower of Hanoi)问题的解法：&lt;br&gt;   如果 n = 1，则将这一个盘子直接从 A 柱移到 C 柱上。否则，执行以下三步：&lt;br&gt;   ① 用 C 柱做过渡，将 A 柱上的 (n-1) 个盘子移到 B 柱上：&lt;br&gt;   ② 将 A 柱上最后一个盘子直接移到 C 柱上；&lt;br&gt;   ③ 用 A 柱做过渡，将 B 柱上的 (n-1) 个盘子移到 C 柱上。&lt;/p&gt;
&lt;p&gt;根据以上的分析，不难写出程序：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static void Hanoi(int n, char A, char B, char C) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123; //end condition&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        move(A, C); //‘move’ can be defined to be a &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Hanoi(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, A, C, B); //move sub [n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] pans from A to B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        move(A, C); //move the bottom(max) pan to C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Hanoi(n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, B, A, C); //move sub [n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] pans from B to C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;案例三：分形&quot;&gt;&lt;a href=&quot;#案例三：分形&quot; class=&quot;headerlink&quot; title=&quot;案例三：分形&quot;&gt;&lt;/a&gt;案例三：分形&lt;/h2&gt;&lt;p&gt;分形是一种几何图形，它划分成的部分都和整体图形相同，只是规模更小。介绍其中一种 Sierpinski 三角&lt;/p&gt;
&lt;h3 id=&quot;Sierpinski-Triangle&quot;&gt;&lt;a href=&quot;#Sierpinski-Triangle&quot; class=&quot;headerlink&quot; title=&quot;Sierpinski Triangle&quot;&gt;&lt;/a&gt;Sierpinski Triangle&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;开始第0层是一个等边三角形，如图 (a)。&lt;/li&gt;
&lt;li&gt;连接第0层每个边的中点得到第一层Sierpinski 三角，如图(b)。&lt;/li&gt;
&lt;li&gt;中间的三角形不考虑，把其余的三个三角形的中点相连，得到第2层的Sierpinski 三角，如图(c)。&lt;/li&gt;
&lt;li&gt;递归地重复这个过程，得到第3、4等等Sierpinski 三角，如图(d)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui11.png&quot; alt=&quot;&quot;&gt;  &lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui12.png&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui13.png&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui14.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Sierpinski-Triangle-Solution&quot;&gt;&lt;a href=&quot;#Sierpinski-Triangle-Solution&quot; class=&quot;headerlink&quot; title=&quot;Sierpinski Triangle Solution&quot;&gt;&lt;/a&gt;Sierpinski Triangle Solution&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui15.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;案例四：八皇后&quot;&gt;&lt;a href=&quot;#案例四：八皇后&quot; class=&quot;headerlink&quot; title=&quot;案例四：八皇后&quot;&gt;&lt;/a&gt;案例四：八皇后&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui16.png&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/eightqueens1.png&quot; alt=&quot;eightqueens&quot;&gt; &lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/digui17.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://chenqx.github.io/2014/09/29/Algorithm-Recursive-Programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;递归算法详解&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;递归的概念及用途。&lt;/li&gt;
&lt;li&gt;递归算法的设计方法。&lt;/li&gt;
&lt;li&gt;递归算法的执行过程。&lt;/li&gt;
&lt;li&gt;递归算法与迭代算法的关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;著名的八皇后问题：在棋盘上放置8个皇后，使其中任意两个都不同行、不同列、不在一条对角线上，如下图所示：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/digui/eightqueens1.png&quot; alt=&quot;eightqueens&quot;&gt;&lt;/p&gt;
&lt;p&gt;解决这个问题的方法——递归&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/tags/Java/"/>
    
      <category term="算法" scheme="http://xiaoqianchang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="http://xiaoqianchang.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://xiaoqianchang.github.io/2017/04/29/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://xiaoqianchang.github.io/2017/04/29/多线程/</id>
    <published>2017-04-29T07:54:57.000Z</published>
    <updated>2017-05-02T15:34:27.130Z</updated>
    
    <content type="html">&lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;理解多线程的概念。&lt;/li&gt;
&lt;li&gt;通过实现Runnable接口开发任务类。&lt;/li&gt;
&lt;li&gt;使用Thread类创建线程以运行任务。&lt;/li&gt;
&lt;li&gt;使用Thread类中的方法控制线程。&lt;/li&gt;
&lt;li&gt;执行线程池中的代码。&lt;/li&gt;
&lt;li&gt;使用同步方法或阻塞同步线程，避免竞争状态。&lt;/li&gt;
&lt;li&gt;使用锁来同步线程。&lt;/li&gt;
&lt;li&gt;使用锁的条件便于线程通信。&lt;/li&gt;
&lt;li&gt;使用阻塞序列来同步对数组队列、链表队列以及优先队列的访问。&lt;/li&gt;
&lt;li&gt;使用信号量限制对共享资源的访问次数。&lt;/li&gt;
&lt;li&gt;使用资源排序技术来避免死锁。&lt;/li&gt;
&lt;li&gt;描述线程的生命周期。&lt;/li&gt;
&lt;li&gt;使用Collections类中的静态方法创建同步的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;Java的重要功能之一就是内部支持多线程—在一个程序内部允许同时运行多个任务。在许多程序设计语言中，多线程都是通过调用依赖于系统的过程或函数来实现的。本文将介绍线程的概念以及如何在Java中开发多线程程序。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;线程的概念&quot;&gt;&lt;a href=&quot;#线程的概念&quot; class=&quot;headerlink&quot; title=&quot;线程的概念&quot;&gt;&lt;/a&gt;线程的概念&lt;/h2&gt;&lt;p&gt;一个程序可能包含多个运行的任务。线程（thread）是指一个任务从头至尾的执行流。线程提供了运行一个任务的机制。对于Java而言，可以在一个任务中并发的启动多个线程。而这些线程可以在多处理器系统上同时运行。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;单处理器&lt;/code&gt;系统中，多个线程共享CPU时间成为&lt;code&gt;时间共享&lt;/code&gt;，而操作系统负责调度及分配资源给它们。&lt;/p&gt;
&lt;p&gt;多线程可以使程序反应更快。交付性更强、执行效率更高。&lt;br&gt;当程序作为一个应用程序运行时，Java解释器为main方法启动一个线程。在Java中，每个任务都是Runnable接口的实例，也称为&lt;code&gt;可运行对象（runnable object）&lt;/code&gt;。线程本质上讲就是便于任务执行的对象。&lt;/p&gt;
&lt;h2 id=&quot;创建任务和线程&quot;&gt;&lt;a href=&quot;#创建任务和线程&quot; class=&quot;headerlink&quot; title=&quot;创建任务和线程&quot;&gt;&lt;/a&gt;创建任务和线程&lt;/h2&gt;&lt;p&gt;任务就是对象。&lt;br&gt;任务：&lt;code&gt;任务类&lt;/code&gt;必须实现Runnable接口。接口很简单，包含一个run方法，这个方法就是来告诉系统线程将如何运行。&lt;br&gt;线程：任务必须在线程中执行。创建任务线程Thread thread = new Thread(task);&lt;br&gt;然后调用start()方法告诉Java虚拟机该线程准备运行。thread.start();&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TaskClass implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;TaskClass&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// Implement the run method &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; Runnable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Tell system hoe to run custom thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Client &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;someMethod&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Create an instance of TaskClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		TaskClass task = new TaskClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Create a theread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Thread thread = new Thread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Start a thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		thread.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重要的注意事项：任务中的run()方法指明如何完成这个任务。Java虚拟机会自动调用该方法，无需特意调用它。直接调用run()只是在同一线程中执行该方法，而没有新线程被启动。&lt;/p&gt;
&lt;h2 id=&quot;Thread类&quot;&gt;&lt;a href=&quot;#Thread类&quot; class=&quot;headerlink&quot; title=&quot;Thread类&quot;&gt;&lt;/a&gt;Thread类&lt;/h2&gt;&lt;p&gt;Thread类包含为任务而创建的线程的构造方法，以及控制线程的方法。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/Thread1.png&quot; alt=&quot;Thread类包括控制线程的方法&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意：Thread类还包含方法stop()、suspend()和resume()。由于普遍认为这些方法具有不安全因素，所以在Java2中不提倡（或不流行）这些方法。为替代方法stop()的使用，可以通过给Thread变量赋值null来表明它被停止。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yield()&lt;/code&gt;为其它线程临时让出CPU时间。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; lastNum; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Thread.yield();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;sleep()&lt;/code&gt;可以将该线程设置为休眠以确保其它线程的执行，休眠时间为指定的毫秒。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;gt;= &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;sleep方法抛出一个InterruptedException，这是一个必检异常。如果在一个循环中使用了sleep方法，那就将这个循环放在try-catch块中，如下所示&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (...) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果循环在try-catch块外，即使线程被中断，它也可能会继续执行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;join()&lt;/code&gt;方法使一个线程等待另一个线程的结束。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/thread-join.png&quot; alt=&quot;join()&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;    在Java将来的版本中，优先级的数字可能会改变。为将这种变化带来的影响降低到最低，可以使用Thread类中的常量来指定线程优先级。&lt;br&gt;&lt;strong&gt;提示&lt;/strong&gt;    如果总有一个优先级较高的线程在运行，或者有一个相同优先级的线程不退出，那么这个线程可能永远也没有运行的机会，这种情况称为资源竟争或缺乏状态(contention or starvation )。为避免竟争现象，高优先蜒的线程必须定时地调用sleep方法或yield方法，来给低优先级或相同优先级的线程一个运行的机会。&lt;/p&gt;
&lt;h2 id=&quot;线程池&quot;&gt;&lt;a href=&quot;#线程池&quot; class=&quot;headerlink&quot; title=&quot;线程池&quot;&gt;&lt;/a&gt;线程池&lt;/h2&gt;&lt;p&gt;学习了如何通过实现java.lang.Runnable来定义任务类，以及如何像下面这样创建一个线程来运行任务：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Runnable task = new TaskClass(task);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;new Thread(task).start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;该方法对单一任务的执行时很方便的，但是由于必须为每个任务创建一个线程，因此对大量的任务而言是不够高效的。为每个任务开始一个新线程可能会限制流量并且造成性能降低。线程池是管理并发执行任务个数的理想方法。Java提供`Excutor`接口来执行线程池中的任务，提供`ExcutorService`接口来管理和控制任务。ExcutorService是Excutor的子接口。
为了创建一个Excutor对象，可以使用ExcutorServices类中的静态方法，`newFixedThreadPool(int)`方法在池中创建固定数目的线程。如果线程完成了任务的执行，它可以被重新使用以执行另外一个任务。如果线程池中所有的线程都不是处于空闲状态，而且有任务在等待执行，那么在关机之前，如果由于一个错误终止了一个线程，就会创建一个新的线程来替代它。 如果线程池中多有线程都不是处于空闲状态，而且有任务在等待执行，那么newCachedThreadPoll()方法就会创建一个新线程。如果缓冲池中的线程在60秒内都没有被使用就该终止它。对多个小人物而言，一个缓冲池已经足够。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/thread-join.png&quot; alt=&quot;join()&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.util.concurrent.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ExecutorDemo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Craete a fixed thread pool with maximun three threads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ExecutorService executor= Executors.newFixedThreadPool(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Submit runnable tasks to the executor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.execute(new PaintChar(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.execute(new PaintChar(&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.execute(new PaintNum(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Shut odwn the executor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面程序中第6行创建了一个最大线程数为3的线程池执行器。两个任务PrintChar、PrintNum。第9行创建任务new  PrintChar(‘a’，100)，并且将它添加到线程池中，在10~11行，创建了另外两个可运行的任务，并且将它们添加到同一个线程池中。执行器创建三个线程来并发执行三个任务。如果用下面的语句替换第6行&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ExecutorService executor =  Executors.newFixedThreadPool(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会发生什么呢？这三个可运行的任务将顺序执行，因为线程池中只有一个线程。如果用下面的语句替换第6行，又会发生什么呢？&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ExecutorService executor = Executors.newCachedThreadPool();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;为每个等待的任务创建一个新线程&lt;/strong&gt;，所以，所有的任务都并发的执行。&lt;br&gt;第14行的方法shutdown()通知执行器关闭。不能接受新的任务，但是现有的任务将继续热行直至完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;    如果需要为一个任务创建一个线程，就使用Thread类。如果需要为多个任务创建线程，最好使用线程池。&lt;/p&gt;
&lt;h3 id=&quot;使用new-Thread-创建线程的弊端&quot;&gt;&lt;a href=&quot;#使用new-Thread-创建线程的弊端&quot; class=&quot;headerlink&quot; title=&quot;使用new Thread()创建线程的弊端&quot;&gt;&lt;/a&gt;使用new Thread()创建线程的弊端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每次通过new Thread()创建对象性能不佳。&lt;/li&gt;
&lt;li&gt;线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。&lt;/li&gt;
&lt;li&gt;缺乏更多功能，如定时执行、定期执行、线程中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;线程池使用场景&quot;&gt;&lt;a href=&quot;#线程池使用场景&quot; class=&quot;headerlink&quot; title=&quot;线程池使用场景&quot;&gt;&lt;/a&gt;线程池使用场景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单个任务处理的时间比较短&lt;/li&gt;
&lt;li&gt;将需处理的任务的数量大&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用线程池的好处&quot;&gt;&lt;a href=&quot;#使用线程池的好处&quot; class=&quot;headerlink&quot; title=&quot;使用线程池的好处&quot;&gt;&lt;/a&gt;使用线程池的好处&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;降低资源消耗。重用存在的线程，减少对象创建、消亡的开销，提升性能。&lt;/li&gt;
&lt;li&gt;提高响应速度。可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。&lt;/li&gt;
&lt;li&gt;提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;怎样使用线程池&quot;&gt;&lt;a href=&quot;#怎样使用线程池&quot; class=&quot;headerlink&quot; title=&quot;怎样使用线程池&quot;&gt;&lt;/a&gt;怎样使用线程池&lt;/h3&gt;&lt;h4 id=&quot;创建线程池&quot;&gt;&lt;a href=&quot;#创建线程池&quot; class=&quot;headerlink&quot; title=&quot;创建线程池&quot;&gt;&lt;/a&gt;创建线程池&lt;/h4&gt;&lt;p&gt;可以通过ThreadPoolExecutor来创建一个线程池。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public ThreadPoolExecutor(int corePoolSize,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          int maximumPoolSize,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          long keepAliveTime,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          TimeUnit unit,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          BlockingQueue&amp;lt;Runnable&amp;gt; workQueue)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建线程池需要的几个参数：&lt;br&gt;corePoolSize（线程池的基本大小）：当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads方法，线程池会提前创建并启动所有基本线程。&lt;/p&gt;
&lt;p&gt;maximumPoolSize（线程池最大大小）：线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。&lt;/p&gt;
&lt;p&gt;keepAliveTime（线程活动保持时间）：线程池的工作线程空闲后，保持存活的时间。所以如果任务很多，并且每个任务执行的时间比较短，可以调大这个时间，提高线程的利用率。&lt;/p&gt;
&lt;p&gt;TimeUnit（线程活动保持时间的单位）：可选的单位有天（DAYS），小时（HOURS），分钟（MINUTES），毫秒(MILLISECONDS)，微秒(MICROSECONDS, 千分之一毫秒)和毫微秒(NANOSECONDS, 千分之一微秒)。&lt;/p&gt;
&lt;p&gt;runnableTaskQueue（任务队列）：用于保存等待执行的任务的阻塞队列。（ArrayBlockingQueue、LinkedBlockingQueue、SynchronousQueue、PriorityBlockingQueue）&lt;/p&gt;
&lt;h4 id=&quot;JDK自带四种线程池总类介绍&quot;&gt;&lt;a href=&quot;#JDK自带四种线程池总类介绍&quot; class=&quot;headerlink&quot; title=&quot;JDK自带四种线程池总类介绍&quot;&gt;&lt;/a&gt;JDK自带四种线程池总类介绍&lt;/h4&gt;&lt;p&gt;Java里面线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是ExecutorService。下面这张图完整描述了线程池的类体系结构：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-class.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;newFixedThreadPool创建一个指定工作线程数量的线程池。每当提交一个任务就创建一个工作线程，如果工作线程数量达到线程池初始的最大数，则将提交的任务存入到池队列中。&lt;/li&gt;
&lt;li&gt;newCachedThreadPool创建一个可缓存的线程池。这种类型的线程池特点是：&lt;br&gt;1).工作线程的创建数量几乎没有限制(其实也有限制的，数目为Interger. MAX_VALUE)， 这样可灵活的往线程池中添加线程。&lt;br&gt;2).如果长时间没有往线程池中提交任务，即如果工作线程空闲了指定的时间(默认为1分钟)，则该工作线程将自动终止。终止后，如果你又提交了新的任务，则线程池重新创建一个工作线程。&lt;/li&gt;
&lt;li&gt;newScheduleThreadPool创建一个定长的线程池，而且支持定时的以及周期性的任务执行，类似于Timer。&lt;/li&gt;
&lt;li&gt;newSingleThreadExecutor创建一个单线程化的Executor，即只创建唯一的工作者线程来执行任务，如果这个线程异常结束，会有另一个取代它，保证顺序执行(我觉得这点是它的特色)。单工作线程最大的特点是可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的 。 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;FixedThreadPool是一个典型且优秀的线程池，它具有线程池提高程序效率和节省创建线程时所耗的开销的优点。但是，在线程池空闲时，即线程池中没有可运行任务时，它不会释放工作线程，还会占用一定的系统资源。 &lt;/li&gt;
&lt;li&gt;CachedThreadPool的特点就是在线程池空闲时，即线程池中没有可运行任务时，它会释放工作线程，从而释放工作线程所占用的资源。但是，但当出现新任务时，又要创建一新的工作线程，又要一定的系统开销。并且，在使用CachedThreadPool时，一定要注意控制任务的数量，否则，由于大量线程同时运行，很有会造成系统瘫痪。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你可以使用JDK自带的监控工具来监控我们创建的线程数量，运行一个不终止的线程，创建指定量的线程，来观察：&lt;br&gt;工具目录：C:\Program Files\Java\jdk1.6.0_06\bin\jconsole.exe&lt;br&gt;效果如下：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-tools-jconsole1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;选择我们运行的程序：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-tools-jconsole2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;线程同步&quot;&gt;&lt;a href=&quot;#线程同步&quot; class=&quot;headerlink&quot; title=&quot;线程同步&quot;&gt;&lt;/a&gt;线程同步&lt;/h2&gt;&lt;p&gt;如果一个共享资源被多个线程同时访问，可能会遭到破坏。&lt;br&gt;假设创建并启动100个线程，每个线程都往同一个账户中添加一个便士。定义一个名为Account的类模拟账户，一个名为AddPennyTask的类用来想账户里添加一个便士，以及一个用于创建和启动线程的主类。这些类之间的关系如下；&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.util.concurrent.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class AccountWithoutSync &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static Account account = new Account();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ExecutorService executor = Executors.newCachedThreadPool();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			executor.execute(new AddPennyTask());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!executor.isTerminated()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;What is balance? &quot;&lt;/span&gt; +account.getBalance());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static class AddPennyTask implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			account.deposit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static class Account &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private int balance = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public int &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getBalance&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; balance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void deposit(int amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			int newBalance = balance +amount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				Thread.sleep(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			balance = newBalance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面38~47里面就可能导致数据破坏，理论上得出的结果为100，然而实际结果可能小于100。就是可能出现多个线程同时执行39行导致多个线程做了同样的工作。像这种多个线程同时是用共同资源就叫做&lt;code&gt;竞争状态&lt;/code&gt;。如果一个类的对象在多线程程序中没有导致竞争状态，则称这样的类为&lt;code&gt;线程安全的&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;synchronized关键字&quot;&gt;&lt;a href=&quot;#synchronized关键字&quot; class=&quot;headerlink&quot; title=&quot;synchronized关键字&quot;&gt;&lt;/a&gt;synchronized关键字&lt;/h3&gt;&lt;p&gt;为了避免竞争状态，应该防止多个线程同时进入程序的某一特定部分，程序中的这部分称为&lt;code&gt;临界区&lt;/code&gt;。如果上面的deposit方法就可以使用关键字&lt;code&gt;synchronized&lt;/code&gt;来同步方法，以便一次只有一个线程可以访问这个方法。&lt;br&gt;当然解决上面的同步问题有几种办法。&lt;br&gt;一种是在通过在第38上的deposit方法中添加关键字synchronized，使Account类成为线程安全的，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public synchronized void deposit(int amount)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一种是同步方法在执行之前需要加锁。&lt;code&gt;对于实例方法，要给调用该方法的对象加锁，对于静态方法要给这个类加锁。&lt;/code&gt;如果一个线程调用一个对象上的同步实例方法（静态方法），首先给该对象（类）加锁，然后执行该方法，最后解锁。在解锁之前，另一个调用那个对象（类）中方法的线程将被阻塞，直到解锁。&lt;br&gt;随着deposit方法被同步化，前面的情景就不在会出现。如果任务1开始进入deposit方法，任务2就会被阻塞，直到任务1完成该方法的运行，如下；&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-synchronized.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;同步语句&quot;&gt;&lt;a href=&quot;#同步语句&quot; class=&quot;headerlink&quot; title=&quot;同步语句&quot;&gt;&lt;/a&gt;同步语句&lt;/h3&gt;&lt;p&gt;调用一个对象的同步实例方法要求给该对象加锁。调用一个类的同步静态方法要求对该类加锁。当执行方法中某一个代码块时，同步语句不仅可以用于对this对象加锁，而且可用于对任何对象加锁。这个代码块成为&lt;code&gt;同步块&lt;/code&gt;。同步语句的一般形式如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;synchronized(expr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statements;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表达式expr必须求出对象的引用。如果对象已经被另一个线程锁定，则在解锁之前，该线程将被阻塞。当获准对一个对象加锁时，该线程执行同步快中的语句，然后接触给对象所加的锁。&lt;br&gt;同步语句允许设置同步方法中的部分代码，而不必是整个方法。这大大增强了程序的并发能力。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;synchronized(account) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    account.deposit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;    任何同步的实例方法都可以转换为同步语句。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public synchronized void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;/span&gt;() &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等同于&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;method&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    synchronized (this) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;利用加锁同步&quot;&gt;&lt;a href=&quot;#利用加锁同步&quot; class=&quot;headerlink&quot; title=&quot;利用加锁同步&quot;&gt;&lt;/a&gt;利用加锁同步&lt;/h2&gt;&lt;p&gt;上面讲过，避免多线程操作同意资源，只要在方法中使用synchronized关键字就可以避免这种情况，如下所示：&lt;code&gt;public synchronized void deposit(int amount) {}&lt;/code&gt;&lt;br&gt;同步的实例方法在执行方法之前都隐士的需要一把锁。&lt;br&gt;Java可以显示的加锁，这给协调线程带来了更多的控制功能。一个锁是一个Lock接口的实例，它定义了加锁和释放锁的方法。锁也可以是使用newCondition()方法创建任意个数的Condition对象，用来进行线程通信。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-lock-synchronized.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ReentrantLock是为创建相互排斥的锁的Lock的具体实现。可以创建具有特定的公平策略的锁。真正的公平策略确保等待时间最长的线程首先获得锁。假的公平策略将锁给任意一个在等待的线程。被多个线程访问的使用公共锁的程序，其整体性能可能比那些使用默认设置的程序差，但是在获取锁且避免资源缺乏时变得很小。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.util.concurrent.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.util.concurrent.locks.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class AccountWithoutSync &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static Account account = new Account();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ExecutorService executor = Executors.newCachedThreadPool();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			executor.execute(new AddPennyTask());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!executor.isTerminated()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;What is balance? &quot;&lt;/span&gt; +account.getBalance());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static class AddPennyTask implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			account.deposit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static class Account &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private static Lock lock = new ReentrantLock(); // Craete a lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private int balance = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public int &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getBalance&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; balance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void deposit(int amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			lock.lock(); // Acquire the lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				int newBalance = balance +amount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				Thread.sleep(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				balance = newBalance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				lock.unlock(); // Release the lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第33行创建一个锁，第41行获取该锁，第55行释放该锁。&lt;br&gt;如上：通常，使用synchronized方法或语句比使用相互排斥的显示锁简单些。然而，使用显示锁对同步具有状态的线程更加直观和灵活。&lt;/p&gt;
&lt;h2 id=&quot;线程间协作&quot;&gt;&lt;a href=&quot;#线程间协作&quot; class=&quot;headerlink&quot; title=&quot;线程间协作&quot;&gt;&lt;/a&gt;线程间协作&lt;/h2&gt;&lt;p&gt;通过保证在临界区上多个线程的相互排斥，线程同步完全可避免竞争状态的发生，但是有时候，还需要线程之间的相互协作。使用条件便于线程间通信。一个线程可以指定在某种条件下该做什么。条件是通过调用Lock对象的newCondition()方法而创建的对象。一旦创建了条件，就可以使用await()、signal()和signalAll()方法来实现线程之间的相互通信。&lt;br&gt;&lt;code&gt;await()&lt;/code&gt;可以让当前线程都处于等待状态，直到条件发生。&lt;br&gt;&lt;code&gt;signal()&lt;/code&gt;唤醒一个等待的线程。&lt;br&gt;&lt;code&gt;signalAll()&lt;/code&gt;唤醒所有等待的线程。&lt;/p&gt;
&lt;p&gt;假设创建并启动两个任务，一个来想账户中存钱，另一个从同一账户中提款。当提款的数额大于当前的余额时，提款线程必须等待。不管什么时候，只要向账户新存入一笔资金，存入线程必须通知提款线程重新尝试。如果余额任未达到提款的数额，提款线程必须继续等待新的存款。两个任务的交互如下图所示：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-newCondition.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;程序清单 &lt;strong&gt;ThreadCooperation.java&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.util.concurrent.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.util.concurrent.locks.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ThreadCooperation &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static Account account = new Account();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Craete a thread pool with three threads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ExecutorService executor= Executors.newFixedThreadPool(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.execute(new DepositTask());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.execute(new WithdrawTask());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Thread 1\t\tThread 2\t\tBalance&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// A task &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; adding an amount to the account&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static class DepositTask implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					account.deposit((int) (Math.random() * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Thread.sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// A task &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; subtracting an amount from the account&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static class WithdrawTask implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				account.withdraw((int) (Math.random() *&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) +&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// An inner class &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; account&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static class Account &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Create a new lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private static Lock lock = new ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Create a condition&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private static Condition newDeposit = lock.newCondition();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private int balance = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public int &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getBalance&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; balance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void withdraw(int amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (balance &amp;lt; amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\t\tWait for a deposit&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					newDeposit.await();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				balance -= amount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\t\tWithdraw &quot;&lt;/span&gt; + amount + &lt;span class=&quot;string&quot;&gt;&quot;\t\t&quot;&lt;/span&gt; +getBalance());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				lock.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void deposit(int amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				balance += amount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Deposit &quot;&lt;/span&gt; + amount +&lt;span class=&quot;string&quot;&gt;&quot;\t\t\t\t\t&quot;&lt;/span&gt; +getBalance());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// Signal thread waiting on the condition&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				newDeposit.signalAll();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				lock.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;程序创建并提交存款任务(第10行)和提款任务(第11行)。为让提款任务运行，特意让存款任务进人休眠&lt;br&gt;状态(第23行)。如果没有足够的资金可提取，则提款任务等待(第59行)存款任务弓’余额变化的通知(第82行)。&lt;br&gt;第44行创建个锁，锁上名为newDeposit的条件在第47行创建。一个条件对应一个锁。在等待和通知状态之前，线程必须先获取该条件的锁。当没有足够可取的数目时，提款t任务在第56行获取锁，等待newDeposit条件(第60行)，并且在第70行释放该锁。存款任务在第75行获取锁，在有新的钱存入之后通知所有newDeposit条件的等待线程(第82行)。&lt;br&gt;如果将第59一60行的while循环用if语句代替，会出现什么情况?&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (balance &amp;lt; amount) &amp;#123;	                          System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\t\tWait for a deposit&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	newDeposit.await();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只要余额发生变化，存款任务都会通知提款任务。当唤醒提款任务时，条件(balance &amp;lt; amount)的判断结果可能仍然为true。如果使用if语句，提款任务有可能永久等待。如果使用循环语句，则提款任务可以有重新检验条件的机会。因此，应该在循环语句中测试条件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;警告&lt;/strong&gt;    一旦线程调用条件上的await()，线程就进入等待状态，等待恢复的信号。如果忘记对状态调用signal()或者signalAll()那么线程就永远等待下去。&lt;br&gt;&lt;strong&gt;警告&lt;/strong&gt;    条件由Lock衬象创建。为了调用任意方法(例如，await(), signal()和signalAll())&lt;br&gt;必须首先拥有锁。如果没有获取锁就调用这些方法，会抛出I11ega1MonitorStateException异常。&lt;/p&gt;
&lt;h3 id=&quot;Jvava内置监视器&quot;&gt;&lt;a href=&quot;#Jvava内置监视器&quot; class=&quot;headerlink&quot; title=&quot;Jvava内置监视器&quot;&gt;&lt;/a&gt;Jvava内置监视器&lt;/h3&gt;&lt;p&gt;锁和条件是Java5中的新内容。在Java5之前，线程通信是使用对象的内置监视器编程实现的。锁和条件与内置监视器相比是非常强天且灵活的，因此，本节可以完全忽略。然而，如果使用传统的Java代&lt;br&gt;代码,就可能会碰到Java的内置监视器。&lt;/p&gt;
&lt;p&gt;监视器是一个相互排斥且具备同步能力的对象。监视器中的一个时间点上只能有一个线程执行一个方法。线程通过获取监视器上的锁进入监视器，并且通过释放锁退出监视器。任意对象都可能是一个监视器。一旦一个线程锁住对象，该对象就成为监视器。就锁是通过在方法或块上使用synchronized关键字来实现的。在执行同步方法或块之前，线程必须获取锁。如果条件不适合线程继续在监视器中执行，线程可能在监视器中等待。可以对监视器对象调用wait()方法来释放锁，这样其它的一些监视器中的线程就可以获取它，也就有可能改变监视器的状态。当条件合适时，另一线程可以调用notify()ynotifyAll()方法来通知一个或所有的等待线程重新获取锁并且恢复执行。&lt;br&gt;wait()、notify()ynotifyAll()方法必须在这些方法的接受对象的同步方法或同步快中调用，否则，就会出现会抛出I11ega1MonitorStateException异常。&lt;/p&gt;
&lt;h2 id=&quot;生产者-消费者&quot;&gt;&lt;a href=&quot;#生产者-消费者&quot; class=&quot;headerlink&quot; title=&quot;生产者/消费者&quot;&gt;&lt;/a&gt;生产者/消费者&lt;/h2&gt;&lt;p&gt;考虑典型的消费者/生产者例子。假设使用缓冲区存储整数。缓冲区的大小是受限的。缓冲区提供write(int)方法将一个int值添加到缓冲区中，还提供方法read()从缓冲区中读取和删除一个int值。为了同步这个操作，使用具有两个条件的锁:notEmpty(即缓冲区非空)和notFull(即缓冲区未满)。当任务向缓冲区添加一个int时，如果缓冲区是满的，那么任务将会等待notFull状态。当任务从缓冲区中删除一个int时，如果缓冲区是空的，那么任务将等待notEmpty状态。两个任务之间的交互如下图所示。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-producer-consumer.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;程序清单ConsumerProducer.java。是一个完整的程序。程序包括了。uffer类(第48 – 95行)以及重复向缓冲区产生数字和重复从缓冲区消耗数字的两个任务(第16一45行)。write(int)方法(第60行)向缓冲区添加一个整数。read()方法(第77行)从缓冲区删除和返回一个整数。&lt;br&gt;    缓冲区实际上是一个先进先出的队列(第50一51行)。锁的状态notEmpty和notFull在第57——58行创建。状态和锁捆绑在一起。在应用一个状态之前必须获取一个锁。如果使用wait()和notify()方法重写这个例子，必须指派两个对象作为监视器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序清单ConsumerProducer.java&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.util.concurrent.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.util.concurrent.locks.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ConsumerProducer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static Buffer buffer = new Buffer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Create a thread pool write with two threads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ExecutorService executor = Executors.newFixedThreadPool(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.execute(new ProducerTask());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.execute(new ConsumerTask());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// A task &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; adding an int to the buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static class ProducerTask implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				int i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Producer writes &quot;&lt;/span&gt; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					buffer.write(i++); // Add a value to the buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// Put the thread to sleep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Thread.sleep((int) (Math.random() *&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// A task &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; reading and deleting an int from the buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static class ConsumerTask implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\t\t\tConsumer reads &quot;&lt;/span&gt; + buffer.read());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// Put the thread to sleep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Thread.sleep((int) (Math.random() *&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// An inner class &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static class Buffer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private static final int CAPACITY = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; // buffer size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private java.util.LinkedList&amp;lt;Integer&amp;gt; queue = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				new java.util.LinkedList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Create a new lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private static Lock lock = new ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Create two conditions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private static Condition notEmpty = lock.newCondition();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private static Condition notFull = lock.newCondition();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void write(int value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			lock.lock(); // Acquire the lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (queue.size() == CAPACITY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Wait for notFull condition&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					notFull.wait();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				queue.offer(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				notEmpty.signal(); // Signal notEmpty condition&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				lock.unlock(); // Release the lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public int &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			int value = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			lock.lock(); // Acquire the lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (queue.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\t\t\tWait for notEmpty condition&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					notEmpty.await();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				value = queue.remove();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				notFull.signal(); // Signal notFull condition&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				lock.unlock(); // Release the lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个程序运行的结果实例如下图所示。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-producer-sonsumer1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;阻塞队列&quot;&gt;&lt;a href=&quot;#阻塞队列&quot; class=&quot;headerlink&quot; title=&quot;阻塞队列&quot;&gt;&lt;/a&gt;阻塞队列&lt;/h2&gt;&lt;p&gt;阻塞队列在试图想一个满队列添加元素或者从空队列中删除元素时导致线程阻塞。BlockingQueue接口扩咋java.util.Queue，并且提供同步的put和take方法向队列头添加元素，以及从队列尾删除元素，如下图所示。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-blockingqueue.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Java支持三个具体的阻塞队列 ArrayBlockingQueeu、LinedBlockingQueue 和 PriorityBlockingQueue 如下图所示。他们都在java.util.concurrent包中。ArrayBlockingQueeu 使用数组实现阻塞队列。必须制定一个容量或者可选的公平性来构造 ArrayBlockingQueeu。LinedBlockingQueue 使用链表实现阻塞队列。可以创建不受限的或受限的 LinedBlockingQueue。PriorityBlockingQueue 是优先队列。可以创建不受限的或受限的优先队列。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-blockingqueue1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;程序清单给出使用 ArrayBlockingQueeu 来简化程序清单ConsumerProducer.java生产者/消费者例子。第5行创建一个 ArrayBlockingQueeu 来存储数组。生产者线程将一个整数放入队列中(第22行)，而消费者线程从队列中取走一个整数(第37行)。者线程从队列中取走一个整数(第37行)。&lt;/p&gt;
&lt;p&gt;程序清单ConsumerProducerUsingBlockingQueue.java&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.util.concurrent.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ConsumerProducerUsingBlockingQueue &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static ArrayBlockingQueue&amp;lt;Integer&amp;gt; buffer = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			new ArrayBlockingQueue&amp;lt;Integer&amp;gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Create a thread pool write with two threads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ExecutorService executor = Executors.newFixedThreadPool(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.execute(new ProducerTask());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.execute(new ConsumerTask());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		executor.shutdown();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// A task &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; adding an int to the buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static class ProducerTask implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				int i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Producer writes &quot;&lt;/span&gt; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					buffer.put(i++); // Add any value to the buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// Put the thread to sleep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Thread.sleep((int) (Math.random() *&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// A task &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; reading and deleting an int from the buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static class ConsumerTask implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;\t\t\tConsumer reads &quot;&lt;/span&gt; + buffer.take());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					// Put the thread to sleep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Thread.sleep((int) (Math.random() *&lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;信号量&quot;&gt;&lt;a href=&quot;#信号量&quot; class=&quot;headerlink&quot; title=&quot;信号量&quot;&gt;&lt;/a&gt;信号量&lt;/h2&gt;&lt;p&gt;信号量可以用来限制访问共享资源的线程数。在访问资源之前，线程必须从信号量获取许可。在访问完资源之后，这个线程必须将许可返回给信号量。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-semaphore1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了创建信号量，必须使用可选择的公平策略来确定许可的数量，如图29-24所示。任务通过调用信号量的acquire()方法来获得许可，通过调用信号量的release()方法来释放许可。一旦获得许可，信号量中可用许可的总数减1。一旦许可被释放，信号量中可用许可的总数加1。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-semaphore2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;只有一个许可的信号量可以用来模拟一个相互排斥的锁。程序清单Account内部类使用信号量修改了上面程序清单的Account内部类，确保一个时间只有一个线程可以访问deposit方法。&lt;br&gt;程序清单Account内部类&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.util.concurrent.Semaphore;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Account &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// Create a semaphore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static Semaphore semaphore = new Semaphore(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private int balance = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public int &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getBalance&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; balance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void deposit(int amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			semaphore.acquire(); // Acquire a permit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			int newBalance = balance + amount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Thread.sleep(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			balance = newBalance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; catch (InterruptedException ex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			semaphore.release(); // Release a permit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有一个许可的信号量在第4行创建。当执行第13行的存款方法时，一个线程首先获得许可。在余额更新之吼线程在第25行释放该许可。总是将release()方法放到finally子句中是一个很好的习惯，这样可以确保即使发生异常也能最终释放该许可。&lt;/p&gt;
&lt;h2 id=&quot;避免死锁&quot;&gt;&lt;a href=&quot;#避免死锁&quot; class=&quot;headerlink&quot; title=&quot;避免死锁&quot;&gt;&lt;/a&gt;避免死锁&lt;/h2&gt;&lt;p&gt;有时两个或多个线程需要在几个共享对象上获取锁。这可能会导致死摘(deadlock)，也就是说，每个线程已经锁定一个对象，而且正在等待锁定另一个对象。考虑有两个线程和两个对象的情形，如图29-&lt;br&gt;25所示。线程1获取bjectl上的锁，而线程2获取obj&lt;br&gt;ect2上的锁。现在线程1等待object2上的锁。线程2等待object1上的锁。每个线程都在等待另一个线程释放它所需要的锁，结果导致两个线程都无法继续运行。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-deadlock.png&quot; alt=&quot;死锁&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用一种名为资源排序(resource oraenng)的简单技术可以轻易的避免死锁的发生。该技术是给每一个需要锁的对象指定一个顺序，确保每个线程都按这个顺序来获取锁。例如，在图29-25中，假设按bjectl、object2的顺序对两个对象排序。采用资源排序技术，线程2必须先获取bject1上的锁，然后才能获取object2上的锁。一旦线程1获取了bject1上的锁，线程2必须等待object1上的锁。所以，&lt;br&gt;线程1就能获取object2上的锁，不会再发生死锁现象。&lt;/p&gt;
&lt;h2 id=&quot;线程的状态&quot;&gt;&lt;a href=&quot;#线程的状态&quot; class=&quot;headerlink&quot; title=&quot;线程的状态&quot;&gt;&lt;/a&gt;线程的状态&lt;/h2&gt;&lt;p&gt;任务在线程中执行。线程可以是以下五种状态之一:&lt;strong&gt;新建、就绪、运行、阻塞或结束&lt;/strong&gt;(如图29-26所示)。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-status.png&quot; alt=&quot;线程的状态&quot;&gt;&lt;/p&gt;
&lt;p&gt;新创建一个线程时，它就进人新建状态(New)。调用线程的start()方法启动线程后，它进入就绪状态(Ready)。就绪线程是可运行的，但可能还没有开始运行。操作系统就必须为它分配CPU时间。&lt;br&gt;    就绪线程开始运行时，它就进人运行状态(Running) 。如果给定的CPU时间调用完或调用线程的yie工d()方法，处于运行状态的线程可能就进入就绪状态。&lt;br&gt;    有几种原因可能使线程进人阻塞状态(Blocked)(即非活动状态)。可能是它自己调用了join()、sleep()或wait()方法，也可能是其他线程调用了这些方法。它可能是在等待I/O操作的完成。当阻塞行为不起阻塞作用时，阻塞线程可能被重新激活。例如，如果线程处于休眠状态并且休眠时间已满，线程就会被重新激活并进人就绪状态。&lt;br&gt;    最后，如果一个线程执行完它的run()方法，这个线程就被结束(finished)。&lt;br&gt;    isAlive()方法是用来判断线程状态的方法。如果线程处于就绪、阻塞或运行状态，则返回true；如果线程处于新建并且没有启动的状态，或者已经结束，则返回false。&lt;br&gt;    方法interrupt()按下列方式中断一个线程:当线程处于就绪状态或运行状态时，给它设置一个中断标志;当线程处于阻塞状态时，它将被唤醒并进人就绪状态，同时抛出异常java.lang.InterruptedException。&lt;/p&gt;
&lt;h2 id=&quot;同步集合&quot;&gt;&lt;a href=&quot;#同步集合&quot; class=&quot;headerlink&quot; title=&quot;同步集合&quot;&gt;&lt;/a&gt;同步集合&lt;/h2&gt;&lt;p&gt;Java集合框架中的类不是线程安全的，也就是说，如果它们同时被多个线程访问和更新，它们的内容可能被破坏。可以通过锁定集合或者同步集合保护集合中的数据。&lt;br&gt;  Collection“类提供六个静态方法来将集合转成同步版本，如图29-27所示。使用这些方法创建的集合称为&lt;code&gt;同步包装类&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/image/thread/thread-collections1.png&quot; alt=&quot;同步集合&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/moudaen/article/details/14519921&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JAVA线程池原理以及几种线程池类型介绍&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22882522&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java几种线程池的分析和使用&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;理解多线程的概念。&lt;/li&gt;
&lt;li&gt;通过实现Runnable接口开发任务类。&lt;/li&gt;
&lt;li&gt;使用Thread类创建线程以运行任务。&lt;/li&gt;
&lt;li&gt;使用Thread类中的方法控制线程。&lt;/li&gt;
&lt;li&gt;执行线程池中的代码。&lt;/li&gt;
&lt;li&gt;使用同步方法或阻塞同步线程，避免竞争状态。&lt;/li&gt;
&lt;li&gt;使用锁来同步线程。&lt;/li&gt;
&lt;li&gt;使用锁的条件便于线程通信。&lt;/li&gt;
&lt;li&gt;使用阻塞序列来同步对数组队列、链表队列以及优先队列的访问。&lt;/li&gt;
&lt;li&gt;使用信号量限制对共享资源的访问次数。&lt;/li&gt;
&lt;li&gt;使用资源排序技术来避免死锁。&lt;/li&gt;
&lt;li&gt;描述线程的生命周期。&lt;/li&gt;
&lt;li&gt;使用Collections类中的静态方法创建同步的集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;Java的重要功能之一就是内部支持多线程—在一个程序内部允许同时运行多个任务。在许多程序设计语言中，多线程都是通过调用依赖于系统的过程或函数来实现的。本文将介绍线程的概念以及如何在Java中开发多线程程序。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/tags/Java/"/>
    
      <category term="多线程" scheme="http://xiaoqianchang.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>React Native学习资料</title>
    <link href="http://xiaoqianchang.github.io/2017/02/26/React-Native%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    <id>http://xiaoqianchang.github.io/2017/02/26/React-Native学习资料/</id>
    <published>2017-02-26T08:40:09.000Z</published>
    <updated>2017-02-28T13:33:07.183Z</updated>
    
    <content type="html">&lt;p&gt;本文记录React Native 从环境搭建、签名打包等等一些资料。&lt;/p&gt;
&lt;h2 id=&quot;React-Native进行签名打包成Apk&quot;&gt;&lt;a href=&quot;#React-Native进行签名打包成Apk&quot; class=&quot;headerlink&quot; title=&quot;React Native进行签名打包成Apk&quot;&gt;&lt;/a&gt;React Native进行签名打包成Apk&lt;/h2&gt;&lt;p&gt;对于项目中不存在react.gradle文件的项目打包&lt;/p&gt;
&lt;p&gt;首先命令切换到该react native项目的主目录，然后运行以下的命令，生成assets文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p android/app/src/main/assets
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;紧接着运行以下命令，进行生成inde.android.bundle文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;react-native bundle --platform android --dev &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; --entry-file index.android.js \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --bundle-output android/app/src/main/assets/index.android.bundle \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --assets-dest android/app/src/main/res/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;最后运行之前的命令，进行代码和资源文件打包，生成的带有签名的apk还是在上面的目录中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd android &amp;amp;&amp;amp; ./gradlew assembleRelease
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：这时有可能不成功，报红色的错误&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* What went wrong:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Execution failed &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; task &lt;span class=&quot;string&quot;&gt;&#39;:app:processReleaseResources&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; com.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process &lt;span class=&quot;string&quot;&gt;&#39;command &#39;&lt;/span&gt;D:\software\android\sdk\build-tools\&lt;span class=&quot;number&quot;&gt;23.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;\aapt.exe&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; finished with non-zero &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; value &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这可能是由于在生成res时图片资源的名称过长，超过了windows的限制导致的。&lt;/p&gt;
&lt;p&gt;运行Apk&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd android &amp;amp;&amp;amp; ./gradlew installRelease
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;React-Native库版本升级-Upgrading-与降级讲解&quot;&gt;&lt;a href=&quot;#React-Native库版本升级-Upgrading-与降级讲解&quot; class=&quot;headerlink&quot; title=&quot;React Native库版本升级(Upgrading)与降级讲解&quot;&gt;&lt;/a&gt;React Native库版本升级(Upgrading)与降级讲解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;更新React Native项目依赖包版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看本地的React Native的版本&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;react-native --version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查询react-native的npm包得最新版本(react native的npm包的地址为: &lt;a href=&quot;https://www.npmjs.com/package/react-native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.npmjs.com/package/react-native&lt;/a&gt; )，或者采用命令&lt;code&gt;npm info react-native&lt;/code&gt;进行查看。&lt;/p&gt;
&lt;p&gt;在修改package.json文件后，我们需要命令行切换到项目的主文件夹重新执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据官网文档能知道:&lt;br&gt;现在已经支持在项目中运行npm install - -save命令来进行安装react-native的新版本了，例如我们需要更新到0.18版本可以采用终端执行如下的命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save react-native@0.18
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;更新项目templates文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新的npm包会包含更新在运行react-native init命令生成的一些动态文件，例如init创建项目的时候会生成iOS和Android的子项目，我们可以通过以下的命令进行获取最新的代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;react-native upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上的react-native upgrade会进行检查项目的文件，然后进行如下几个操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是新添加的文件，会进行直接创建&lt;/li&gt;
&lt;li&gt;如果更新的文件和当前项目的文件是一样的，就会直接忽略跳过&lt;/li&gt;
&lt;li&gt;如果更新的文件和当前项目的文件不同，有冲突的情况，会让我们进行选择是保留原来的文件还是用更新的文件覆盖，这个要看实际情况了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在更新已经完成了，下面就是运行一下看一下是否能够成功运行，运行如下命令:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;react-native run-android
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;React Native版本降级方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;刚刚我们已经完成React Native库升级了，现在假如有这样的一个情况，我们的项目直接创建的用了最新版本的，突然发现最新版本可能不太稳定，在开发过程中就会遇到不可预期的bug。那么就可以考虑进行降级到一个比较稳定的版本比较保险。第一种方案我们参考上面的流程就行了，上面是修改成最新版本的，那么现在我们修改一个低版本，然后执行上面的同样的命令就OK了。但是我们降级这边给大家讲第二个方案，还记得上面有一个官方推荐安装react-native的命令不？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save react-native@0.18
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么我们现在假如要降级到0.17版本，如下命令行执行一下就OK了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install --save react-native@0.17
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;总结&lt;br&gt;无论是升级还是降级只需要两步，先后执行下面两个命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save react-native@&lt;span class=&quot;number&quot;&gt;0.18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;react-native upgrade&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;p&gt;环境安装：&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native-for-android%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native For Android环境配置以及第一个实例&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%E7%BB%86windows%E7%89%88%E6%9C%AC%E6%90%AD%E5%BB%BA%E5%AE%89%E8%A3%85react-native%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;史上最详细Windows版本搭建安装React Native环境配置&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E8%BF%9B%E8%A1%8C%E7%AD%BE%E5%90%8D%E6%89%93%E5%8C%85%E6%88%90apk/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native进行签名打包成Apk&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E5%BA%93%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7upgrading%E4%B8%8E%E9%99%8D%E7%BA%A7%E8%AE%B2%E8%A7%A3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native库版本升级(Upgrading)与降级讲解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;控件资料：&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bview%E8%A7%86%E5%9B%BE%E8%AE%B2%E8%A7%A3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之View视图讲解&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Btext%E7%BB%84%E4%BB%B6%E8%AE%B2%E8%A7%A3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之Text组件讲解&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bimage%E7%BB%84%E4%BB%B6%E8%AE%B2%E8%A7%A3%E4%B8%8E%E7%BE%8E%E5%9B%A2%E9%A6%96%E9%A1%B5%E9%A1%B6%E9%83%A8%E6%95%88/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之Image组件讲解与美团首页顶部效果实例(10)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Btextinput%E7%BB%84%E4%BB%B6%E8%AE%B2%E8%A7%A3%E4%B8%8Eqq%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B011/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之TextInput组件讲解与QQ登录界面实现(11)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bprogressbarandroid%E8%BF%9B%E5%BA%A6%E6%9D%A1%E8%AE%B2%E8%A7%A312/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之ProgressBarAndroid进度条讲解(12)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bdrawerlayoutandroid%E6%8A%BD%E5%B1%89%E5%AF%BC%E8%88%AA%E5%88%87%E6%8D%A2%E7%BB%84%E4%BB%B6%E8%AE%B2%E8%A7%A313/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之DrawerLayoutAndroid抽屉导航切换组件讲解(13)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bscrollview%E7%BB%84%E4%BB%B6%E8%AE%B2%E8%A7%A314/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之ScrollView组件讲解(14)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Btoolbarandroid%E5%B7%A5%E5%85%B7%E6%A0%8F%E6%8E%A7%E4%BB%B6%E8%AE%B2%E8%A7%A3%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之ToolbarAndroid工具栏控件讲解以及使用(15)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bswitch%E4%B8%8Epicker%E7%BB%84%E4%BB%B6%E8%AE%B2%E8%A7%A3%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A816/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之Switch与Picker组件讲解以及使用(16)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bviewpagerandroid%E8%AE%B2%E8%A7%A3%E4%BB%A5%E5%8F%8A%E7%BE%8E%E5%9B%A2%E9%A6%96%E9%A1%B5%E9%A1%B6%E9%83%A8/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之ViewPagerAndroid讲解以及美团首页顶部效果实例(17)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Btouchable%E7%B3%BB%E5%88%97%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A318/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之Touchable*系列组件详解(18)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Blistview%E7%BB%84%E4%BB%B6%E8%AE%B2%E8%A7%A3%E4%BB%A5%E5%8F%8A%E8%AF%A6%E7%BB%86%E5%AE%9E%E4%BE%8B19/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之ListView组件讲解以及详细实例(19)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E8%B6%85%E6%A3%92%E7%9A%84layoutanimation%E5%B8%83%E5%B1%80%E5%8A%A8%E7%94%BB/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native超棒的LayoutAnimation(布局动画)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bpulltorefreshviewandroid%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6%E8%AE%B2%E8%A7%A320/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之PullToRefreshViewAndroid下拉刷新组件讲解(20)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Brefreshcontrol%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A321/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之RefreshControl组件详解(21)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bwebview%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%AE%9E%E4%BE%8B%E4%BD%BF%E7%94%A822/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之WebView组件详解以及实例使用(22)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85%E5%AE%9E%E4%BE%8Bbutton%E6%8C%89%E9%92%AE/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之组件封装实例(Button按钮)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bnavigator%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%AE%9E%E4%BE%8B23/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之Navigator组件详解以及实例(23)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native-api%E6%A8%A1%E5%9D%97%E4%B9%8Btoastandroid%E8%AF%A6%E8%A7%A3%E5%8F%8A%E4%BD%BF%E7%94%A824/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块之ToastAndroid详解及使用(24)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97%E4%B9%8Balert%E5%BC%B9%E5%87%BA%E6%A1%86%E8%AF%A6%E8%A7%A3%E5%8F%8A%E4%BD%BF%E7%94%A825/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块之Alert弹出框详解及使用(25)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97%E4%B9%8Bappstate%E8%AF%A6%E8%A7%A326/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块之AppState详解(26)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-%E6%8E%A7%E4%BB%B6%E4%B9%8Bcilpboard%E7%B2%98%E8%B4%B4%E6%9D%BF%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A327/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native 控件之Cilpboard粘贴板使用详解(27)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97dimensions%E5%B1%8F%E5%B9%95%E5%AE%BD%E9%AB%98%E8%AF%A6%E8%A7%A330/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块Dimensions屏幕宽高详解(30)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97backandroid%E6%8B%A6%E6%88%AA%E8%BF%94%E5%9B%9E%E9%94%AE%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E8%AF%A6%E8%A7%A331/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块BackAndroid拦截返回键事件处理详解(31)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native-api%E6%A8%A1%E5%9D%97stylesheet%E6%A0%B7%E5%BC%8F%E8%A1%A8%E8%AF%A6%E8%A7%A332/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块StyleSheet样式表详解(32)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97pixelratio%E8%AE%BE%E5%A4%87%E5%83%8F%E7%B4%A0%E5%AF%86%E5%BA%A6%E8%AF%A6%E8%A7%A333/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块PixelRatio设备像素密度详解(33)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bdatepickerandroid%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E9%80%89%E6%8B%A9%E5%99%A8%E7%BB%84%E4%BB%B6%E8%AE%B2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之DatePickerAndroid时间日期选择器组件讲解(34)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bstatusbar%E7%8A%B6%E6%80%81%E6%A0%8F%E8%AF%A6%E8%A7%A335/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之StatusBar状态栏详解(35)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97%E4%B9%8Balertios%E5%BC%B9%E6%A1%86%E8%AF%A6%E8%A7%A3-%E9%80%82%E9%85%8Dios%E5%BC%80%E5%8F%9136/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块之AlertIOS弹框详解-适配iOS开发(36)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-%E6%8E%A7%E4%BB%B6%E4%B9%8Bpickerios%E9%80%89%E6%8B%A9%E5%99%A8%E8%AF%A6%E8%A7%A3-%E9%80%82%E9%85%8Dios%E5%BC%80%E5%8F%9137/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之PickerIOS选择器详解-适配iOS开发(37)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-%E6%8E%A7%E4%BB%B6%E4%B9%8Bsegmentedcontrolios%E5%88%86%E6%AE%B5%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3-%E9%80%82%E9%85%8Dios%E5%BC%80/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native 控件之SegmentedControlIOS分段组件详解-适配iOS开发(38)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bsliderios%E6%BB%91%E5%9D%97%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3-%E9%80%82%E9%85%8Dios%E5%BC%80%E5%8F%9139/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之SliderIOS滑块组件详解-适配iOS开发(39)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Btimepickerandroid%E6%97%B6%E9%97%B4%E9%80%89%E6%8B%A9%E5%99%A8%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3%E5%8F%8A/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之TimePickerAndroid时间选择器组件详解及实例(43)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native-api%E6%A8%A1%E5%9D%97%E4%B9%8Bappstateios%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E8%AF%A6%E8%A7%A3-%E9%80%82%E9%85%8Dios%E5%BC%80%E5%8F%9144/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块之AppStateIOS运行状态详解-适配iOS开发(44)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97%E4%B9%8Bactionsheetios%E5%8F%AF%E7%82%B9%E5%87%BB%E5%BC%B9%E6%A1%86%E8%AF%A6%E8%A7%A3-%E9%80%82%E9%85%8Dios%E5%BC%80/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块之ActionSheetIOS可点击弹框详解-适配iOS开发(45)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97%E4%B9%8Bvibration%E6%8E%A7%E5%88%B6%E8%AE%BE%E5%A4%87%E9%9C%87%E5%8A%A8%E8%AF%A6%E8%A7%A346/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块之Vibration控制设备震动详解(46)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E7%89%B9%E5%AE%9A%E5%B9%B3%E5%8F%B0%E4%BB%A3%E7%A0%81%E8%AF%B4%E6%98%8E47/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native特定平台代码说明(47)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97%E4%B9%8Bappregistry%E5%BA%94%E7%94%A8%E6%B3%A8%E5%86%8C%E5%85%A5%E5%8F%A3%E8%AF%A6%E8%A7%A348/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块之AppRegistry应用注册入口详解(48)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E5%9F%BA%E7%A1%80%E4%B9%8Blinking-libraries%E9%93%BE%E6%8E%A5%E5%BA%93%E9%85%8D%E7%BD%AE-%E9%80%82%E9%85%8Dios%E5%BC%80%E5%8F%9149/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native基础之Linking Libraries链接库配置-适配iOS开发(49)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%9C%9F%E6%9C%BA%E8%AE%BE%E5%A4%87%E8%BF%90%E8%A1%8C%E8%B0%83%E8%AF%95%E5%BA%94%E7%94%A8-%E9%80%82%E9%85%8Dios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native基础之真机设备运行调试应用-适配iOS开发(50)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85%E5%9F%BA%E7%A1%80%E7%AF%871-%E9%80%82/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native进阶之原生模块封装基础篇1-适配Android开发(51)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BB%8E%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E8%AF%A6%E8%A7%A3-%E9%80%82%E9%85%8Dandroid%E5%BC%80/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native基础之从源代码编译详解-适配Android开发(52)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E7%89%B9%E6%80%A7%E7%AF%87%E8%AF%A6%E8%A7%A3-%E9%80%82%E9%85%8Dandroid/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native进阶之原生模块特性篇详解-适配Android开发(53)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%8E%9F%E7%94%9Fui%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85%E8%AF%A6%E8%A7%A3-%E9%80%82%E9%85%8Dandroid%E5%BC%80/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native进阶之原生UI组件封装详解-适配Android开发(54)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%A8%A1%E5%9D%97%E4%B9%8Blinking%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%AE%9E%E4%BE%8B-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0%E9%80%9A/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native模块之Linking详解以及实例-Android/iOS双平台通用(55)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-%E6%8E%A7%E4%BB%B6%E4%B9%8Bmodal%E8%AF%A6%E8%A7%A3-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0%E9%80%9A%E7%94%A856/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native 控件之Modal详解-Android/iOS双平台通用(56)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-%E7%A7%BB%E6%A4%8D%E5%8E%9F%E7%94%9Fios%E9%A1%B9%E7%9B%AE57/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native 移植原生iOS平台项目(57)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%8E%9F%E7%94%9F%E6%B7%B7%E5%90%88%E4%B8%8E%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%BC%80%E5%8F%91%E8%AF%A6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native 进阶之原生混合与数据通信开发详解-适配Android开发(58)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E5%B0%81%E8%A3%85%E5%9F%BA%E7%A1%80%E7%AF%87%E8%AF%A6%E8%A7%A3-%E9%80%82/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native进阶之原生模块封装基础篇详解-适配iOS开发(59)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E5%B0%81%E8%A3%85%E7%89%B9%E6%80%A7%E7%AF%87%E8%AF%A6%E8%A7%A3-%E9%80%82/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native进阶之原生模块封装特性篇详解-适配iOS开发(60)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%8E%9F%E7%94%9F%E6%B7%B7%E5%90%88%E4%B8%8E%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%BC%80%E5%8F%91%E8%AF%A6%E8%A7%A3-%E9%80%82%E9%85%8Dios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native 进阶之原生混合与数据通信开发详解-适配iOS开发(61)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97%E4%B9%8Blayoutanimation%E5%B8%83%E5%B1%80%E5%8A%A8%E7%94%BB%E8%AF%A6%E8%A7%A3-androidios%E9%80%9A%E7%94%A862/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块之LayoutAnimation布局动画详解-Android/iOS通用(62)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E4%BB%8B%E7%BB%8D-core-components63/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native基础之核心组件使用教程介绍-Core Components(63)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%9F%BA%E7%A1%80%E7%AF%8764/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native进阶之Animated动画库详解-基础篇(64)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E8%BF%9B%E9%98%B6%E4%B9%8Banimated%E5%8A%A8%E7%94%BB%E5%BA%93%E8%AF%A6%E8%A7%A3-%E5%AE%9E%E4%BE%8B%E7%AF%8765/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native进阶之Animated动画库详解-实例篇(65)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%A8%A1%E5%9D%97%E4%B9%8Binteractionmanager%E4%BA%A4%E4%BA%92%E7%AE%A1%E7%90%86%E5%99%A8%E8%AF%A6%E8%A7%A366/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native模块之InteractionManager(交互管理器)详解(66)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%A8%A1%E5%9D%97%E4%B9%8Btimers%E5%AE%9A%E6%97%B6%E5%99%A8%E8%AF%A6%E8%A7%A367/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native模块之Timers(定时器)详解(67)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%A8%A1%E5%9D%97%E4%B9%8Bshare%E8%B0%83%E7%94%A8%E7%B3%BB%E7%BB%9F%E5%88%86%E4%BA%AB%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A368/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native模块之Share调用系统分享应用详解(68)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%A8%A1%E5%9D%97%E4%B9%8Bpermissionandroid%E6%9D%83%E9%99%90%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%AF%B7%E6%B1%82%E5%BA%94%E7%94%A8%E8%AF%A6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native模块之PermissionsAndroid权限检测与请求应用详解(69)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-%E5%9F%BA%E7%A1%80%E4%B9%8Bprops%E5%B1%9E%E6%80%A7%E4%B8%8Estate%E7%8A%B6%E6%80%81%E4%BD%BF%E7%94%A8%E8%AE%B2%E8%A7%A370/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native 基础之Props(属性)与State(状态)使用讲解(70)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-%E5%9F%BA%E7%A1%80%E4%B9%8Bstyle%E6%A0%B7%E5%BC%8F%E8%AE%B2%E8%A7%A371/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native 基础之Style(样式)讲解(71)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lcode.org/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B0%E7%8E%8B%E8%80%85-realm-react-native%E7%89%88%E6%9C%AC%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3%E4%B9%8B%E6%8A%9B%E7%A0%96%E5%BC%95%E7%8E%89/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动端数据库新王者-Realm React Native版本应用详解之抛砖引玉入坑篇(一)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B0%E7%8E%8B%E8%80%85-realm-react-native%E7%89%88%E6%9C%AC%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3%E4%B9%8B%E7%95%A5%E9%99%88%E5%9B%BA%E9%99%8B/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动端数据库新王者-Realm React Native版本应用详解之略陈固陋爬坡篇(二)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B0%E7%8E%8B%E8%80%85-realm-react-native%E7%89%88%E6%9C%AC%E5%BA%94%E7%94%A8%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动端数据库新王者-Realm React Native版本应用详解之略陈固陋爬坡篇续1(三)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React Native技术文章：&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/319-react-native-sh-ppt-jiangqq/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[319-React Native上海交流会报告]-React Native跨平台开发之旅PPT内容(附下载链接)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-developer-zong/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开发阶段性总结(2016-5-20)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/rn%E5%AE%9E%E6%88%98-%E5%98%8E%E5%98%8E%E5%95%86%E5%9F%8E%E4%B9%8B%E4%BB%BF%E5%BF%AB%E9%80%92%E6%97%B6%E9%97%B4%E8%BD%B4%E5%B8%83%E5%B1%80%E5%AE%9E%E7%8E%B0%E8%AE%A2%E5%8D%95%E7%8A%B6%E6%80%81/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[RN实战-嘎嘎商城]之仿快递时间轴布局实现(订单状态)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/rn%E5%AE%9E%E6%88%98-%E5%98%8E%E5%98%8E%E5%95%86%E5%9F%8E%E4%B9%8B%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0tab%E5%BA%95%E9%83%A8%E8%8F%9C%E5%8D%95%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%88%87%E6%8D%A2%E6%95%88/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[RN实战-嘎嘎商城]之轻松实现Tab底部菜单导航栏切换效果-Android/iOS双适配&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/rn%E5%AE%9E%E6%88%98-%E5%98%8E%E5%98%8E%E5%95%86%E5%9F%8E%E4%B9%8B%E5%95%86%E5%AE%B6%E8%AF%A6%E6%83%85%E7%95%8C%E9%9D%A2%E5%B8%83%E5%B1%80%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E7%8E%B0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[RN实战-嘎嘎商城]之商家详情界面布局分析与实现&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/rn%E5%AE%9E%E6%88%98-%E5%98%8E%E5%98%8E%E5%95%86%E5%9F%8E%E4%B9%8B%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%A1%B9%E7%9B%AEredux%E9%87%8D%E6%9E%84/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[RN实战-嘎嘎商城]之记一次项目Redux重构&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8E%9F%E7%94%9Fui%E7%BB%84%E4%BB%B6%E5%92%8Cvideoview%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native实战系列教程之自定义原生UI组件和VideoView视频播放器开发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React Native开源控件：&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-chart-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源图表组件(react-native-chart-android)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-material-design/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源Material Design组件(react-native-material-design)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/source-react-native-qrcode/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native二维码图片生成组件(react-native-qrcode)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-menu/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native下拉菜单组件(react-native-menu)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-image-cropping-ios/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源图片裁剪组件(react-native-image-cropping-ios)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-sk-toast/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源仿照Android平台的Toast组件(react-native-sk-toast)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-android-tabbar/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[荐]React Native开源Android平台的TabBar效果组件(react-native-android-tabbar)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-viewpager-race/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源广告轮播组件(react-native-viewpager)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-amap-location/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源高德地图定位组件(react-native-amap-location)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-baidumap-kit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源百度地图组件(react-native-baidumap-kit)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-device-info/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源获取设备信息组件(react-native-device-info)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-networking/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源网络处理-上传下载组件(react-native-networking)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-bootstrap-buttons/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源bootstrap风格按钮组件(react-native-bootstrap-buttons)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-datetime/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源时间日期选择器组件(react-native-datetime)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-google-maps/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源封装Google地图组件(react-native-google-maps)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-ios-charts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源iOS图表组件(react-native-ios-charts)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-android-imagepicker/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源图片选择器组件(react-native-android-imagepicker)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-vlc-player/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源VLC多媒体播放器组件(react-native-vlc-player)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-sqlite-storage/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源SQLite数据库组件(react-native-sqlite-storage)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-image-zoom/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源图片缩放处理组件(react-native-image-zoom)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-xmpp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源即时聊天XMPP IM组件(react-native-xmpp)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-pdf/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源PDF阅读器组件(react-native-pdf)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-swipeout/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源仿QQ微信列表左右滑动删除等功能组件(react-native-swipeout)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-video/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[译]React Native开源播放器Video组件(react-native-video)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-encryption-library/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源封装AES,MD5加密模块(react-native-encryption-library)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86react-native%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B%E6%9C%8B%E5%8F%8B%E5%9C%88%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD-androidios%E5%8F%8C%E5%B9%B3%E5%8F%B0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;超详细React Native实现微信好友/朋友圈分享功能-Android/iOS双平台通用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React Native开源项目：&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-lagou-source/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-仿拉勾网iOS客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/uestc-bbs-react-native/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-清水河畔BBS客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-meituan-source/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-仿美团iOS客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE-%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5%E5%AE%A2%E6%88%B7%E7%AB%AF/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-知乎日报客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-dou-source/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-豆瓣搜索客户端(基于豆瓣Open API)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-news-source/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-新闻客户端(News)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-manong/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-码农客户端(iOS版本)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-hacker/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-Hacker新闻客户端(Android和iOS)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-gitfeed/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-Github客户端(Android、iOS)-来自阿里开发人员&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-zixunapp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-iOS资讯头条APP&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-weibo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-iOS新浪微博客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-lagou-duo/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-仿拉勾网客户端(兼容Android、iOS平台)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-cnode/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-CNode论坛客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-gankio/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-干货集中营客户端(Gank.io)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/attentiveness/reading&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reading&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-memory/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-知识点记忆客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-bbc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-BBC新闻客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-gitosc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-开源中国Git@OSC客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-maoyan/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-仿猫眼电影客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/study-react-native-opensource-one/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;学习React Native必看的几个开源项目(第一波)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/study-react-native-opensource-two/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;学习React Native必看的几个开源项目(第二波)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-movie-fetcher/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;带大家一步步开发一个电影数据的App(Movie Fetcher)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-office/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-公司移动OA办公客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-marvel/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-漫威电影客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-bizhi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-图片展示客户端RN-BiZhi&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-bilibili/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-仿B站客户端(Android)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-gagamall/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-嘎嘎商城客户端(持续更新中)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-yunfanyi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-云翻译客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-daidai/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-贷贷助手客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-baobao/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-仿宝宝健康客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-source-health/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-健康养生客户端&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/eact-native-source-bbs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native开源项目-小BBS客户端&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React Native工具插件：&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/vscode-react-native-tools/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native VSCode IDE超强开发插件介绍(智能,代码提醒,运行调试…)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97%E4%B9%8Bnetinfo%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A328/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块之NetInfo(网络信息)使用详解(28)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native-api%E6%A8%A1%E5%9D%97%E4%B9%8Basyncstorage%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A329/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native API模块之AsyncStorage(持久化存储)使用详解(29)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Btabbarios%E5%92%8Ctabbarios-item%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%AE%9E%E4%BE%8B40/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之TabBarIOS和TabBarIOS.Item组件详解及实例(40)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bprogressviewios%E8%BF%9B%E5%BA%A6%E5%8A%A0%E8%BD%BD%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3%E5%8F%8A%E5%AE%9E/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之ProgressViewIOS进度加载组件详解及实例(41)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bactivityindicatorios%E8%BF%9B%E5%BA%A6%E6%8C%87%E7%A4%BA%E5%99%A8%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3%E5%8F%8A/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native控件之ActivityIndicatorIOS进度指示器组件详解及实例(42)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React Native Running And Debugging&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E5%BA%94%E7%94%A8%E8%AE%BE%E5%A4%87%E8%BF%90%E8%A1%8Crunning%E4%BB%A5%E5%8F%8A%E8%B0%83%E8%AF%95debugging/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【React Native开发】React Native应用设备运行(Running)以及调试(Debugging)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编译其它React Native项目：&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E8%B6%85%E8%AF%A6%E7%BB%86windows%E7%89%88%E6%9C%AC%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8Creact-native%E5%AE%98%E6%96%B9%E5%AE%9E%E4%BE%8Buiexplorer%E9%A1%B9%E7%9B%AE%E5%A4%9A%E5%9B%BE%E6%85%8E/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;超详细Windows版本编译运行React Native官方实例UIExplorer项目(多图慎入)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;疑难汇总：&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/react-native%E7%96%91%E9%9A%BE%E7%82%B9%E9%97%AE%E9%A2%98%E6%B7%B1%E5%9D%91%E6%9C%80%E5%BC%BA%E6%80%BB%E7%BB%93%E5%B8%96%E4%B8%8D%E6%96%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native疑难点,问题深坑最强总结帖(不断更新中)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android Studio项目配置：&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E4%BC%98%E9%9B%85%E7%9A%84android-studio%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE-%E5%B8%B8%E7%94%A8%E5%BA%93%E5%92%8C%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;优雅的Android Studio项目配置–常用库和版本管理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android控件资料：&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/design%E6%94%AF%E6%8C%81%E5%BA%93tablayout%E6%89%93%E9%80%A0%E4%BB%BF%E7%BD%91%E6%98%93%E6%96%B0%E9%97%BBtab%E6%A0%87%E7%AD%BE%E6%95%88%E6%9E%9C/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Design支持库TabLayout打造仿网易新闻Tab标签效果&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E6%89%93%E9%80%A0qq6-x%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E4%BE%A7%E6%BB%91%E7%95%8C%E9%9D%A2%E6%95%88%E6%9E%9C%E5%AE%9E%E4%BE%8B/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;打造QQ6.X最新版本侧滑界面效果实例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;工具技术：&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB%E5%88%86%E6%9E%90android%E5%BA%94%E7%94%A8%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BC%80%E6%BA%90%E5%BA%93/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;干货分享:分析Android应用使用的技术框架和开源库&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.lcode.org/%E5%AE%9E%E6%97%B6%E6%B6%88%E6%81%AFjetbrains%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83kotlin-1-0%EF%BC%8Cjvm%E5%92%8Candroid%E4%B8%8A%E6%9B%B4%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AF%AD%E8%A8%80/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实时消息:JetBrains正式发布Kotlin 1.0，JVM和Android上更好用的语言&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录React Native 从环境搭建、签名打包等等一些资料。&lt;/p&gt;
&lt;h2 id=&quot;React-Native进行签名打包成Apk&quot;&gt;&lt;a href=&quot;#React-Native进行签名打包成Apk&quot; class=&quot;headerlink&quot; title=&quot;React Native进行签名打包成Apk&quot;&gt;&lt;/a&gt;React Native进行签名打包成Apk&lt;/h2&gt;&lt;p&gt;对于项目中不存在react.gradle文件的项目打包&lt;/p&gt;
&lt;p&gt;首先命令切换到该react native项目的主目录，然后运行以下的命令，生成assets文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p android/app/src/main/assets
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;紧接着运行以下命令，进行生成inde.android.bundle文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;react-native bundle --platform android --dev &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; --entry-file index.android.js \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --bundle-output android/app/src/main/assets/index.android.bundle \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --assets-dest android/app/src/main/res/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://xiaoqianchang.github.io/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://xiaoqianchang.github.io/tags/ReactNative/"/>
    
      <category term="学习资料" scheme="http://xiaoqianchang.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>在Windows下搭建React Native Android开发环境</title>
    <link href="http://xiaoqianchang.github.io/2017/02/25/%E5%9C%A8Windows%E4%B8%8B%E6%90%AD%E5%BB%BAReact%20Native%20Android%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://xiaoqianchang.github.io/2017/02/25/在Windows下搭建React Native Android开发环境/</id>
    <published>2017-02-25T12:31:36.000Z</published>
    <updated>2017-02-26T07:02:43.265Z</updated>
    
    <content type="html">&lt;h2 id=&quot;安装git-for-windows&quot;&gt;&lt;a href=&quot;#安装git-for-windows&quot; class=&quot;headerlink&quot; title=&quot;安装git for windows&quot;&gt;&lt;/a&gt;安装git for windows&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://git-for-windows.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载安装，&lt;code&gt;安装过程中注意选择&amp;quot;Run Git from Windows Command Prompt&amp;quot;。&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装Python&quot;&gt;&lt;a href=&quot;#安装Python&quot; class=&quot;headerlink&quot; title=&quot;安装Python&quot;&gt;&lt;/a&gt;安装Python&lt;/h2&gt;&lt;p&gt;从&lt;a href=&quot;https://www.python.org/downloads/release/python-2710/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;下载并安装python 2.7.x（3.x版本不行）&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装node-js&quot;&gt;&lt;a href=&quot;#安装node-js&quot; class=&quot;headerlink&quot; title=&quot;安装node.js&quot;&gt;&lt;/a&gt;安装node.js&lt;/h2&gt;&lt;p&gt;从&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;下载node.js的官方4.1版本或更高版本。&lt;/p&gt;
&lt;p&gt;建议设置npm镜像以加速后面的过程（或使用科学上网工具）。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm config &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; registry https://registry.npm.taobao.org --global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm config &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; disturl https://npm.taobao.org/dist --global&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装react-native命令行工具&quot;&gt;&lt;a href=&quot;#安装react-native命令行工具&quot; class=&quot;headerlink&quot; title=&quot;安装react-native命令行工具&quot;&gt;&lt;/a&gt;安装react-native命令行工具&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g react-native-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装react native模块以及相关node模块&lt;code&gt;npm install  --save react-native&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h2&gt;&lt;p&gt;进入你的工作目录，运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;react-native init MyProject
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;并耐心等待数（或数十）分钟。&lt;/p&gt;
&lt;h2 id=&quot;运行packager&quot;&gt;&lt;a href=&quot;#运行packager&quot; class=&quot;headerlink&quot; title=&quot;运行packager&quot;&gt;&lt;/a&gt;运行packager&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;react-native start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以用浏览器访问&lt;a href=&quot;http://localhost:8081/index.android.bundle?platform=android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8081/index.android.bundle?platform=android&lt;/a&gt; 看看是否可以看到打包后的脚本（看到很长的js代码就对了）。第一次访问通常需要十几秒，并且在packager的命令行可以看到形如[====]的进度条。&lt;/p&gt;
&lt;p&gt;如果你遇到了&lt;code&gt;ERROR Watcher took too long to load&lt;/code&gt;的报错，请尝试修改&lt;code&gt;node_modules/react-native/packager/react-packager/src/FileWatcher/index.js&lt;/code&gt;，将其中的MAX_WAIT_TIME 从25000改为更大的值（单位是毫秒）&lt;/p&gt;
&lt;h2 id=&quot;运行模拟器&quot;&gt;&lt;a href=&quot;#运行模拟器&quot; class=&quot;headerlink&quot; title=&quot;运行模拟器&quot;&gt;&lt;/a&gt;运行模拟器&lt;/h2&gt;&lt;p&gt;推荐使用Genymotion。&lt;br&gt;如果有真机，可以不必运行模拟器，要配置好驱动，使得adb devices可以看到对应的设备。&lt;/p&gt;
&lt;h2 id=&quot;安卓运行&quot;&gt;&lt;a href=&quot;#安卓运行&quot; class=&quot;headerlink&quot; title=&quot;安卓运行&quot;&gt;&lt;/a&gt;安卓运行&lt;/h2&gt;&lt;p&gt;&lt;code&gt;保持packager开启&lt;/code&gt;，另外打开一个命令行窗口，然后在工程目录下运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;react-native run-android
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首次运行需要等待数分钟并从网上下载gradle依赖。（这个过程屏幕上可能出现很多小数点，表示下载进度。这个时间可能耗时很久，也可能会不停报错链接超时、连接中断等等——取决于你的网络状况和墙的不特定阻断。总之要顺利下载，请使用稳定有效的科学上网工具。）&lt;/p&gt;
&lt;p&gt;运行完毕后可以在模拟器或真机上看到应用自动启动了。&lt;/p&gt;
&lt;p&gt;如果apk安装运行出现报错，&lt;code&gt;请检查上文中安装SDK的环节里所有依赖是否都已装全，platform-tools是否已经设到了PATH环境变量中，运行adb devices能否看到设备&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;至此，&lt;code&gt;应该能看到APP红屏报错，这是正常的，我们还需要让app能够正确访问pc端的packager服务&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;摇晃设备或按Menu键（Bluestacks模拟器按键盘上的菜单键，通常在右Ctrl的左边 或者左Windows键旁边），可以打开调试菜单，点击Dev Settings，选Debug server host for device，输入你的&lt;code&gt;正在运行packager的那台电脑的局域网IP加:8081&lt;/code&gt;（同时要保证手机和电脑在同一网段，且没有防火墙阻拦），再按back键返回，再按Menu键，在调试菜单中选择Reload JS，就应该可以看到运行的结果了。&lt;/p&gt;
&lt;p&gt;如果真实设备白屏但没有弹出任何报错，可以在安全中心里看看是不是应用的“悬浮窗”的权限被禁止了。&lt;/p&gt;
&lt;h2 id=&quot;安卓调试&quot;&gt;&lt;a href=&quot;#安卓调试&quot; class=&quot;headerlink&quot; title=&quot;安卓调试&quot;&gt;&lt;/a&gt;安卓调试&lt;/h2&gt;&lt;p&gt;打开Chrome，访问 &lt;a href=&quot;http://localhost:8081/debugger-ui，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8081/debugger-ui，&lt;/a&gt; 应当能看到一个页面。按F12打开开发者菜单。&lt;/p&gt;
&lt;p&gt;在模拟器或真机菜单中选择Debug JS，即可开始调试。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装git-for-windows&quot;&gt;&lt;a href=&quot;#安装git-for-windows&quot; class=&quot;headerlink&quot; title=&quot;安装git for windows&quot;&gt;&lt;/a&gt;安装git for windows&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://git-for-windows.github.io/&quot;&gt;这里&lt;/a&gt;下载安装，&lt;code&gt;安装过程中注意选择&amp;quot;Run Git from Windows Command Prompt&amp;quot;。&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装Python&quot;&gt;&lt;a href=&quot;#安装Python&quot; class=&quot;headerlink&quot; title=&quot;安装Python&quot;&gt;&lt;/a&gt;安装Python&lt;/h2&gt;&lt;p&gt;从&lt;a href=&quot;https://www.python.org/downloads/release/python-2710/&quot;&gt;官网&lt;/a&gt;下载并安装python 2.7.x（3.x版本不行）&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://xiaoqianchang.github.io/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://xiaoqianchang.github.io/tags/ReactNative/"/>
    
      <category term="环境搭建" scheme="http://xiaoqianchang.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>反射基本用法</title>
    <link href="http://xiaoqianchang.github.io/2016/03/30/reflex-base1/"/>
    <id>http://xiaoqianchang.github.io/2016/03/30/reflex-base1/</id>
    <published>2016-03-30T03:31:44.000Z</published>
    <updated>2016-04-01T02:38:26.212Z</updated>
    
    <content type="html">&lt;p&gt;这里介绍Java里反射的一些基本方法使用。&lt;/p&gt;
&lt;h2 id=&quot;创建class的三种方式&quot;&gt;&lt;a href=&quot;#创建class的三种方式&quot; class=&quot;headerlink&quot; title=&quot;创建class的三种方式&quot;&gt;&lt;/a&gt;创建class的三种方式&lt;/h2&gt;&lt;h3 id=&quot;类型-class&quot;&gt;&lt;a href=&quot;#类型-class&quot; class=&quot;headerlink&quot; title=&quot;类型.class&quot;&gt;&lt;/a&gt;类型.class&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class c1 = Person.class;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Class-forName&quot;&gt;&lt;a href=&quot;#Class-forName&quot; class=&quot;headerlink&quot; title=&quot;Class.forName&quot;&gt;&lt;/a&gt;Class.forName&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class c2 = Class.forName(&lt;span class=&quot;string&quot;&gt;&quot;com.changxiao.Person&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;对象-getClass&quot;&gt;&lt;a href=&quot;#对象-getClass&quot; class=&quot;headerlink&quot; title=&quot;对象.getClass&quot;&gt;&lt;/a&gt;对象.getClass&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Person p = new Person(&lt;span class=&quot;string&quot;&gt;&quot;张三&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;男&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class c3 = p.getClass();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;获取类名&quot;&gt;&lt;a href=&quot;#获取类名&quot; class=&quot;headerlink&quot; title=&quot;获取类名&quot;&gt;&lt;/a&gt;获取类名&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Person.class.getSimpleName(); // 获取类名：Person&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.class.getName(); // 获取完整类名：com.changxiao.Person&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;属性操作&quot;&gt;&lt;a href=&quot;#属性操作&quot; class=&quot;headerlink&quot; title=&quot;属性操作&quot;&gt;&lt;/a&gt;属性操作&lt;/h2&gt;&lt;p&gt;获取Class：&lt;code&gt;Class pc = Class.forName(&amp;quot;com.changxiao.Person&amp;quot;);&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;获取所有可见-非private-属性&quot;&gt;&lt;a href=&quot;#获取所有可见-非private-属性&quot; class=&quot;headerlink&quot; title=&quot;获取所有可见(非private)属性&quot;&gt;&lt;/a&gt;获取所有可见(非private)属性&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Field[] fields = pc.getFields();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取所有已声明属性-已声明表示在自己类中声明的任何属性&quot;&gt;&lt;a href=&quot;#获取所有已声明属性-已声明表示在自己类中声明的任何属性&quot; class=&quot;headerlink&quot; title=&quot;获取所有已声明属性(已声明表示在自己类中声明的任何属性)&quot;&gt;&lt;/a&gt;获取所有已声明属性(已声明表示在自己类中声明的任何属性)&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Field[] allFields = pc.getDeclaredFields();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取指定的可见的属性&quot;&gt;&lt;a href=&quot;#获取指定的可见的属性&quot; class=&quot;headerlink&quot; title=&quot;获取指定的可见的属性&quot;&gt;&lt;/a&gt;获取指定的可见的属性&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// name 非private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Field f1 = pc.getField(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：如果name是private的，则会出现&lt;code&gt;java.lang.NoSuchFieldException&lt;/code&gt;异常&lt;/p&gt;
&lt;h3 id=&quot;获取指定的属性&quot;&gt;&lt;a href=&quot;#获取指定的属性&quot; class=&quot;headerlink&quot; title=&quot;获取指定的属性&quot;&gt;&lt;/a&gt;获取指定的属性&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Field f2 = pc.getDeclaredField(&lt;span class=&quot;string&quot;&gt;&quot;gender&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：如果gender为private则必须要设置&lt;code&gt;f2.setAccessible(true);&lt;/code&gt;&lt;br&gt;如果没有设置后面的属性会出现&lt;code&gt;java.lang.IllegalAccessException&lt;/code&gt;异常&lt;/p&gt;
&lt;h2 id=&quot;对方法操作&quot;&gt;&lt;a href=&quot;#对方法操作&quot; class=&quot;headerlink&quot; title=&quot;对方法操作&quot;&gt;&lt;/a&gt;对方法操作&lt;/h2&gt;&lt;h3 id=&quot;获取所有可见的方法&quot;&gt;&lt;a href=&quot;#获取所有可见的方法&quot; class=&quot;headerlink&quot; title=&quot;获取所有可见的方法&quot;&gt;&lt;/a&gt;获取所有可见的方法&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Method[] ms1 = pc.getMethods();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取所有已声明的方法&quot;&gt;&lt;a href=&quot;#获取所有已声明的方法&quot; class=&quot;headerlink&quot; title=&quot;获取所有已声明的方法&quot;&gt;&lt;/a&gt;获取所有已声明的方法&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Method[] ms2 = pc.getDeclaredMethods();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取可见的指定方法-参数列表必须指定-被获取方法带参数&quot;&gt;&lt;a href=&quot;#获取可见的指定方法-参数列表必须指定-被获取方法带参数&quot; class=&quot;headerlink&quot; title=&quot;获取可见的指定方法, 参数列表必须指定, 被获取方法带参数&quot;&gt;&lt;/a&gt;获取可见的指定方法, 参数列表必须指定, 被获取方法带参数&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Method m1 = pc.getMethod(&lt;span class=&quot;string&quot;&gt;&quot;setGender&quot;&lt;/span&gt;, new Class[] &amp;#123; String.class &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取可见的指定方法-参数列表必须指定-被获取方法不带参数&quot;&gt;&lt;a href=&quot;#获取可见的指定方法-参数列表必须指定-被获取方法不带参数&quot; class=&quot;headerlink&quot; title=&quot;获取可见的指定方法, 参数列表必须指定, 被获取方法不带参数&quot;&gt;&lt;/a&gt;获取可见的指定方法, 参数列表必须指定, 被获取方法不带参数&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Method m2 = pc.getMethod(&lt;span class=&quot;string&quot;&gt;&quot;getGender&quot;&lt;/span&gt;, new Class[] &amp;#123; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取已声明的指定方法&quot;&gt;&lt;a href=&quot;#获取已声明的指定方法&quot; class=&quot;headerlink&quot; title=&quot;获取已声明的指定方法&quot;&gt;&lt;/a&gt;获取已声明的指定方法&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pc.getDeclaredMethod(name, parameterTypes)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;对构造方法操作&quot;&gt;&lt;a href=&quot;#对构造方法操作&quot; class=&quot;headerlink&quot; title=&quot;对构造方法操作&quot;&gt;&lt;/a&gt;对构造方法操作&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pc.getConstructors();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pc.getConstructor(parameterTypes);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;代码展示上述用法&quot;&gt;&lt;a href=&quot;#代码展示上述用法&quot; class=&quot;headerlink&quot; title=&quot;代码展示上述用法&quot;&gt;&lt;/a&gt;代码展示上述用法&lt;/h2&gt;&lt;h3 id=&quot;反射用法&quot;&gt;&lt;a href=&quot;#反射用法&quot; class=&quot;headerlink&quot; title=&quot;反射用法&quot;&gt;&lt;/a&gt;反射用法&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 创建class的三种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;. 类型.class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class c1 = Person.class;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;. Class.forName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class c2 = Class.forName(&lt;span class=&quot;string&quot;&gt;&quot;com.changxiao.Person&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;. 对象.getClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person p = new Person(&lt;span class=&quot;string&quot;&gt;&quot;张三&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;男&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class c3 = p.getClass();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 加载出Class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class pc = Class.forName(&lt;span class=&quot;string&quot;&gt;&quot;com.changxiao.Person&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取类名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String className = pc.getName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(className);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//-------------------对属性操作 start----------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取所有可见属性成数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Field[] fields = pc.getFields();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(Arrays.toString(fields));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取所有已声明属性(已声明表示在自己类中声明的任何属性)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Field[] allFields = pc.getDeclaredFields();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(Arrays.toString(allFields));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取指定的可见的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Field f1 = pc.getField(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(f1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取指定的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Field f2 = pc.getDeclaredField(&lt;span class=&quot;string&quot;&gt;&quot;gender&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(f2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//-------------------对属性操作 end----------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//-------------------对方法操作 start----------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取所有可见的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method[] ms1 = pc.getMethods();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(Arrays.toString(ms1));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取所有已声明的方法成数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method[] ms2 = pc.getDeclaredMethods();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(Arrays.toString(ms2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取可见的指定方法, 参数列表必须指定, 被获取方法带参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method m1 = pc.getMethod(&lt;span class=&quot;string&quot;&gt;&quot;setGender&quot;&lt;/span&gt;, new Class[] &amp;#123; String.class &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//// 获取可见的指定方法, 参数列表必须指定, 被获取方法不带参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method m2 = pc.getMethod(&lt;span class=&quot;string&quot;&gt;&quot;getGender&quot;&lt;/span&gt;, new Class[] &amp;#123; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(m1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(m2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取已声明的指定名称方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// pc.getDeclaredMethod(name, parameterTypes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//-------------------对方法操作 end----------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//-------------------对构造方法操作 start----------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//pc.getConstructors()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//pc.getConstructor(parameterTypes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//-------------------对构造方法操作 end----------------------------------&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;属性Field的使用&quot;&gt;&lt;a href=&quot;#属性Field的使用&quot; class=&quot;headerlink&quot; title=&quot;属性Field的使用&quot;&gt;&lt;/a&gt;属性Field的使用&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Person p = new Person(&lt;span class=&quot;string&quot;&gt;&quot;张全蛋&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;男&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class c = Person.class;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取指定的属性描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Field nameField = c.getField(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;); // name为非private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置属性的访问权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Field nameField = c.getDeclaredField(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// nameField.setAccessible(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取名字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String shuXingMing = nameField.getName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(shuXingMing);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置属性的值 等同于 p.name = &lt;span class=&quot;string&quot;&gt;&quot;张三&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//		nameField.set(p, &lt;span class=&quot;string&quot;&gt;&quot;张三&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//		System.out.println(p.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 通过反射获取指定对象上的属性值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String nameValue = (String) nameField.get(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(nameValue);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;name&lt;br&gt;张全蛋&lt;/p&gt;
&lt;h3 id=&quot;构造方法Constructor的使用&quot;&gt;&lt;a href=&quot;#构造方法Constructor的使用&quot; class=&quot;headerlink&quot; title=&quot;构造方法Constructor的使用&quot;&gt;&lt;/a&gt;构造方法Constructor的使用&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 获取类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class c = Person.class;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取无参构造方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Constructor con = c.getConstructor(new Class[]&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 根据构造方法创建对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person p = (Person) con.newInstance(new Object[] &amp;#123;&amp;#125;);	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取带参数的构造方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 基本数据类型通过封装类.TYPE来获得类别&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Constructor con = c.getConstructor(new Class[]&amp;#123;String.class,String.class,Integer.TYPE&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person p = (Person) con.newInstance(new Object[] &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;张三丰&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;男&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;800&lt;/span&gt;&amp;#125;);	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(p); // 输出对象&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;Person [name=张三丰, gender=男, age=800]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小知识：Integer.TYPE 输出为int&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看Integer的源码：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * The &amp;#123;@code Class&amp;#125; instance representing the primitive &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;#123;@code int&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @since   JDK1.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static final Class&amp;lt;Integer&amp;gt;  TYPE = (Class&amp;lt;Integer&amp;gt;) Class.getPrimitiveClass(&lt;span class=&quot;string&quot;&gt;&quot;int&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法Method的使用&quot;&gt;&lt;a href=&quot;#方法Method的使用&quot; class=&quot;headerlink&quot; title=&quot;方法Method的使用&quot;&gt;&lt;/a&gt;方法Method的使用&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Person p1 = new Person(&lt;span class=&quot;string&quot;&gt;&quot;张全蛋&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;男&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class c = Person.class;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取指定的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method m = c.getDeclaredMethod(&lt;span class=&quot;string&quot;&gt;&quot;eat&quot;&lt;/span&gt;, new Class[] &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 设置可以被访问&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.setAccessible(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 调用对应方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.invoke(p1, new Object[] &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 获取带参数的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method m1 = c.getDeclaredMethod(&lt;span class=&quot;string&quot;&gt;&quot;setGender&quot;&lt;/span&gt;, new Class[] &amp;#123;String.class&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 调用对应方法传递参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m1.invoke(p1, new Object[] &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(p1.getGender());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出：&lt;br&gt;male&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/jackiehff/article/details/8509075&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java反射机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enjoy It!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这里介绍Java里反射的一些基本方法使用。&lt;/p&gt;
&lt;h2 id=&quot;创建class的三种方式&quot;&gt;&lt;a href=&quot;#创建class的三种方式&quot; class=&quot;headerlink&quot; title=&quot;创建class的三种方式&quot;&gt;&lt;/a&gt;创建class的三种方式&lt;/h2&gt;&lt;h3 id=&quot;类型-class&quot;&gt;&lt;a href=&quot;#类型-class&quot; class=&quot;headerlink&quot; title=&quot;类型.class&quot;&gt;&lt;/a&gt;类型.class&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class c1 = Person.class;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Class-forName&quot;&gt;&lt;a href=&quot;#Class-forName&quot; class=&quot;headerlink&quot; title=&quot;Class.forName&quot;&gt;&lt;/a&gt;Class.forName&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class c2 = Class.forName(&lt;span class=&quot;string&quot;&gt;&quot;com.changxiao.Person&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;对象-getClass&quot;&gt;&lt;a href=&quot;#对象-getClass&quot; class=&quot;headerlink&quot; title=&quot;对象.getClass&quot;&gt;&lt;/a&gt;对象.getClass&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Person p = new Person(&lt;span class=&quot;string&quot;&gt;&quot;张三&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;男&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Class c3 = p.getClass();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/tags/Java/"/>
    
      <category term="reflex" scheme="http://xiaoqianchang.github.io/tags/reflex/"/>
    
  </entry>
  
  <entry>
    <title>从网站导出SSL验证证书</title>
    <link href="http://xiaoqianchang.github.io/2016/03/28/export-SSL-certificate-from-website/"/>
    <id>http://xiaoqianchang.github.io/2016/03/28/export-SSL-certificate-from-website/</id>
    <published>2016-03-28T08:26:23.000Z</published>
    <updated>2016-03-28T08:55:21.919Z</updated>
    
    <content type="html">&lt;h2 id=&quot;chrome导出&quot;&gt;&lt;a href=&quot;#chrome导出&quot; class=&quot;headerlink&quot; title=&quot;chrome导出&quot;&gt;&lt;/a&gt;chrome导出&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在chrome打开https的网站点击前面那个小锁，&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/SSL-export1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;点击连接选项&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/SSL-export2.png&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击证书信息&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/SSL-export3.jpg&quot; alt=&quot;3&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选中详细信息&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/SSL-export4.png&quot; alt=&quot;4&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击复制到文件&lt;br&gt;根据“证书导出向导”导出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择证书格式&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/SSL-export5.png&quot; alt=&quot;6&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一项是二进制的形式&lt;br&gt;第二项是Base64明文的形式&lt;br&gt;下一步保存到选中位置，名为*.cer&lt;/p&gt;
&lt;p&gt;其它浏览器也是同样的操作。。。&lt;/p&gt;
&lt;p&gt;Enjoy It!&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;chrome导出&quot;&gt;&lt;a href=&quot;#chrome导出&quot; class=&quot;headerlink&quot; title=&quot;chrome导出&quot;&gt;&lt;/a&gt;chrome导出&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在chrome打开https的网站点击前面那个小锁，&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/SSL-export1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="other" scheme="http://xiaoqianchang.github.io/categories/other/"/>
    
    
      <category term="导出SSL验证证书" scheme="http://xiaoqianchang.github.io/tags/%E5%AF%BC%E5%87%BASSL%E9%AA%8C%E8%AF%81%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Android插件化架构设计简述</title>
    <link href="http://xiaoqianchang.github.io/2016/03/16/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%AE%80%E8%BF%B0/"/>
    <id>http://xiaoqianchang.github.io/2016/03/16/Android插件化架构设计简述/</id>
    <published>2016-03-16T09:29:29.000Z</published>
    <updated>2016-03-28T08:56:09.387Z</updated>
    
    <content type="html">&lt;p&gt;近期在整理插件化方面的知识，今天以换皮肤效果的例子总结如下：&lt;/p&gt;
&lt;h2 id=&quot;插件开发好处&quot;&gt;&lt;a href=&quot;#插件开发好处&quot; class=&quot;headerlink&quot; title=&quot;插件开发好处&quot;&gt;&lt;/a&gt;插件开发好处&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;有助于协同开发，有助于功能扩展等等…&lt;/li&gt;
&lt;li&gt;如支付宝主界面都是模块分类，每一个入口就是插件&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;成为插件的要求&quot;&gt;&lt;a href=&quot;#成为插件的要求&quot; class=&quot;headerlink&quot; title=&quot;成为插件的要求&quot;&gt;&lt;/a&gt;成为插件的要求&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;插件程序是不需要程序主入口的&lt;/li&gt;
&lt;li&gt;插件程序必须要遵循主程序的协议才能成为插件&lt;/li&gt;
&lt;li&gt;插件开发不管插件是图片还是功能，它们都是通过类反射来找到插件资源&lt;/li&gt;
&lt;li&gt;在manifest中具有相同的&lt;code&gt;android:sharedUserId&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;插件开发步骤&quot;&gt;&lt;a href=&quot;#插件开发步骤&quot; class=&quot;headerlink&quot; title=&quot;插件开发步骤&quot;&gt;&lt;/a&gt;插件开发步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;新建一个工程，准备图片资源&lt;/li&gt;
&lt;li&gt;新建布局文件&lt;/li&gt;
&lt;li&gt;初始化UI主键&lt;/li&gt;
&lt;li&gt;初始化popupWindow，新建popupWindow布局文件（提示框）&lt;/li&gt;
&lt;li&gt;查找插件列表&lt;/li&gt;
&lt;li&gt;显示皮肤列表&lt;/li&gt;
&lt;li&gt;加载插件资源&lt;/li&gt;
&lt;li&gt;规范插件资源协议&lt;/li&gt;
&lt;li&gt;添加插件程序&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;要用到的知识点&quot;&gt;&lt;a href=&quot;#要用到的知识点&quot; class=&quot;headerlink&quot; title=&quot;要用到的知识点&quot;&gt;&lt;/a&gt;要用到的知识点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;android基本UI组件的使用&lt;/li&gt;
&lt;li&gt;掌握android PackageManager类的基本使用(包括app的基本信息：应用程序的名称、应用程序的包名)&lt;/li&gt;
&lt;li&gt;掌握android资源加载器(资源：图片、文字、字体大小、样式)&lt;/li&gt;
&lt;li&gt;掌握如何定义插件开发协议(插件开发协议：图片命名规范、文字命名规范、类的命名规范)&lt;/li&gt;
&lt;li&gt;掌握java类反射机制&lt;/li&gt;
&lt;li&gt;掌握android shareuserid的使用&lt;/li&gt;
&lt;li&gt;掌握android 插件架构设计&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;主程序&quot;&gt;&lt;a href=&quot;#主程序&quot; class=&quot;headerlink&quot; title=&quot;主程序&quot;&gt;&lt;/a&gt;主程序&lt;/h2&gt;&lt;h3 id=&quot;MainActivity&quot;&gt;&lt;a href=&quot;#MainActivity&quot; class=&quot;headerlink&quot; title=&quot;MainActivity&quot;&gt;&lt;/a&gt;MainActivity&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class MainActivity extends Activity implements OnClickListener,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		OnItemClickListener &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static final String TAG = MainActivity.class.getSimpleName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private ImageView &lt;span class=&quot;built_in&quot;&gt;bg&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private Button plugin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	List&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; pluginList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	protected void onCreate(Bundle savedInstanceState) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		super.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;ContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		initView();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;initView&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;bg&lt;/span&gt; = (ImageView) findViewById(R.id.img_&lt;span class=&quot;built_in&quot;&gt;bg&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		plugin = (Button) findViewById(R.id.btn_plugin);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		plugin.setOnClickListener(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void onClick(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		View contentView = getLayoutInflater().inflate(R.layout.popupwindow,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PopupWindow popupWindow = new PopupWindow(contentView,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ViewGroup.LayoutParams.WRAP_CONTENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				ViewGroup.LayoutParams.WRAP_CONTENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		popupWindow.setBackgroundDrawable(getResources().getDrawable(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				R.drawable.ic_launcher));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 设置该属性后。我们点击提示框意外部分，提示框会消失&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		popupWindow.setFocusable(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		popupWindow.setTouchable(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 查找插件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pluginList = findPluginList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pluginList == null || pluginList.size() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Toast.makeText(this, &lt;span class=&quot;string&quot;&gt;&quot;目前没有皮肤，请下载&quot;&lt;/span&gt;, Toast.LENGTH_SHORT).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 显示皮肤&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ListView lv_plugins = (ListView) contentView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.findViewById(R.id.lv_plugins);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		lv_plugins.setOnItemClickListener(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		SimpleAdapter simpleAdapter = new SimpleAdapter(this, pluginList,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				android.R.layout.simple_list_item_1, new String[] &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;label&quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				new int[] &amp;#123; android.R.id.text1 &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		lv_plugins.setAdapter(simpleAdapter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 设置popiuWindow的宽高&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		popupWindow.setWidth(&lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		popupWindow.setHeight(pluginList.size() * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 显示popupWindow（显示提示框）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		popupWindow.showAsDropDown(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private List&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;findPluginList&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		List&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt; list = new ArrayList&amp;lt;Map&amp;lt;String, String&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 获取包管理器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PackageManager packageManager = this.getPackageManager();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 获取手机已安装的App包信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		List&amp;lt;PackageInfo&amp;gt; installedPackages = packageManager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.getInstalledPackages(PackageManager.GET_ACTIVITIES);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// 获取当前app的包信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			PackageInfo currentPackageInfo = this.getPackageManager()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					.getPackageInfo(getPackageName(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (PackageInfo packageInfo : installedPackages) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				String packageName = packageInfo.packageName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				String sharedUsId = packageInfo.sharedUserId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sharedUsId == null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						|| !sharedUsId.equals(currentPackageInfo.sharedUserId)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						|| packageName.equals(getPackageName())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;built_in&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// 记载插件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				Map&amp;lt;String, String&amp;gt; pluginMap = new HashMap&amp;lt;String, String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// 获取插件程序的名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				String label = packageInfo.applicationInfo.loadLabel(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						packageManager).toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// 获取包名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				pluginMap.put(&lt;span class=&quot;string&quot;&gt;&quot;packageName&quot;&lt;/span&gt;, packageName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				pluginMap.put(&lt;span class=&quot;string&quot;&gt;&quot;label&quot;&lt;/span&gt;, label);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				list.add(pluginMap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; catch (NameNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// TODO Auto-generated catch block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; list;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void onItemClick(AdapterView&amp;lt;?&amp;gt; parent, View view, int position,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			long id) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 加载插件资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;、获取插件上下文（其实就是获取插件程序的资源加载器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// h获取当前要加载的插件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Map&amp;lt;String, String&amp;gt; map = pluginList.get(position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 获取插件上下文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Context pluginContext = findPluginContext(map);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;、根据插件资源加载器，加载图片资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int resId = findResourceId(pluginContext, map);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (resId != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// 直接设置是不能加载到资源(解决办法：我们必须通过插件加载器来帮助我们加载资源)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			bg.setImageDrawable(pluginContext.getResources().getDrawable(resId));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 获取插件上下文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * @param map&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * @&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private Context findPluginContext(Map&amp;lt;String, String&amp;gt; map) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Log.i(TAG, map.get(&lt;span class=&quot;string&quot;&gt;&quot;packageName&quot;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot;-------------------&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; this.createPackageContext(map.get(&lt;span class=&quot;string&quot;&gt;&quot;packageName&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Context.CONTEXT_IGNORE_SECURITY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; catch (NameNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// TODO Auto-generated catch block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 根据插件资源加载器，加载图片资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 查找资源id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 反射&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * @param pluginContext 插件上下文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * @param map 插件包名的Map&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * @&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private int findResourceId(Context pluginContext, Map&amp;lt;String, String&amp;gt; map) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String packageName = map.get(&lt;span class=&quot;string&quot;&gt;&quot;packageName&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 把ClassLoader包装一下，包装为插件的类加载器(Class.forName里面默认的classLoader是本类的类加载器)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PathClassLoader classLoader = new PathClassLoader(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				pluginContext.getPackageResourcePath(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				PathClassLoader.getSystemClassLoader());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Class&amp;lt;?&amp;gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;Name = Class.forName(packageName + &lt;span class=&quot;string&quot;&gt;&quot;.R&lt;span class=&quot;variable&quot;&gt;$drawable&lt;/span&gt;&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					classLoader);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Field[] fields = &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;Name.getFields();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Field field : fields) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// 找到想要的图片(我们所有插件的背景图片的名称：icon_main_&lt;span class=&quot;built_in&quot;&gt;bg&lt;/span&gt;---图片协议：main_&lt;span class=&quot;built_in&quot;&gt;bg&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				String name = field.getName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (name.equals(&lt;span class=&quot;string&quot;&gt;&quot;icon_main_bg&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; field.getInt(R.drawable.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; catch (ClassNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; catch (IllegalAccessException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// TODO Auto-generated catch block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; catch (IllegalArgumentException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			// TODO Auto-generated catch block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;MainActivity的布局文件&quot;&gt;&lt;a href=&quot;#MainActivity的布局文件&quot; class=&quot;headerlink&quot; title=&quot;MainActivity的布局文件&quot;&gt;&lt;/a&gt;MainActivity的布局文件&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;RelativeLayout xmlns:android=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xmlns:tools=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/tools&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tools:context=&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;relativePackage&amp;#125;&lt;/span&gt;.&lt;span class=&quot;variable&quot;&gt;$&amp;#123;activityClass&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;ImageView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&lt;span class=&quot;string&quot;&gt;&quot;@+id/img_bg&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:scaleType=&lt;span class=&quot;string&quot;&gt;&quot;centerCrop&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:src=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/ic_launcher&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:contentDescription=&lt;span class=&quot;string&quot;&gt;&quot;@null&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Button&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&lt;span class=&quot;string&quot;&gt;&quot;@+id/btn_plugin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&lt;span class=&quot;string&quot;&gt;&quot;切换&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;插件程序&quot;&gt;&lt;a href=&quot;#插件程序&quot; class=&quot;headerlink&quot; title=&quot;插件程序&quot;&gt;&lt;/a&gt;插件程序&lt;/h2&gt;&lt;p&gt;插件程序没有程序入口，所以manifest中application节点不定义入口activity，并且与主程序有相同的&lt;code&gt;android:sharedUserId=&amp;quot;com.example.plugin.background&amp;quot;&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;近期在整理插件化方面的知识，今天以换皮肤效果的例子总结如下：&lt;/p&gt;
&lt;h2 id=&quot;插件开发好处&quot;&gt;&lt;a href=&quot;#插件开发好处&quot; class=&quot;headerlink&quot; title=&quot;插件开发好处&quot;&gt;&lt;/a&gt;插件开发好处&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;有助于协同开发，有助于功能扩展等等…&lt;/li&gt;
&lt;li&gt;如支付宝主界面都是模块分类，每一个入口就是插件&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;成为插件的要求&quot;&gt;&lt;a href=&quot;#成为插件的要求&quot; class=&quot;headerlink&quot; title=&quot;成为插件的要求&quot;&gt;&lt;/a&gt;成为插件的要求&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;插件程序是不需要程序主入口的&lt;/li&gt;
&lt;li&gt;插件程序必须要遵循主程序的协议才能成为插件&lt;/li&gt;
&lt;li&gt;插件开发不管插件是图片还是功能，它们都是通过类反射来找到插件资源&lt;/li&gt;
&lt;li&gt;在manifest中具有相同的&lt;code&gt;android:sharedUserId&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Android" scheme="http://xiaoqianchang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xiaoqianchang.github.io/tags/Android/"/>
    
      <category term="插件化" scheme="http://xiaoqianchang.github.io/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java弹药库</title>
    <link href="http://xiaoqianchang.github.io/2016/03/15/java-hnowledge-home1/"/>
    <id>http://xiaoqianchang.github.io/2016/03/15/java-hnowledge-home1/</id>
    <published>2016-03-15T09:17:51.000Z</published>
    <updated>2016-03-28T09:01:38.023Z</updated>
    
    <content type="html">&lt;p&gt;继上一篇Android弹药库后对Java中的知识积累在此，这里会持续更新。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;好，开工啦！&lt;/p&gt;
&lt;h2 id=&quot;获取系统环境变量的值&quot;&gt;&lt;a href=&quot;#获取系统环境变量的值&quot; class=&quot;headerlink&quot; title=&quot;获取系统环境变量的值&quot;&gt;&lt;/a&gt;获取系统环境变量的值&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.lang.System.getenv(String)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Collections工具类用法&quot;&gt;&lt;a href=&quot;#Collections工具类用法&quot; class=&quot;headerlink&quot; title=&quot;Collections工具类用法&quot;&gt;&lt;/a&gt;Collections工具类用法&lt;/h2&gt;&lt;h3 id=&quot;互换在指定列表中指定位置的元素&quot;&gt;&lt;a href=&quot;#互换在指定列表中指定位置的元素&quot; class=&quot;headerlink&quot; title=&quot;互换在指定列表中指定位置的元素&quot;&gt;&lt;/a&gt;互换在指定列表中指定位置的元素&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Collections.swap(list, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;); // 互换在list中&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;位置的元素&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;对已有的List集合数据排序&quot;&gt;&lt;a href=&quot;#对已有的List集合数据排序&quot; class=&quot;headerlink&quot; title=&quot;对已有的List集合数据排序&quot;&gt;&lt;/a&gt;对已有的List集合数据排序&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;比较的是字符串类型&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Collections.sort(contactList, new Comparator&amp;lt;User&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public int compare(User lhs, User rhs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; lhs.getUsername().compareTo(rhs.getUsername());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;比较的是int&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Collections.sort(conversationList, new Comparator&amp;lt;Integer&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public int compare(final Integer con1, final Integer con2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (con1 == con2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (con2 &amp;gt; con1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;h3 id=&quot;以下符号的含义&quot;&gt;&lt;a href=&quot;#以下符号的含义&quot; class=&quot;headerlink&quot; title=&quot;以下符号的含义&quot;&gt;&lt;/a&gt;以下符号的含义&lt;/h3&gt;&lt;p&gt;&lt;code&gt;^&lt;/code&gt;：开始符号&lt;br&gt;&lt;code&gt;$&lt;/code&gt;：结尾符号&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt;：出现0到1次&lt;br&gt;&lt;code&gt;+&lt;/code&gt;：出现1哒n次&lt;br&gt;&lt;code&gt;*&lt;/code&gt;：出现0到n次&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt;：任意字符&lt;br&gt;&lt;code&gt;\w&lt;/code&gt;：包括字母、数字和下划线及“&lt;em&gt;”，等价于[a-zA-Z0-9&lt;/em&gt;]&lt;br&gt;&lt;code&gt;\W&lt;/code&gt;：\w取反&lt;br&gt;&lt;code&gt;\d&lt;/code&gt;：包括数字，等价于[0-9]&lt;br&gt;&lt;code&gt;\D&lt;/code&gt;：\d的取反&lt;br&gt;&lt;code&gt;{n}&lt;/code&gt;：出现n次&lt;/p&gt;
&lt;p&gt;例子：&lt;br&gt;&lt;code&gt;^[a-zA-Z0-9_$]{6,20}$&lt;/code&gt;：表示有字母、数字、下划线6到20位组成&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;继上一篇Android弹药库后对Java中的知识积累在此，这里会持续更新。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android弹药库</title>
    <link href="http://xiaoqianchang.github.io/2016/03/10/android-knowledge-home1/"/>
    <id>http://xiaoqianchang.github.io/2016/03/10/android-knowledge-home1/</id>
    <published>2016-03-10T03:04:35.000Z</published>
    <updated>2016-04-02T11:12:28.299Z</updated>
    
    <content type="html">&lt;p&gt;在工作中突然发现以前多么熟悉的知识技能现在不能愉快的玩耍了，想要再次使用以前的一些知识还得Google，这是一件多么伤心的事啊。这些天比较闲，打算把最近用到的小知识总结下，这里会持续更新。还是应了那句话，“知识在于积累”。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;好，开工啦！&lt;/p&gt;
&lt;h2 id=&quot;设备信息的获取&quot;&gt;&lt;a href=&quot;#设备信息的获取&quot; class=&quot;headerlink&quot; title=&quot;设备信息的获取&quot;&gt;&lt;/a&gt;设备信息的获取&lt;/h2&gt;&lt;p&gt;下面以Samsung SM-N9006（Android 4.4.2 API19）为例&lt;/p&gt;
&lt;h3 id=&quot;手机的型号&quot;&gt;&lt;a href=&quot;#手机的型号&quot; class=&quot;headerlink&quot; title=&quot;手机的型号&quot;&gt;&lt;/a&gt;手机的型号&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/** 手机的型号 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getMobileType&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; android.os.Build.MODEL; // SM-N9006&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;手机的OS版本号&quot;&gt;&lt;a href=&quot;#手机的OS版本号&quot; class=&quot;headerlink&quot; title=&quot;手机的OS版本号&quot;&gt;&lt;/a&gt;手机的OS版本号&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/** 手机的OS版本号 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getSdkVersion&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; android.os.Build.VERSION.RELEASE; // 指的是版本，例如&lt;span class=&quot;number&quot;&gt;4.4&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// android.os.Build.VERSION.SDK; // 指的是level，例如 &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// android.os.Build.VERSION.SDK_INT; // 指的是level，例如 &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;设备的DeviceId&quot;&gt;&lt;a href=&quot;#设备的DeviceId&quot; class=&quot;headerlink&quot; title=&quot;设备的DeviceId&quot;&gt;&lt;/a&gt;设备的DeviceId&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; 设备的DeviceId,如果获取不到，就将该手机的Wifi Mac地址作为唯一识别码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getDeviceId&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String deviceId = tm.getDeviceId();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (deviceId == null || deviceId.trim().length() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		WifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		WifiInfo info = wifi.getConnectionInfo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		deviceId = info.getMacAddress();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; deviceId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;APP信息的获取&quot;&gt;&lt;a href=&quot;#APP信息的获取&quot; class=&quot;headerlink&quot; title=&quot;APP信息的获取&quot;&gt;&lt;/a&gt;APP信息的获取&lt;/h2&gt;&lt;h3 id=&quot;获取PackageInfo&quot;&gt;&lt;a href=&quot;#获取PackageInfo&quot; class=&quot;headerlink&quot; title=&quot;获取PackageInfo&quot;&gt;&lt;/a&gt;获取PackageInfo&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static PackageInfo &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getPackageInfo&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PackageInfo pi = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			pi = context.getPackageManager()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					.getPackageInfo(context.getPackageName(), PackageManager.GET_CONFIGURATIONS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; catch (NameNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; pi;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取版本号&quot;&gt;&lt;a href=&quot;#获取版本号&quot; class=&quot;headerlink&quot; title=&quot;获取版本号&quot;&gt;&lt;/a&gt;获取版本号&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/** 手机版本号 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static int &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getSoftVersion&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; getPackageInfo().versionCode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取版本信息&quot;&gt;&lt;a href=&quot;#获取版本信息&quot; class=&quot;headerlink&quot; title=&quot;获取版本信息&quot;&gt;&lt;/a&gt;获取版本信息&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/** 手机的版本名 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getVersionName&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; getPackageInfo().versionName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;检查apk文件是否为一个完整的apk文件&quot;&gt;&lt;a href=&quot;#检查apk文件是否为一个完整的apk文件&quot; class=&quot;headerlink&quot; title=&quot;检查apk文件是否为一个完整的apk文件&quot;&gt;&lt;/a&gt;检查apk文件是否为一个完整的apk文件&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/** 检查下载完成的apk文件，是否为一个完整的apk文件 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static boolean checkApkFile(String apkFilePath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	boolean result = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PackageManager pManager = FrameworkController.getInstance().getPackageManager();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PackageInfo pInfo = pManager.getPackageArchiveInfo(apkFilePath, PackageManager.GET_ACTIVITIES);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pInfo == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			result = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			result = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;存储操作&quot;&gt;&lt;a href=&quot;#存储操作&quot; class=&quot;headerlink&quot; title=&quot;存储操作&quot;&gt;&lt;/a&gt;存储操作&lt;/h2&gt;&lt;h3 id=&quot;外置存储-sdcard&quot;&gt;&lt;a href=&quot;#外置存储-sdcard&quot; class=&quot;headerlink&quot; title=&quot;外置存储(sdcard)&quot;&gt;&lt;/a&gt;外置存储(sdcard)&lt;/h3&gt;&lt;h4 id=&quot;检查sdcard是否存在&quot;&gt;&lt;a href=&quot;#检查sdcard是否存在&quot; class=&quot;headerlink&quot; title=&quot;检查sdcard是否存在&quot;&gt;&lt;/a&gt;检查sdcard是否存在&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/** 检查sdcard是否存在(安装好) */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static boolean &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isSdcardExist&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (android.os.Environment.getExternalStorageState().equals(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			android.os.Environment.MEDIA_MOUNTED))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以这样配置路径&lt;br&gt;&lt;code&gt;Environment.getExternalStorageDirectory().getAbsolutePath()+ File.separator+&amp;quot;MobileOffice&amp;quot;+File.separator+&amp;quot;upgrade&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;得到外置存储的root的绝对路径&quot;&gt;&lt;a href=&quot;#得到外置存储的root的绝对路径&quot; class=&quot;headerlink&quot; title=&quot;得到外置存储的root的绝对路径&quot;&gt;&lt;/a&gt;得到外置存储的root的绝对路径&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/** 得到外置存储的root的绝对路径，一般为 /storage/emulated/&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getStorageRootDir&lt;/span&gt;&lt;/span&gt;() &amp;#123; // /mnt/sdcard&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; Environment.getExternalStorageDirectory().getAbsolutePath();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;创建sdcard的文件夹&quot;&gt;&lt;a href=&quot;#创建sdcard的文件夹&quot; class=&quot;headerlink&quot; title=&quot;创建sdcard的文件夹&quot;&gt;&lt;/a&gt;创建sdcard的文件夹&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// dir 要创建sdcard的文件夹的绝对路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public  static boolean createDir(String dir) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	File file = new File(dir);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!file.exists())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; file.mkdirs();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;内部存储&quot;&gt;&lt;a href=&quot;#内部存储&quot; class=&quot;headerlink&quot; title=&quot;内部存储&quot;&gt;&lt;/a&gt;内部存储&lt;/h3&gt;&lt;p&gt;得到cashe路径&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String cachePath = context.getCacheDir().getAbsolutePath();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;MD5加密&quot;&gt;&lt;a href=&quot;#MD5加密&quot; class=&quot;headerlink&quot; title=&quot;MD5加密&quot;&gt;&lt;/a&gt;MD5加密&lt;/h2&gt;&lt;h3 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public final static String MD5(String s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	char hexDigits[] = &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;2&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;3&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;5&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;6&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;7&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;8&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;9&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		byte[] btInput = s.getBytes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 获得MD5摘要算法的 MessageDigest 对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		MessageDigest mdInst = MessageDigest.getInstance(&lt;span class=&quot;string&quot;&gt;&quot;MD5&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 使用指定的字节更新摘要&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mdInst.update(btInput);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 获得密文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		byte[] md = mdInst.digest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 把密文转换成十六进制的字符串形式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int j = md.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		char str[] = new char[j * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; j; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			byte byte0 = md[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			str[k++] = hexDigits[byte0 &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;amp; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;xf];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			str[k++] = hexDigits[byte0 &amp;amp; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;xf];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; new String(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法二&quot;&gt;&lt;a href=&quot;#方法二&quot; class=&quot;headerlink&quot; title=&quot;方法二&quot;&gt;&lt;/a&gt;方法二&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/** 对原始字符串进行md5的&lt;span class=&quot;built_in&quot;&gt;hash&lt;/span&gt;计算 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private static String md5(String string) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	byte[] &lt;span class=&quot;built_in&quot;&gt;hash&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;hash&lt;/span&gt; = MessageDigest.getInstance(&lt;span class=&quot;string&quot;&gt;&quot;MD5&quot;&lt;/span&gt;).digest(string.getBytes(&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (NoSuchAlgorithmException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		throw new RuntimeException(&lt;span class=&quot;string&quot;&gt;&quot;Huh, MD5 should be supported?&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (UnsupportedEncodingException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		throw new RuntimeException(&lt;span class=&quot;string&quot;&gt;&quot;Huh, UTF-8 should be supported?&quot;&lt;/span&gt;, e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	StringBuilder hex = new StringBuilder(hash.length * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (byte b : &lt;span class=&quot;built_in&quot;&gt;hash&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((b &amp;amp; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;xFF) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x10)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			hex.append(&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		hex.append(Integer.toHexString(b &amp;amp; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;xFF));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; hex.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法三&quot;&gt;&lt;a href=&quot;#方法三&quot; class=&quot;headerlink&quot; title=&quot;方法三&quot;&gt;&lt;/a&gt;方法三&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public String Md5(String plainText) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String result = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		MessageDigest md = MessageDigest.getInstance(&lt;span class=&quot;string&quot;&gt;&quot;MD5&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		md.update(plainText.getBytes());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		byte b[] = md.digest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		StringBuffer buf = new StringBuffer(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int offset = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; offset &amp;lt; b.length; offset++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			i = b[offset];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				i += &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i &amp;lt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				buf.append(&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			buf.append(Integer.toHexString(i));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result = buf.toString().toUpperCase();// &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;位的加密（转成大写）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		buf.toString().substring(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;);// &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;位的加密&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (NoSuchAlgorithmException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;判断给定字符串是否空白串&quot;&gt;&lt;a href=&quot;#判断给定字符串是否空白串&quot; class=&quot;headerlink&quot; title=&quot;判断给定字符串是否空白串&quot;&gt;&lt;/a&gt;判断给定字符串是否空白串&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 判断给定字符串是否空白串。&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 空白串是指由空格、制表符、回车符、换行符组成的字符串&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * StringUtils.isBlank(null) = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; StringUtils.isBlank(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;) = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; StringUtils.isBlank(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;) = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; boolean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static boolean isBlank(CharSequence cs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int strLen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cs == null || (strLen = cs.length()) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; strLen; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!Character.isWhitespace(cs.charAt(i))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;对指定字符串隐藏&quot;&gt;&lt;a href=&quot;#对指定字符串隐藏&quot; class=&quot;headerlink&quot; title=&quot;对指定字符串隐藏&quot;&gt;&lt;/a&gt;对指定字符串隐藏&lt;/h2&gt;&lt;h3 id=&quot;对字符串中间部分隐藏&quot;&gt;&lt;a href=&quot;#对字符串中间部分隐藏&quot; class=&quot;headerlink&quot; title=&quot;对字符串中间部分隐藏&quot;&gt;&lt;/a&gt;对字符串中间部分隐藏&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 对身份证号和就诊卡号进行部分隐藏 &amp;lt;/br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;pre&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * StringUtils.hidePartString(&lt;span class=&quot;string&quot;&gt;&quot;abcdefghi&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) = abc**fghi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String hideMiddleString(String str, int prefixCount, int suffixCount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (null == str || &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.equals(str)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int length = str.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (length &amp;lt;= (prefixCount + suffixCount))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int count = length - prefixCount - suffixCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String temp1 = str.substring(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, prefixCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String temp2 = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, temp3 = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; count; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		temp2 += &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	temp3 = str.substring(length - suffixCount, length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; temp1 + temp2 + temp3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;对字符串两边部分隐藏&quot;&gt;&lt;a href=&quot;#对字符串两边部分隐藏&quot; class=&quot;headerlink&quot; title=&quot;对字符串两边部分隐藏&quot;&gt;&lt;/a&gt;对字符串两边部分隐藏&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 对身份证号和就诊卡号进行部分隐藏 &amp;lt;/br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;pre&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * StringUtils.hidePartString(&lt;span class=&quot;string&quot;&gt;&quot;abcdefghi&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) = ***de****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String hidePartString2(String str, int prefixCount, int suffixCount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (null == str || &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;.equals(str)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int length = str.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (length &amp;lt;= (prefixCount + suffixCount))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String temp1 = str.substring(prefixCount, length - suffixCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String temp2 = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, temp3 = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; prefixCount; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		temp2 += &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; suffixCount; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		temp3 += &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; temp2 + temp1 + temp3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;对-properties文件的加载解析&quot;&gt;&lt;a href=&quot;#对-properties文件的加载解析&quot; class=&quot;headerlink&quot; title=&quot;对.properties文件的加载解析&quot;&gt;&lt;/a&gt;对.properties文件的加载解析&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// msgId 为键值对的key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String getMessage(String msgId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String resourcePath = &lt;span class=&quot;string&quot;&gt;&quot;/assets/FailureMessage.properties&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Properties pro = new Properties();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pro.load(CommonUtils.class.getResourceAsStream(resourcePath));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; pro.getProperty(msgId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;得到所有进程Task最上面的Activity&quot;&gt;&lt;a href=&quot;#得到所有进程Task最上面的Activity&quot; class=&quot;headerlink&quot; title=&quot;得到所有进程Task最上面的Activity&quot;&gt;&lt;/a&gt;得到所有进程Task最上面的Activity&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static String getTopActivity(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	List&amp;lt;RunningTaskInfo&amp;gt; runningTaskInfos = manager.getRunningTasks(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (runningTaskInfos != null)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; runningTaskInfos.get(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).topActivity.getClassName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;获取Html相关内容&quot;&gt;&lt;a href=&quot;#获取Html相关内容&quot; class=&quot;headerlink&quot; title=&quot;获取Html相关内容&quot;&gt;&lt;/a&gt;获取Html相关内容&lt;/h2&gt;&lt;h3 id=&quot;获取Html的title&quot;&gt;&lt;a href=&quot;#获取Html的title&quot; class=&quot;headerlink&quot; title=&quot;获取Html的title&quot;&gt;&lt;/a&gt;获取Html的title&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 通过正则表达式提取&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static final String REG_TITLE       = &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;title&amp;gt;(.+)&amp;lt;/title&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String getTitle(String html) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String str = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Matcher matcher = Pattern.compile(REG_TITLE).matcher(html);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (matcher.find()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        str = matcher.group(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取Html的所欲IMG&quot;&gt;&lt;a href=&quot;#获取Html的所欲IMG&quot; class=&quot;headerlink&quot; title=&quot;获取Html的所欲IMG&quot;&gt;&lt;/a&gt;获取Html的所欲IMG&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static final String REG_IMG         = &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;img.+src=\&quot;(.+)\&quot;.+&amp;gt;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String[] getImgUrl(String html) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String[] str = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Matcher matcher = Pattern.compile(REG_IMG).matcher(html);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (matcher.find()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        str = new String[matcher.groupCount()];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= matcher.groupCount(); i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            str[i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = matcher.group(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取Html的所欲meta&quot;&gt;&lt;a href=&quot;#获取Html的所欲meta&quot; class=&quot;headerlink&quot; title=&quot;获取Html的所欲meta&quot;&gt;&lt;/a&gt;获取Html的所欲meta&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static final String REG_DESCRIPTION = &lt;span class=&quot;string&quot;&gt;&quot;.*&amp;lt;meta name=\&quot;description\&quot; content=\&quot;([^&amp;gt;]+)\&quot;&amp;gt;.*&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String getDescription(String html) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String str = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Matcher matcher = Pattern.compile(REG_DESCRIPTION).matcher(html);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (matcher.find()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        str = matcher.group(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;图片处理框架用法&quot;&gt;&lt;a href=&quot;#图片处理框架用法&quot; class=&quot;headerlink&quot; title=&quot;图片处理框架用法&quot;&gt;&lt;/a&gt;图片处理框架用法&lt;/h2&gt;&lt;h3 id=&quot;ImageLoader-一&quot;&gt;&lt;a href=&quot;#ImageLoader-一&quot; class=&quot;headerlink&quot; title=&quot;ImageLoader(一)&quot;&gt;&lt;/a&gt;ImageLoader(一)&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ImageLoader.getInstance().displayImage(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		imgUrl,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		imageView,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		new DisplayImageOptions.Builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.showImageForEmptyUri(R.drawable.pic_loading_empty)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.showImageOnFail(R.drawable.pic_loading_error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// .displayer(new RoundedBitmapDisplayer(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// .considerExifParams(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				.cacheInMemory(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;).build());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先定义DisplayImageOptions&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static DisplayImageOptions options = new DisplayImageOptions.Builder()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	.showImageForEmptyUri(R.drawable.default_patient)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	.showImageOnFail(R.drawable.default_patient)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	// .displayer(new RoundedBitmapDisplayer(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// .considerExifParams(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	.cacheInMemory(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	.build();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在使用的地方加载并显示&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ImageLoader.getInstance().displayImage(imgUrl, imageView, options);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;ImageLoader-二&quot;&gt;&lt;a href=&quot;#ImageLoader-二&quot; class=&quot;headerlink&quot; title=&quot;ImageLoader(二)&quot;&gt;&lt;/a&gt;ImageLoader(二)&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;先定义&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 第一次显示监听器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static class AnimateFirstDisplayListener extends SimpleImageLoadingListener &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 装imgUrl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static final List&amp;lt;String&amp;gt; displayedImages = Collections.synchronizedList(new LinkedList&amp;lt;String&amp;gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (loadedImage != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ImageView imageView = (ImageView) view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			boolean firstDisplay = !displayedImages.contains(imageUri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (firstDisplay) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				FadeInBitmapDisplayer.animate(imageView, &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				displayedImages.add(imageUri);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;在使用的地方加载并显示&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ImageLoader.getInstance().displayImage(imgUrl,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		imageView, options,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		new AnimateFirstDisplayListener());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;下载网络图片&quot;&gt;&lt;a href=&quot;#下载网络图片&quot; class=&quot;headerlink&quot; title=&quot;下载网络图片&quot;&gt;&lt;/a&gt;下载网络图片&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/** 图片Url保存为位图并进行缩放操作，通过传入图片url获取位图方法 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static Bitmap getNetImage(Context context, String url) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Bitmap mBitmap = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	URL myFileUrl = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		myFileUrl = new URL(url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (MalformedURLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (myFileUrl != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			HttpURLConnection conn = (HttpURLConnection) myFileUrl.openConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			conn.setDoInput(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			conn.connect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			InputStream is = conn.getInputStream();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			mBitmap = BitmapFactory.decodeStream(is);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			is.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mBitmap != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//			DisplayMetrics metrics = new DisplayMetrics();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//			metrics = context.getResources().getDisplayMetrics();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//			int screenWidth = metrics.widthPixels;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//			int screenHeight = metrics.heightPixels;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int bitmapWidth = mBitmap.getWidth();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		int bitmapHeight = mBitmap.getHeight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//			&lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt; scale = ((&lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt;) screenWidth) / bitmapWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Matrix matrix = new Matrix();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//			matrix.postScale(scale, scale);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mBitmap = Bitmap.createBitmap(mBitmap, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, bitmapWidth, bitmapHeight, matrix, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; mBitmap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;手机号码限制&quot;&gt;&lt;a href=&quot;#手机号码限制&quot; class=&quot;headerlink&quot; title=&quot;手机号码限制&quot;&gt;&lt;/a&gt;手机号码限制&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 判别手机是否为正确手机号码； 号码段分配如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 移动：&lt;span class=&quot;number&quot;&gt;134&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;135&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;136&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;137&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;138&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;139&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;151&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;157&lt;/span&gt;(TD)、&lt;span class=&quot;number&quot;&gt;158&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;159&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;187&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;188&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 联通：&lt;span class=&quot;number&quot;&gt;130&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;131&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;132&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;152&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;155&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;156&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;185&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;186&lt;/span&gt; 电信：&lt;span class=&quot;number&quot;&gt;133&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;153&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;180&lt;/span&gt;、&lt;span class=&quot;number&quot;&gt;189&lt;/span&gt;、（&lt;span class=&quot;number&quot;&gt;1349&lt;/span&gt;卫通）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static boolean isMobileNum(String mobiles) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Pattern p1 = Pattern.compile(&lt;span class=&quot;string&quot;&gt;&quot;(\\+[0-9]+[\\- \\.]*)?&quot;&lt;/span&gt; // +&amp;lt;digits&amp;gt;&amp;lt;sdd&amp;gt;*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			+ &lt;span class=&quot;string&quot;&gt;&quot;(\\([0-9]+\\)[\\- \\.]*)?&quot;&lt;/span&gt; // (&amp;lt;digits&amp;gt;)&amp;lt;sdd&amp;gt;*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			+ &lt;span class=&quot;string&quot;&gt;&quot;([0-9][0-9\\- \\.][0-9\\- \\.]+[0-9])&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// Pattern p = Pattern.compile(&lt;span class=&quot;string&quot;&gt;&quot;^((13[0-9])|(15[^4,//D])|(18[0,5-9]))//d&amp;#123;8&amp;#125;$&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Matcher m = p1.matcher(mobiles);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; m.matches();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static boolean isMobileNum2(String num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String str = &lt;span class=&quot;string&quot;&gt;&quot;^((13[0-9])|(15[0-9])|(18[0-9])|(145)|(147))\\d&amp;#123;8&amp;#125;$&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Pattern p = Pattern.compile(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Matcher m = p.matcher(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; m.matches();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;蓝牙Bluetooth&quot;&gt;&lt;a href=&quot;#蓝牙Bluetooth&quot; class=&quot;headerlink&quot; title=&quot;蓝牙Bluetooth&quot;&gt;&lt;/a&gt;蓝牙Bluetooth&lt;/h2&gt;&lt;p&gt;Android 中打开 Bluetooth：有以下三种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;强制打开&lt;/li&gt;
&lt;li&gt;调用系统弹出框提示用户打开&lt;/li&gt;
&lt;li&gt;跳转到系统设置中让用户自己打开&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;获取BluetoothAdapter&quot;&gt;&lt;a href=&quot;#获取BluetoothAdapter&quot; class=&quot;headerlink&quot; title=&quot;获取BluetoothAdapter&quot;&gt;&lt;/a&gt;获取BluetoothAdapter&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static BluetoothAdapter &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getBluetoothAdapter&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; BluetoothAdapter.getDefaultAdapter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;当前-Android-设备是否支持-Bluetooth&quot;&gt;&lt;a href=&quot;#当前-Android-设备是否支持-Bluetooth&quot; class=&quot;headerlink&quot; title=&quot;当前 Android 设备是否支持 Bluetooth&quot;&gt;&lt;/a&gt;当前 Android 设备是否支持 Bluetooth&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;：支持 Bluetooth &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;：不支持 Bluetooth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static boolean &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isBluetoothSupported&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; BluetoothAdapter.getDefaultAdapter() != null ? &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;当前-Android-设备的-bluetooth-是否已经开启&quot;&gt;&lt;a href=&quot;#当前-Android-设备的-bluetooth-是否已经开启&quot; class=&quot;headerlink&quot; title=&quot;当前 Android 设备的 bluetooth 是否已经开启&quot;&gt;&lt;/a&gt;当前 Android 设备的 bluetooth 是否已经开启&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/** 没有直接的用户的允许绝不要开启 Bluetooth。如果你想要打开 Bluetooth 创建一个无线连接，你应当使用 ACTION_REQUEST_ENABLE Intent，这样会弹出一个提示框提示用户是否开启 Bluetooth，&lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;() 方法仅提供给有 UI 、更改系统设置的应用来使用，例如“电源管理”应用。 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static boolean &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isBluetoothEnabled&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bluetoothAdapter != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; bluetoothAdapter.isEnabled();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;强制打开&quot;&gt;&lt;a href=&quot;#强制打开&quot; class=&quot;headerlink&quot; title=&quot;强制打开&quot;&gt;&lt;/a&gt;强制打开&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 强制开启当前 Android 设备的 Bluetooth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static boolean &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;turnOnBluetooth&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bluetoothAdapter != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; bluetoothAdapter.enable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;调用系统弹出框提示用户打开&quot;&gt;&lt;a href=&quot;#调用系统弹出框提示用户打开&quot; class=&quot;headerlink&quot; title=&quot;调用系统弹出框提示用户打开&quot;&gt;&lt;/a&gt;调用系统弹出框提示用户打开&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 弹出系统弹框提示用户打开 Bluetooth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static void openBluetooth(Activity activity) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 请求打开 Bluetooth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Intent &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;BtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;BtIntent.setAction(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;BtIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, BLUETOOTH_DISCOVERABLE_DURATION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 设置 Bluetooth 设备可以被其它 Bluetooth 设备扫描到&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 打开本机的蓝牙发现功能（默认打开&lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;秒，可以将时间最多延长至&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;秒）  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Intent discoveryIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 设置 Bluetooth 设备可见时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // discoveryIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;);//设置持续时间（最多&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;秒）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    activity.startActivityForResult(&lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt;BtIntent, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;强制关闭&quot;&gt;&lt;a href=&quot;#强制关闭&quot; class=&quot;headerlink&quot; title=&quot;强制关闭&quot;&gt;&lt;/a&gt;强制关闭&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BluetoothAdapter.getDefaultAdapter().disable();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;蓝牙是否打开&quot;&gt;&lt;a href=&quot;#蓝牙是否打开&quot; class=&quot;headerlink&quot; title=&quot;蓝牙是否打开&quot;&gt;&lt;/a&gt;蓝牙是否打开&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BluetoothAdapter.getDefaultAdapter().isEnabled();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;获取以配对的蓝牙设备&quot;&gt;&lt;a href=&quot;#获取以配对的蓝牙设备&quot; class=&quot;headerlink&quot; title=&quot;获取以配对的蓝牙设备&quot;&gt;&lt;/a&gt;获取以配对的蓝牙设备&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 首次连接某蓝牙设备需要先配对，一旦配对成功，该设备的信息会被保存，以后连接时无需再配对，但是已配对的设备不一定是能连接的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set&amp;lt;BluetoothDevice&amp;gt; devices = BluetoothAdapter.getDefaultAdapter().getBondedDevices();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;蓝牙广播接收器&quot;&gt;&lt;a href=&quot;#蓝牙广播接收器&quot; class=&quot;headerlink&quot; title=&quot;蓝牙广播接收器&quot;&gt;&lt;/a&gt;蓝牙广播接收器&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public BroadcastReceiver receiver = new &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;BroadcastReceiver&lt;/span&gt;&lt;/span&gt;() &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onReceive(Context context, Intent intent) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	String action = intent.getAction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.i(&lt;span class=&quot;string&quot;&gt;&quot;XC&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;---:---&quot;&lt;/span&gt; + action);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(BluetoothDevice.ACTION_FOUND.equals(action)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(&lt;span class=&quot;string&quot;&gt;&quot;XC&quot;&lt;/span&gt;, device.getName() + &lt;span class=&quot;string&quot;&gt;&quot;ACTION_FOUND&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Toast.makeText(context, device.getName() + &lt;span class=&quot;string&quot;&gt;&quot; 发现设备&quot;&lt;/span&gt;, Toast.LENGTH_LONG).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (BluetoothDevice.ACTION_ACL_CONNECTED.equals(action)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(&lt;span class=&quot;string&quot;&gt;&quot;XC&quot;&lt;/span&gt;, device.getName() + &lt;span class=&quot;string&quot;&gt;&quot;ACTION_ACL_CONNECTED&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Toast.makeText(context, device.getName() + &lt;span class=&quot;string&quot;&gt;&quot;该设备已连接&quot;&lt;/span&gt;, Toast.LENGTH_LONG).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            intent.putExtra(&lt;span class=&quot;string&quot;&gt;&quot;Bluetooth&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;btMessage&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            intent.setClass(context, OrderDetailsActivity.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            context.startActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (BluetoothDevice.ACTION_ACL_DISCONNECT_REQUESTED.equals(action)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(&lt;span class=&quot;string&quot;&gt;&quot;XC&quot;&lt;/span&gt;, device.getName() + &lt;span class=&quot;string&quot;&gt;&quot;ACTION_ACL_DISCONNECT_REQUESTED&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Toast.makeText(context, device.getName() + &lt;span class=&quot;string&quot;&gt;&quot;该设备断开连接2&quot;&lt;/span&gt;, Toast.LENGTH_LONG).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (BluetoothDevice.ACTION_ACL_DISCONNECTED.equals(action)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(&lt;span class=&quot;string&quot;&gt;&quot;XC&quot;&lt;/span&gt;, device.getName() + &lt;span class=&quot;string&quot;&gt;&quot;ACTION_ACL_DISCONNECTED&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Toast.makeText(context, device.getName() + &lt;span class=&quot;string&quot;&gt;&quot;该设备断开连接1&quot;&lt;/span&gt;, Toast.LENGTH_LONG).show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getBluetoothAdapter().getState() == BluetoothAdapter.STATE_ON) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        		Log.i(&lt;span class=&quot;string&quot;&gt;&quot;XC&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;蓝牙打开&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getBluetoothAdapter().getState() == BluetoothAdapter.STATE_OFF) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            	Log.i(&lt;span class=&quot;string&quot;&gt;&quot;XC&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;蓝牙关闭&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 注册蓝牙监听广播&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void initIntentFilter(Context context) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 设置广播信息过滤    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IntentFilter intentFilter = new IntentFilter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intentFilter.addAction(BluetoothDevice.ACTION_FOUND);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intentFilter.addAction(BluetoothDevice.ACTION_ACL_CONNECTED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intentFilter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECT_REQUESTED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intentFilter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    intentFilter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 注册广播接收器，接收并处理搜索结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context.registerReceiver(receiver, intentFilter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 取消注册蓝牙监听广播&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void unregisterReceiver(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	context.unregisterReceiver(receiver);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;音视频&quot;&gt;&lt;a href=&quot;#音视频&quot; class=&quot;headerlink&quot; title=&quot;音视频&quot;&gt;&lt;/a&gt;音视频&lt;/h2&gt;&lt;h3 id=&quot;声音处理&quot;&gt;&lt;a href=&quot;#声音处理&quot; class=&quot;headerlink&quot; title=&quot;声音处理&quot;&gt;&lt;/a&gt;声音处理&lt;/h3&gt;&lt;h4 id=&quot;播放系统-ogg文件&quot;&gt;&lt;a href=&quot;#播放系统-ogg文件&quot; class=&quot;headerlink&quot; title=&quot;播放系统.ogg文件&quot;&gt;&lt;/a&gt;播放系统.ogg文件&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 需要注意的是，如果MediaPlayer实例是由create方法创建的，那么第一次启动播放前不需要再调用prepare（）了，因为create方法里已经调用过了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void playOgg(Context context, int resid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 按键声音播放设置及初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	boolean mDTMFToneEnabled = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;         // 系统参数“按键操作音”标志位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 获取系统参数“按键操作音”是否开启(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:开,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:关)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mDTMFToneEnabled = Settings.System.getInt(context.getContentResolver(), Settings.System.DTMF_TONE_WHEN_DIALING, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;系统按键操作音是否开启&quot;&lt;/span&gt; + mDTMFToneEnabled);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		synchronized (mToneGeneratorLock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mDTMFToneEnabled) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// “按键操作音”是否开启的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 Log.d(TAG, e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 mDTMFToneEnabled = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mediaPlayer == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mediaPlayer = MediaPlayer.create(context, resid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;mediaPlayer=&quot;&lt;/span&gt; + mediaPlayer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 播放&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	play();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 播放&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;play&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mediaPlayer.setVolume(BEEP_VOLUME, BEEP_VOLUME);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mediaPlayer.setOnPreparedListener(preparedListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mediaPlayer.setOnErrorListener(errorListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 当MediaPlayer调用seek()方法时触发该监听器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//			mediaPlayer.setOnSeekCompleteListener(seekCompleteListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// Media Player的播放完成事件绑定事件监听器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// When the beep has finished playing, rewind to queue up another one.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mediaPlayer.setOnCompletionListener(conpletionListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; catch (Exception  e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 监听资源是否准备好&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OnPreparedListener preparedListener = new &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;OnPreparedListener&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void onPrepared(MediaPlayer mp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;onPrepared---&amp;gt;start()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 启动文件播放的方法，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mediaPlayer.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 定位方法，可以让播放器从指定的位置开始播放,注意的是该方法是个异步方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//			mp.seekTo(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 监听播放是否seekTo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OnSeekCompleteListener seekCompleteListener = new &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;OnSeekCompleteListener&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void onSeekComplete(MediaPlayer mp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;onSeekComplete&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 监听播放是否完成&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OnCompletionListener conpletionListener = new &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;OnCompletionListener&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void onCompletion(MediaPlayer mp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;onCompletion&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mediaPlayer.release();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mediaPlayer = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 监听播放是否异常&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OnErrorListener errorListener = new &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;OnErrorListener&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public boolean onError(MediaPlayer mp, int what, int extra) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Log.i(TAG, &lt;span class=&quot;string&quot;&gt;&quot;onError&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mediaPlayer.release();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mediaPlayer = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;密码格式是否正确&quot;&gt;&lt;a href=&quot;#密码格式是否正确&quot; class=&quot;headerlink&quot; title=&quot;密码格式是否正确&quot;&gt;&lt;/a&gt;密码格式是否正确&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;8到10位并且包含字母和数字&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;boolean isTrue = Pattern.compile(&lt;span class=&quot;string&quot;&gt;&quot;^(?=.*[0-9])(?=.*[a-zA-Z]).&amp;#123;8,10&amp;#125;$&quot;&lt;/span&gt;).matcher(pass).matches();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;8到10位数字&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;boolean isTrue = Pattern.compile(&lt;span class=&quot;string&quot;&gt;&quot;^(?=.*[0-9]).&amp;#123;8,10&amp;#125;$&quot;&lt;/span&gt;).matcher(pass).matches();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;小数处理&quot;&gt;&lt;a href=&quot;#小数处理&quot; class=&quot;headerlink&quot; title=&quot;小数处理&quot;&gt;&lt;/a&gt;小数处理&lt;/h2&gt;&lt;h3 id=&quot;计算百分比&quot;&gt;&lt;a href=&quot;#计算百分比&quot; class=&quot;headerlink&quot; title=&quot;计算百分比&quot;&gt;&lt;/a&gt;计算百分比&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 计算百分比&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param num 当前数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param total 总和&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param scale 精确几位小数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String percent(double num, double total, int scale) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DecimalFormat df = (DecimalFormat) NumberFormat.getInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 可以设置精确几位小数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    df.setMaximumFractionDigits(scale);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 模式 例如四舍五入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    df.setRoundingMode(RoundingMode.HALF_UP);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    double accuracy_num = num / total * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; df.format(accuracy_num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;按pattern格式化小数&quot;&gt;&lt;a href=&quot;#按pattern格式化小数&quot; class=&quot;headerlink&quot; title=&quot;按pattern格式化小数&quot;&gt;&lt;/a&gt;按pattern格式化小数&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 按pattern格式化小数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param value 小数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param pattern 格式化类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static String formatDecimal(double value, String pattern) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DecimalFormat df = (DecimalFormat) NumberFormat.getInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 数值类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	df.applyPattern(pattern);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 模式 例如四舍五入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	df.setRoundingMode(RoundingMode.HALF_UP);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; df.format(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 通过下面调用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;formatDecimal(value, &lt;span class=&quot;string&quot;&gt;&quot;0.00&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;程序是否在前台运行&quot;&gt;&lt;a href=&quot;#程序是否在前台运行&quot; class=&quot;headerlink&quot; title=&quot;程序是否在前台运行&quot;&gt;&lt;/a&gt;程序是否在前台运行&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public boolean isAppOnForeground(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// Returns a list of application processes that are running on the device&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ActivityManager activityManager = (ActivityManager) context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			.getApplicationContext().getSystemService(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Context.ACTIVITY_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String packageName = context.getApplicationContext().getPackageName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	List&amp;lt;RunningAppProcessInfo&amp;gt; appProcesses = activityManager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			.getRunningAppProcesses();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (appProcesses == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (RunningAppProcessInfo appProcess : appProcesses) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// The name of the process that this object is associated with.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (appProcess.processName.equals(packageName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;amp;&amp;amp; appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;关闭软键盘&quot;&gt;&lt;a href=&quot;#关闭软键盘&quot; class=&quot;headerlink&quot; title=&quot;关闭软键盘&quot;&gt;&lt;/a&gt;关闭软键盘&lt;/h2&gt;&lt;h3 id=&quot;软键盘-一&quot;&gt;&lt;a href=&quot;#软键盘-一&quot; class=&quot;headerlink&quot; title=&quot;软键盘(一)&quot;&gt;&lt;/a&gt;软键盘(一)&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 切换输入法的显示和隐藏状态，这里做了判断，所以默认情况下只能够隐藏键盘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 这个是让输入法状态发生逆转，如果当前未显示则显示出来。如果显示出来，则隐藏。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;hideSoftKeyboard&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	InputMethodManager mInputMethodManager = (InputMethodManager) FrameworkController.getInstance()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			.getSystemService(Context.INPUT_METHOD_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mInputMethodManager.isActive()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mInputMethodManager.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, InputMethodManager.HIDE_NOT_ALWAYS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;软键盘-二&quot;&gt;&lt;a href=&quot;#软键盘-二&quot; class=&quot;headerlink&quot; title=&quot;软键盘(二)&quot;&gt;&lt;/a&gt;软键盘(二)&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 隐藏android键盘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * imm.hideSoftInputFromInputMethod(getActivity().getCurrentFocus().getWindowToken(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 这个经本人在android4.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;机子上测试无效。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param view   为EditText（passwdEdit）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Deprecated&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static void hideSoftKeyboard2(View view) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	InputMethodManager mInputMethodManager = (InputMethodManager) FrameworkController.getInstance()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			.getSystemService(Context.INPUT_METHOD_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (null != view) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mInputMethodManager.hideSoftInputFromInputMethod(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;软键盘-三&quot;&gt;&lt;a href=&quot;#软键盘-三&quot; class=&quot;headerlink&quot; title=&quot;软键盘(三)&quot;&gt;&lt;/a&gt;软键盘(三)&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 影藏软键盘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * mInputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 经过测试，这是唯一有效的方法！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param view   编辑的EditText&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static void hideSoftKeyboard3(View view) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	InputMethodManager mInputMethodManager = (InputMethodManager) FrameworkController.getInstance()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			.getSystemService(Context.INPUT_METHOD_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (null != view) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mInputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;改变透明度&quot;&gt;&lt;a href=&quot;#改变透明度&quot; class=&quot;headerlink&quot; title=&quot;改变透明度&quot;&gt;&lt;/a&gt;改变透明度&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 设置添加屏幕的背景透明度 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param activity 当前Activity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param &lt;span class=&quot;built_in&quot;&gt;bg&lt;/span&gt;Alpha 透明度值&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static void backgroundAlpha(Activity activity, &lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;bg&lt;/span&gt;Alpha) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WindowManager.LayoutParams lp = activity.getWindow().getAttributes();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    lp.alpha = &lt;span class=&quot;built_in&quot;&gt;bg&lt;/span&gt;Alpha; //&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    activity.getWindow().setAttributes(lp);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;获取每个应用程序最高可用内存&quot;&gt;&lt;a href=&quot;#获取每个应用程序最高可用内存&quot; class=&quot;headerlink&quot; title=&quot;获取每个应用程序最高可用内存&quot;&gt;&lt;/a&gt;获取每个应用程序最高可用内存&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 可以通过以下代码获取当前应用程序最高可用内存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int maxMemory = (int) (Runtime.getRuntime().maxMemory() / &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Log.d(&lt;span class=&quot;string&quot;&gt;&quot;TAG&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Max memory is &quot;&lt;/span&gt; + maxMemory + &lt;span class=&quot;string&quot;&gt;&quot;kb&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在工作中突然发现以前多么熟悉的知识技能现在不能愉快的玩耍了，想要再次使用以前的一些知识还得Google，这是一件多么伤心的事啊。这些天比较闲，打算把最近用到的小知识总结下，这里会持续更新。还是应了那句话，“知识在于积累”。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://xiaoqianchang.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="http://xiaoqianchang.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java enum的使用</title>
    <link href="http://xiaoqianchang.github.io/2016/03/09/java-enum/"/>
    <id>http://xiaoqianchang.github.io/2016/03/09/java-enum/</id>
    <published>2016-03-09T05:03:46.000Z</published>
    <updated>2016-03-28T09:01:32.438Z</updated>
    
    <content type="html">&lt;p&gt;之前学Java很少用到枚举，但是会经常看到别人代码中有枚举，然后进行学习。现在想再复习下枚举，今天简单总结下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Java的Enum枚举类型是在JDK1.5引入的，在 Java 中它虽然算个“小”功能，却给我的开发带来了“大”方便。&lt;/p&gt;
&lt;h2 id=&quot;简单学习&quot;&gt;&lt;a href=&quot;#简单学习&quot; class=&quot;headerlink&quot; title=&quot;简单学习&quot;&gt;&lt;/a&gt;简单学习&lt;/h2&gt;&lt;h3 id=&quot;知识的了解&quot;&gt;&lt;a href=&quot;#知识的了解&quot; class=&quot;headerlink&quot; title=&quot;知识的了解&quot;&gt;&lt;/a&gt;知识的了解&lt;/h3&gt;&lt;p&gt;定义枚举类型其实就是在定义一个类，只不过很多细节由编译器帮你补齐了，所以，某种程度上enum关键词的作用就像是class或interface.&lt;/p&gt;
&lt;p&gt;当使用enum定义枚举类型时，实际上所定义出来的类型是继承自java.lang.Enum类。而每个被枚举的成员其实就是定义的枚举类型的一个实例，它们都被默认为public、static和final，这与接口中的常量限制相同，可以通过类名称直接使用它们。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public enum Light &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 利用构造函数传参&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	RED(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), GREEN(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), YELLOW(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 定义私有变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private int nCode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 构造函数，枚举类型只能为私有&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private Light(int _nCode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		this.nCode = _nCode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; String.valueOf(this.nCode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上面的例子所定义的枚举类型Light,RED,GREEN,YELLOW都是Light的一个对象实例。因为是对象，所以，对象上自然有一些方法可以调用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;values()方法可以让您取得所有的枚举成员实例，并以数组方式返回。您可以使用这两个方法来简单的将Color的枚举成员显示出来。&lt;/li&gt;
&lt;li&gt;静态valueOf()方法可以让您将指定的字符串尝试转换为枚举类型。&lt;/li&gt;
&lt;li&gt;可以用compareTo()方法来比较两个枚举对象在枚举时的顺序。-1之前，0位置相同，1之后。&lt;/li&gt;
&lt;li&gt;对于每个枚举成员，使用ordinal()方法，依枚举顺序得到位置索引，默认以0开始。&lt;/li&gt;
&lt;li&gt;从Object继承的toString()方法被重新定义了，可以让你直接取得枚举值的字符串描述；&lt;br&gt;如果重写toStirng方法，&lt;br&gt;&lt;code&gt;for (Light aLight : Light.values()) {}&lt;/code&gt;遍历后aLight值为&lt;code&gt;1、3、2&lt;/code&gt;，aLight.name()为RED, GREEN, YELLOW，aLight.ordinal()为0、1、2&lt;br&gt;否则aLight的值为&lt;code&gt;RED, GREEN, YELLOW&lt;/code&gt;，aLight.name()为RED, GREEN, YELLOW，aLight.ordinal()为0、1、2&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;七种常见用法&quot;&gt;&lt;a href=&quot;#七种常见用法&quot; class=&quot;headerlink&quot; title=&quot;七种常见用法&quot;&gt;&lt;/a&gt;七种常见用法&lt;/h2&gt;&lt;h3 id=&quot;用法一：常量&quot;&gt;&lt;a href=&quot;#用法一：常量&quot; class=&quot;headerlink&quot; title=&quot;用法一：常量&quot;&gt;&lt;/a&gt;用法一：常量&lt;/h3&gt;&lt;p&gt;在JDK1.5 之前，我们定义常量都是： public static fianl…. 。现在好了，有了枚举，可以把相关的常量分组到一个枚举类型里，而且枚举提供了比常量更多的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public enum Color &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RED, GREEN, BLANK, YELLOW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;用法二：switch&quot;&gt;&lt;a href=&quot;#用法二：switch&quot; class=&quot;headerlink&quot; title=&quot;用法二：switch&quot;&gt;&lt;/a&gt;用法二：switch&lt;/h3&gt;&lt;p&gt;JDK1.6之前的switch语句只支持int,char,enum类型，使用枚举，能让我们的代码可读性更强。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;enum Signal &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GREEN, YELLOW, RED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class TrafficLight &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Signal color = Signal.RED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;change&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        switch (color) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; RED:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            color = Signal.GREEN;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; YELLOW:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            color = Signal.RED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; GREEN:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            color = Signal.YELLOW;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;用法三：向枚举中添加新方法&quot;&gt;&lt;a href=&quot;#用法三：向枚举中添加新方法&quot; class=&quot;headerlink&quot; title=&quot;用法三：向枚举中添加新方法&quot;&gt;&lt;/a&gt;用法三：向枚举中添加新方法&lt;/h3&gt;&lt;p&gt;如果打算自定义自己的方法，那么必须在enum实例序列的最后添加一个分号。而且 Java 要求必须先定义 enum实例。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public enum Color &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RED(&lt;span class=&quot;string&quot;&gt;&quot;红色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), GREEN(&lt;span class=&quot;string&quot;&gt;&quot;绿色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), BLANK(&lt;span class=&quot;string&quot;&gt;&quot;白色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), YELLO(&lt;span class=&quot;string&quot;&gt;&quot;黄色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 成员变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private int index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 构造方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Color(String name, int index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.index = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 普通方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static String getName(int index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Color c : Color.values()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c.getIndex() == index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; c.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // get &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; 方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Name(String name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public int &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getIndex&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Index(int index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.index = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;用法四：覆盖枚举的方法&quot;&gt;&lt;a href=&quot;#用法四：覆盖枚举的方法&quot; class=&quot;headerlink&quot; title=&quot;用法四：覆盖枚举的方法&quot;&gt;&lt;/a&gt;用法四：覆盖枚举的方法&lt;/h3&gt;&lt;p&gt;下面给出一个toString()方法覆盖的例子。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public enum Color &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RED(&lt;span class=&quot;string&quot;&gt;&quot;红色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), GREEN(&lt;span class=&quot;string&quot;&gt;&quot;绿色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), BLANK(&lt;span class=&quot;string&quot;&gt;&quot;白色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), YELLO(&lt;span class=&quot;string&quot;&gt;&quot;黄色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 成员变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private int index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 构造方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Color(String name, int index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.index = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //覆盖方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; this.index+&lt;span class=&quot;string&quot;&gt;&quot;_&quot;&lt;/span&gt;+this.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;用法五：实现接口&quot;&gt;&lt;a href=&quot;#用法五：实现接口&quot; class=&quot;headerlink&quot; title=&quot;用法五：实现接口&quot;&gt;&lt;/a&gt;用法五：实现接口&lt;/h3&gt;&lt;p&gt;所有的枚举都继承自java.lang.Enum类。由于Java 不支持多继承，所以枚举对象不能再继承其他类。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface Behaviour &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String getInfo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public enum Color implements Behaviour&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RED(&lt;span class=&quot;string&quot;&gt;&quot;红色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), GREEN(&lt;span class=&quot;string&quot;&gt;&quot;绿色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), BLANK(&lt;span class=&quot;string&quot;&gt;&quot;白色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), YELLO(&lt;span class=&quot;string&quot;&gt;&quot;黄色&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 成员变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private int index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 构造方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Color(String name, int index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.index = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //接口方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getInfo&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; this.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //接口方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(this.index+&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;+this.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;用法六：使用接口组织枚举&quot;&gt;&lt;a href=&quot;#用法六：使用接口组织枚举&quot; class=&quot;headerlink&quot; title=&quot;用法六：使用接口组织枚举&quot;&gt;&lt;/a&gt;用法六：使用接口组织枚举&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface Food &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enum Coffee implements Food&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BLACK_COFFEE,DECAF_COFFEE,LATTE,CAPPUCCINO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    enum Dessert implements Food&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FRUIT, CAKE, GELATO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;用法七：关于枚举集合的使用&quot;&gt;&lt;a href=&quot;#用法七：关于枚举集合的使用&quot; class=&quot;headerlink&quot; title=&quot;用法七：关于枚举集合的使用&quot;&gt;&lt;/a&gt;用法七：关于枚举集合的使用&lt;/h3&gt;&lt;p&gt;java.util.EnumSet和java.util.EnumMap是两个枚举集合。EnumSet保证集合中的元素不重复；EnumMap中的key是enum类型，而value则可以是任意类型。关于这个两个集合的使用就不在这里赘述，可以查看最上面的例子以及参考JDK文档。&lt;/p&gt;
&lt;h2 id=&quot;枚举和常量定义的区别&quot;&gt;&lt;a href=&quot;#枚举和常量定义的区别&quot; class=&quot;headerlink&quot; title=&quot;枚举和常量定义的区别&quot;&gt;&lt;/a&gt;枚举和常量定义的区别&lt;/h2&gt;&lt;h3 id=&quot;一、-通常定义常量方法&quot;&gt;&lt;a href=&quot;#一、-通常定义常量方法&quot; class=&quot;headerlink&quot; title=&quot;一、 通常定义常量方法&quot;&gt;&lt;/a&gt;一、 通常定义常量方法&lt;/h3&gt;&lt;p&gt;我们通常利用public final static方法定义的代码如下，分别用1表示红灯，3表示绿灯，2表示黄灯。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Light &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /* 红灯 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static int RED = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /* 绿灯 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static int GREEN = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /* 黄灯 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static int YELLOW = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;二、-枚举类型定义常量方法&quot;&gt;&lt;a href=&quot;#二、-枚举类型定义常量方法&quot; class=&quot;headerlink&quot; title=&quot;二、 枚举类型定义常量方法&quot;&gt;&lt;/a&gt;二、 枚举类型定义常量方法&lt;/h3&gt;&lt;p&gt;枚举类型的简单定义方法如下，我们似乎没办法定义每个枚举类型的值。比如我们定义红灯、绿灯和黄灯的代码可能如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public enum Light &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RED, GREEN, YELLOW;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们只能够表示出红灯、绿灯和黄灯，但是具体的值我们没办法表示出来。别急，既然枚举类型提供了构造函数，我们可以通过构造函数和覆写toString方法来实现。首先给Light枚举类型增加构造方法，然后每个枚举类型的值通过构造函数传入对应的参数，同时覆写toString方法，在该方法中返回从构造函数中传入的参数，改造后的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public enum Light &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 利用构造函数传参&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RED(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), GREEN(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), YELLOW(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 定义私有变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private int nCode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 构造函数，枚举类型只能为私有&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Light(int _nCode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.nCode = _nCode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; String.valueOf(this.nCode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;三、-完整示例代码&quot;&gt;&lt;a href=&quot;#三、-完整示例代码&quot; class=&quot;headerlink&quot; title=&quot;三、 完整示例代码&quot;&gt;&lt;/a&gt;三、 完整示例代码&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;枚举类型的完整演示代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import java.util.EnumMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.util.EnumSet;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class LightTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.定义枚举类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public enum Light &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 利用构造函数传参&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		RED(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), GREEN(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;), YELLOW(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 定义私有变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private int nCode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// 构造函数，枚举类型只能为私有&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private Light(int _nCode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			this.nCode = _nCode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public String &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; String.valueOf(this.nCode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * @param args&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.遍历枚举类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;演示枚举类型的遍历 ......&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;TraversalEnum();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.演示EnumMap对象的使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;演示EnmuMap对象的使用和遍历.....&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;EnumMap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;.演示EnmuSet的使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;演示EnmuSet对象的使用和遍历.....&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;EnumSet();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 演示枚举类型的遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;testTraversalEnum&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Light[] allLight = Light.values();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Light aLight : allLight) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;当前灯name：&quot;&lt;/span&gt; + aLight.name());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;当前灯ordinal：&quot;&lt;/span&gt; + aLight.ordinal());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;当前灯：&quot;&lt;/span&gt; + aLight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 演示EnumMap的使用，EnumMap跟HashMap的使用差不多，只不过key要是枚举类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;testEnumMap&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.演示定义EnumMap对象，EnumMap对象的构造函数需要参数传入,默认是key的类的类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		EnumMap&amp;lt;Light, String&amp;gt; currEnumMap = new EnumMap&amp;lt;Light, String&amp;gt;(Light.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		currEnumMap.put(Light.RED, &lt;span class=&quot;string&quot;&gt;&quot;红灯&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		currEnumMap.put(Light.GREEN, &lt;span class=&quot;string&quot;&gt;&quot;绿灯&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		currEnumMap.put(Light.YELLOW, &lt;span class=&quot;string&quot;&gt;&quot;黄灯&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.遍历对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Light aLight : Light.values()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;[key=&quot;&lt;/span&gt; + aLight.name() + &lt;span class=&quot;string&quot;&gt;&quot;,value=&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			+ currEnumMap.get(aLight) + &lt;span class=&quot;string&quot;&gt;&quot;]&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 演示EnumSet如何使用，EnumSet是一个抽象类，获取一个类型的枚举类型内容&amp;lt;BR/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 * 可以使用allOf方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private static void &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;testEnumSet&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		EnumSet&amp;lt;Light&amp;gt; currEnumSet = EnumSet.allOf(Light.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Light aLightSetElement : currEnumSet) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;当前EnumSet中数据为：&quot;&lt;/span&gt; + aLightSetElement);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;执行结果如下：&lt;/strong&gt;&lt;br&gt;演示枚举类型的遍历 ……&lt;br&gt;当前灯name：RED&lt;br&gt;当前灯ordinal：0&lt;br&gt;当前灯：1&lt;br&gt;当前灯name：GREEN&lt;br&gt;当前灯ordinal：1&lt;br&gt;当前灯：3&lt;br&gt;当前灯name：YELLOW&lt;br&gt;当前灯ordinal：2&lt;br&gt;当前灯：2&lt;br&gt;演示EnmuMap对象的使用和遍历…..&lt;br&gt;[key=RED,value=红灯]&lt;br&gt;[key=GREEN,value=绿灯]&lt;br&gt;[key=YELLOW,value=黄灯]&lt;br&gt;演示EnmuSet对象的使用和遍历…..&lt;br&gt;当前EnumSet中数据为：1&lt;br&gt;当前EnumSet中数据为：3&lt;br&gt;当前EnumSet中数据为：2&lt;/p&gt;
&lt;h3 id=&quot;四、-正常定义常量方法和枚举定义常量方法的区别&quot;&gt;&lt;a href=&quot;#四、-正常定义常量方法和枚举定义常量方法的区别&quot; class=&quot;headerlink&quot; title=&quot;四、 正常定义常量方法和枚举定义常量方法的区别&quot;&gt;&lt;/a&gt;四、 正常定义常量方法和枚举定义常量方法的区别&lt;/h3&gt;&lt;p&gt;以下内容可能有些无聊，但绝对值得一窥&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class State &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static final int ON = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static final Int OFF= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有什么不好了，大家都这样用了很长时间了，没什么问题啊。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先它不是类型安全的。你必须确保是int；其次，你还要确保它的范围是0和1；最后，很多时候你打印出来的时候，你只看到1和0，但其没有看到代码的人并不知道你的企图。&lt;/li&gt;
&lt;li&gt;可以创建一个enum类，把它看做一个普通的类。除了它不能继承其他类了。(java是单继承，它已经继承了Enum)，可以添加其他方法，覆盖它本身的方法。&lt;/li&gt;
&lt;li&gt;JDK1.7后switch()参数可以使用enum了。&lt;/li&gt;
&lt;li&gt;values()方法是编译器插入到enum定义中的static方法，所以，当你将enum实例向上转型为父类Enum是，values()就不可访问了。解决办法：在Class中有一个getEnumConstants()方法，所以即便Enum接口中没有values()方法，我们仍然可以通过Class对象取得所有的enum实例。&lt;/li&gt;
&lt;li&gt;无法从enum继承子类，如果需要扩展enum中的元素，可以在一个接口的内部，创建实现该接口的枚举，达到将枚举元素进行分组。&lt;/li&gt;
&lt;li&gt;使用EnumSet代替标志。enum要求其成员都是唯一的，但是enum中不能删除添加元素。&lt;/li&gt;
&lt;li&gt;EnumMap的key是enum，value是任何其他Object对象。&lt;/li&gt;
&lt;li&gt;enum允许程序员为eunm实例编写方法。所以可以为每个enum实例赋予各自不同的行为。&lt;/li&gt;
&lt;li&gt;使用enum的职责链(Chain of Responsibility) .这个关系到设计模式的职责链模式。以多种不同的方法来解决一个问题。然后将他们链接在一起。当一个请求到来时，遍历这个链，直到链中的某个解决方案能够处理该请求。&lt;/li&gt;
&lt;li&gt;使用enum的状态机。&lt;/li&gt;
&lt;li&gt;使用enum多路分发。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://xyiyy.iteye.com/blog/359663/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java枚举类型的使用&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前学Java很少用到枚举，但是会经常看到别人代码中有枚举，然后进行学习。现在想再复习下枚举，今天简单总结下。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://xiaoqianchang.github.io/tags/Java/"/>
    
      <category term="enum" scheme="http://xiaoqianchang.github.io/tags/enum/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio删除工程</title>
    <link href="http://xiaoqianchang.github.io/2016/03/08/Android-Studio-delete-project/"/>
    <id>http://xiaoqianchang.github.io/2016/03/08/Android-Studio-delete-project/</id>
    <published>2016-03-08T02:52:13.000Z</published>
    <updated>2016-03-28T09:00:50.876Z</updated>
    
    <content type="html">&lt;p&gt;本人之前一直在用eclipse开发，在业余时间用Android Studio玩了下，发现了许多不一样，然后自己琢磨琢磨发现了一些小东西，现在慢慢总结之删除Project。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;再一次练习中我想删除工程，发现找来找去就是不知道怎么删除Android studio里的工程项目。右键菜单啊，主菜单啊，什么都找不到名叫Delete或者叫Remove的菜单项。直接按Delete键又不能删除掉整个工程项目。天坑啊！eclipse直接按Delete键就可以删除的，这让我怎么玩啊。&lt;/p&gt;
&lt;p&gt;于是去网上找了下，很多文章都在说，Android studio里是叫Remove，所以我就到处找。我用Ctrl + Shift + a查找菜单项，查找出来的Remove菜单项也无法删除工程啊。&lt;/p&gt;
&lt;p&gt;纠结了很久，最终是阴差阳错之下，才搞定了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先删除工程的Module。在Menubar中File–&amp;gt;Project Structure–&amp;gt;Module–&amp;gt;左上角红色的减号删除&lt;/li&gt;
&lt;li&gt;再选择单个Module右键点击Delete&lt;/li&gt;
&lt;li&gt;再删除Project。&lt;br&gt;第一张图没有Delete菜单项，第二章图才有。&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/as-delete1.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/as-delete2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;而且到最后发现Delete根本不能删除最顶层的更目录，只是变成空文件夹而已。。。。。。。已晕&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本人之前一直在用eclipse开发，在业余时间用Android Studio玩了下，发现了许多不一样，然后自己琢磨琢磨发现了一些小东西，现在慢慢总结之删除Project。&lt;/p&gt;
    
    </summary>
    
      <category term="Android Studio" scheme="http://xiaoqianchang.github.io/categories/Android-Studio/"/>
    
    
      <category term="Android Studio" scheme="http://xiaoqianchang.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://xiaoqianchang.github.io/2016/03/02/git-common-command/"/>
    <id>http://xiaoqianchang.github.io/2016/03/02/git-common-command/</id>
    <published>2016-03-02T06:53:20.000Z</published>
    <updated>2016-04-12T03:25:08.208Z</updated>
    
    <content type="html">&lt;h2 id=&quot;在Git下创建一个空分支&quot;&gt;&lt;a href=&quot;#在Git下创建一个空分支&quot; class=&quot;headerlink&quot; title=&quot;在Git下创建一个空分支&quot;&gt;&lt;/a&gt;在Git下创建一个空分支&lt;/h2&gt;&lt;h3 id=&quot;怎样安全的进行这项操作？&quot;&gt;&lt;a href=&quot;#怎样安全的进行这项操作？&quot; class=&quot;headerlink&quot; title=&quot;怎样安全的进行这项操作？&quot;&gt;&lt;/a&gt;怎样安全的进行这项操作？&lt;/h3&gt;&lt;p&gt;我们需要建立一个孤立的分支，为了尽可能的保证数据安全，最好重新clone一份代码。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git clone https://github.com/user/repo.git // Clone our repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好了，代码clone好了。&lt;/p&gt;
&lt;h3 id=&quot;开工&quot;&gt;&lt;a href=&quot;#开工&quot; class=&quot;headerlink&quot; title=&quot;开工&quot;&gt;&lt;/a&gt;开工&lt;/h3&gt;&lt;p&gt;这里以github的操作为例，下面试图创建一个名为gh-pages的空分支&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$cd repo

$ git checkout --orphan gh-pages
# 创建一个orphan的分支，这个分支是独立的
Switched to a new branch &amp;apos;gh-pages&amp;apos;

git rm -rf .
# 删除原来代码树下的所有文件，包括.gitignore
rm &amp;apos;.gitignore&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这个时候你用git    branch命令是看不见当前分支的名字的，除非你进行了第一次commit。&lt;br&gt;下面我们开始添加一些代码文件，例如这里新增了一个index.html&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ echo \&quot;My GitHub Page\&quot; &amp;gt; index.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git commit -a -m \&quot;First pages commit\&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git push origin gh-pages&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在commit操作之后，你就可以用git branch命令看到新分支的名字了，然后push到远程仓库。&lt;/p&gt;
&lt;p&gt;如果觉得这些命令记不到，推荐使用工具Git Extensions，在工具栏Commands–&amp;gt;Create branch…&lt;/p&gt;
&lt;h2 id=&quot;Git创建与合并分支&quot;&gt;&lt;a href=&quot;#Git创建与合并分支&quot; class=&quot;headerlink&quot; title=&quot;Git创建与合并分支&quot;&gt;&lt;/a&gt;Git创建与合并分支&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;主干（master）作为所有开发人员的主干，也是所有项目的根（root），例如，目前“医路通”项目的整个进展应该都是在master中，包含一期、二期和三期的开发。&lt;br&gt;    分支（branch），依托于主干（master）延伸出来的版本需求，都可以创建分支。例如，医路通临时版本的发布，需要将部分功能屏蔽，这个时候就建议从主干中拉出来一个分支，在分支上修改，并最终发出版本，而不是直接拿主干来修改。&lt;br&gt;    标签（tag），tag的作用更多是作为备份和里程碑使用，如果我们发一个版本，一般都需要打一个tag的。&lt;br&gt;    软件开发过程中，同一个项目，常常会延伸不同的其他项目分支；又或者仅仅是为了发布而需要屏蔽某些功能的时候，我们就需要使用不同的分支来进行开发了。Git下如何快速建立分支呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Git分支的创建&quot;&gt;&lt;a href=&quot;#Git分支的创建&quot; class=&quot;headerlink&quot; title=&quot;Git分支的创建&quot;&gt;&lt;/a&gt;Git分支的创建&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;创建分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;切换分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;创建+切换分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;创建分支后同步到服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push origin name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Git分支的合并与提交&quot;&gt;&lt;a href=&quot;#Git分支的合并与提交&quot; class=&quot;headerlink&quot; title=&quot;Git分支的合并与提交&quot;&gt;&lt;/a&gt;Git分支的合并与提交&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;合并某分支到当前分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git merge name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如，如果要从其他分支合并到master的分支中，则需要先切换到mastert分支，然后再进行merge。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git merger name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;幸运的话，即可看到合并成功的提示。如果有所冲突，那么可能会提示你修改代码，这个时候不要慌张，根据提示，进入代码中，删除代码中“head &lt;em&gt;*&lt;/em&gt; ”之类的提示，保存后，重新运行merge命令，直到完成为止！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将git分支push到服务器即可&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push origin name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;删除分支&quot;&gt;&lt;a href=&quot;#删除分支&quot; class=&quot;headerlink&quot; title=&quot;删除分支&quot;&gt;&lt;/a&gt;删除分支&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;删除分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch &lt;span class=&quot;operator&quot;&gt;-d&lt;/span&gt; name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;操作示例：&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/e062651b-2333-46d5-ab87-b31296b1017c.jpg&quot; alt=&quot;Git&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;本地分支与远程分支&quot;&gt;&lt;a href=&quot;#本地分支与远程分支&quot; class=&quot;headerlink&quot; title=&quot;本地分支与远程分支&quot;&gt;&lt;/a&gt;本地分支与远程分支&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;远程分支就是本地分支push到服务器上的时候产生的。如master就是一个最典型的远程分支（默认）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;随便创建分支，然后push到服务器就生成的远程分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b dev // 创建本地dev分支用于开发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b bug // 创建本地bug分支用于bug处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b feature // 创建本地feature分支用于新功能开发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin dev // 生成远程dev分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin bug&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push originfeature&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;远程分支与本地分支的区分。在服务器上拉去特定分支时要指定本地分支名称&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout --track origin/dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意该命令带有–track参数，所以要求git1.6.4以上！这样git会自动切换到develop分支&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步本地远程分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git fetch origin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Git的tag操作&quot;&gt;&lt;a href=&quot;#Git的tag操作&quot; class=&quot;headerlink&quot; title=&quot;Git的tag操作&quot;&gt;&lt;/a&gt;Git的tag操作&lt;/h2&gt;&lt;p&gt;标签（tag），tag的作用更多是作为备份和里程碑使用，如果我们发一个版本，一般都需要打一个tag的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看已有标签&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git tag&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;特定的搜索模式列出符合条件的标签&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git tag &lt;span class=&quot;operator&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;v1.4.2.*&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;查看指定tag&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git show tag_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;创建简单标签&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git tag tag_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;创建带注释的标签&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git tag &lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt; v1.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; -m &lt;span class=&quot;string&quot;&gt;&#39;1.0milestone&#39;&lt;/span&gt; // -m 后面是注释&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;推送[分享]标签，tag需要单独push&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push origin -tags // 这样其他人也能看到标签了&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Git的reset操作&quot;&gt;&lt;a href=&quot;#Git的reset操作&quot; class=&quot;headerlink&quot; title=&quot;Git的reset操作&quot;&gt;&lt;/a&gt;Git的reset操作&lt;/h2&gt;&lt;p&gt;实际开发过程中，经常会遇到一些莫名其妙的问题，例如，明明跟服务器代码同步的，但是却提示有代码需要提交。诸如此类问题，就可以使用reset操作了。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;git回到上一版本命令：&lt;br&gt;&lt;code&gt;git reset&lt;/code&gt;是指将当前head的内容重置，不会留log信息&lt;br&gt;&lt;code&gt;git reset HEAD filename&lt;/code&gt;  从暂存区中移除文件&lt;br&gt;&lt;code&gt;git reset --hard HEAD~3&lt;/code&gt;  会将最新的3次提交全部重置，就像没有提交过一样&lt;/p&gt;
&lt;p&gt;根据&lt;code&gt;--soft&lt;/code&gt; &lt;code&gt;--mixed&lt;/code&gt; &lt;code&gt;--hard&lt;/code&gt;，会对working tree和index和HEAD进行重置：&lt;br&gt;&lt;code&gt;git reset --mixed&lt;/code&gt;：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息&lt;br&gt;&lt;code&gt;git reset --soft&lt;/code&gt;：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可&lt;br&gt;&lt;code&gt;git reset --hard&lt;/code&gt;：彻底回退到某个版本，本地的源码也会变为上一个版本的内容&lt;br&gt;例如：&lt;br&gt;我要彻底返回在上一次提交以前的版本。&lt;code&gt;git reset --hrad HEAD~1&lt;/code&gt;&lt;br&gt;将本地的状态回退到和远程的一样。&lt;code&gt;git reset –hard origin/master&lt;/code&gt;&lt;br&gt;回退到上一次提交的状态，按照某一次的commit完全反向的进行一次commit。&lt;code&gt;git revert HEAD&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;另外如果要舍弃本地新的文件，可以使用下边的命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clean -df&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Git删除分支和删除文件夹&quot;&gt;&lt;a href=&quot;#Git删除分支和删除文件夹&quot; class=&quot;headerlink&quot; title=&quot;Git删除分支和删除文件夹&quot;&gt;&lt;/a&gt;Git删除分支和删除文件夹&lt;/h2&gt;&lt;h3 id=&quot;删除分支-1&quot;&gt;&lt;a href=&quot;#删除分支-1&quot; class=&quot;headerlink&quot; title=&quot;删除分支&quot;&gt;&lt;/a&gt;删除分支&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看所有分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch &lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;删除HEAD分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push origin --delete HEAD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;删除文件夹&quot;&gt;&lt;a href=&quot;#删除文件夹&quot; class=&quot;headerlink&quot; title=&quot;删除文件夹&quot;&gt;&lt;/a&gt;删除文件夹&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看本地分支下的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;删除xx文件夹及其下所有的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rm xx -r &lt;span class=&quot;operator&quot;&gt;-f&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;同步删除操作到远程分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &lt;span class=&quot;string&quot;&gt;&quot;delete xx&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;提交分支&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Git的撤销与解决冲突&quot;&gt;&lt;a href=&quot;#Git的撤销与解决冲突&quot; class=&quot;headerlink&quot; title=&quot;Git的撤销与解决冲突&quot;&gt;&lt;/a&gt;Git的撤销与解决冲突&lt;/h2&gt;&lt;h3 id=&quot;Git的撤销&quot;&gt;&lt;a href=&quot;#Git的撤销&quot; class=&quot;headerlink&quot; title=&quot;Git的撤销&quot;&gt;&lt;/a&gt;Git的撤销&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git撤销本地修改&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard origin/master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git pull&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;git回退到前n个版本&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard HEAD~&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Git多用户提交冲突一&quot;&gt;&lt;a href=&quot;#Git多用户提交冲突一&quot; class=&quot;headerlink&quot; title=&quot;Git多用户提交冲突一&quot;&gt;&lt;/a&gt;Git多用户提交冲突一&lt;/h3&gt;&lt;p&gt;场景：用户UserA修改了文件File1，用户UserB也修改了文件File1并成功merge到了服务器上，而UserA和UserB改动了同一个代码块，当UserA拉取代码时git无法merge此改动，就会出现如下错误提示，&lt;br&gt;error: Your local changes to the following files would be overwritten by merge: cn/trinea/appsearch/MainActivity.java&lt;br&gt;Please, commit your changes or stash them before you can merge.&lt;br&gt;这时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果希望保存本地改动并拉下最新服务器代码，手动merge，使用命令如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git stash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git pull&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash pop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff -w cn/trinea/appsearch/MainActivity.java&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中git stash表示备份当前工作区内容到git栈中，并使当前工作区内容与上次提交时一致，然后git pull拉取最新代码，git stash pop表示从Git栈中读取最近一次保存的内容，恢复工作区的相关内容，最后git diff表示手动merge你之前冲突的文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果希望服务器上版本完全覆盖本地修改，使用如下命令回退并更新：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git pull&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Git多用户提交冲突二&quot;&gt;&lt;a href=&quot;#Git多用户提交冲突二&quot; class=&quot;headerlink&quot; title=&quot;Git多用户提交冲突二&quot;&gt;&lt;/a&gt;Git多用户提交冲突二&lt;/h3&gt;&lt;p&gt;场景：用户UserA提交了change A，没有merge，之后用户UserB提交了change B，merge成功。当merge change A时出错，会提示，&lt;br&gt;The change could not be merged due to a path conflict.&lt;br&gt;Please rebase the change locally and upload the rebased commit for review.&lt;/p&gt;
&lt;p&gt;大多数人的解决方式都是拷贝改动代码，并重拉最新代码Beyond Compare，重新提交。其实几条命令就可以搞定，gerrit上先abandon原来的提交，后执行如下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard HEAD~&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git pull&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git fetch ssh://xxxx refs/changes/&lt;span class=&quot;number&quot;&gt;46&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;28146&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; git cherry-pick FETCH_HEAD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push gerrit:xxxxxx HEAD:refs/&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;/xxxxxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中git reset –hard HEAD~2表示本地代码后退两级，如果有问题可以多后退几次&lt;br&gt;git pull表示拉最新代码&lt;br&gt;git fetch 表示获取之前没merge成功的改动到本地，后面跟的具体地址为gerrit上该change review页面选择cherry-pick、ssh后的地址&lt;br&gt;git push 跟平时push一样&lt;/p&gt;
&lt;p&gt;Enjoy It!&lt;/p&gt;
&lt;h2 id=&quot;学习资料&quot;&gt;&lt;a href=&quot;#学习资料&quot; class=&quot;headerlink&quot; title=&quot;学习资料&quot;&gt;&lt;/a&gt;学习资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://try.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Try Github在线学习Git版本控制&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      Git的常用命名集合，包括创建分支、合并分支、删除分支、tag的操作、reset的操作、撤销、解决commit冲突和删除分支上的文件及文件夹。
    
    </summary>
    
      <category term="Git" scheme="http://xiaoqianchang.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://xiaoqianchang.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Markdown编辑器</title>
    <link href="http://xiaoqianchang.github.io/2016/03/02/Markdown-tools/"/>
    <id>http://xiaoqianchang.github.io/2016/03/02/Markdown-tools/</id>
    <published>2016-03-02T05:30:10.000Z</published>
    <updated>2017-02-25T13:24:44.000Z</updated>
    
    <content type="html">&lt;p&gt;作为一个开源人，如果你不会使用Markdown语法，那你就OUT了！Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;作为一个开源人，如果你不会使用Markdown语法，那你就OUT了！Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用。&lt;a href=&quot;http://code.csdn.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSDN CODE&lt;/a&gt; 平台的 &lt;a href=&quot;https://code.csdn.net/help&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;帮助文档&lt;/a&gt;、项目README文件、文档项目甚至包括ISSUES和项目评论等都是支持Markdown语法的！&lt;/p&gt;
&lt;p&gt;以下，是我使用过的Markdown编辑器，喜欢用Markdown的朋友都来看看吧！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zybuluo.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cmd Markdown&lt;/a&gt; 作业部落出品，也是一款不错的工具和博客平台兼顾的产品。全平台且提供web版&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/zybuluo.png&quot; alt=&quot;作业部落&quot;&gt;&lt;/p&gt;
&lt;p&gt;作业部落对于理科生来说跟容易驾驭。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.markdownpad.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MarkdownPad&lt;/a&gt; 一款全功能的编辑器，被很多人称赞为 windows 平台最好用的markdown编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/markdownpad.png&quot; alt=&quot;MarkdownPad&quot;&gt;&lt;/p&gt;
&lt;p&gt;Markdown Pad 是 Windows 下的全功能 Markdown 编辑器。用户可以通过方便的键盘快捷键和工具栏按钮来使用或者移除 Markdown 格式。当你创建的时候，可以实时看到 HTML 格式的 Markdown 文档。当用户打字时，LivePreview 就会自动滚动到当前编辑的位置。&lt;/p&gt;
&lt;p&gt;在这里安装MarkdownPad的时候，安装过程很简单，安装完成后这里点击“免费试用”，这没有试用期，可以免费一直使用。当然你想表达感谢之意支持就购买。还有就是破解。请看下面&lt;/p&gt;
&lt;h2 id=&quot;MarkdownPad2-5-注册码破解&quot;&gt;&lt;a href=&quot;#MarkdownPad2-5-注册码破解&quot; class=&quot;headerlink&quot; title=&quot;MarkdownPad2.5 注册码破解&quot;&gt;&lt;/a&gt;MarkdownPad2.5 注册码破解&lt;/h2&gt;&lt;p&gt;在使用MarkdownPad2.5的时候&lt;br&gt;&lt;img src=&quot;http://7xrcic.com1.z0.glb.clouddn.com/markdownpad-version.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;可以使用注册码破解：&lt;/p&gt;
&lt;p&gt;邮箱:&lt;/p&gt;
&lt;p&gt;Soar360@live.com&lt;/p&gt;
&lt;p&gt;授权秘钥:&lt;/p&gt;
&lt;p&gt;GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5&lt;br&gt;QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8&lt;br&gt;HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMn&lt;br&gt;xt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==&lt;/p&gt;
&lt;h2 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://m.blog.csdn.net/article/details?id=50685187&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MarkdownPad 2 安装使用之二三事&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个开源人，如果你不会使用Markdown语法，那你就OUT了！Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://xiaoqianchang.github.io/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://xiaoqianchang.github.io/tags/Markdown/"/>
    
      <category term="工具" scheme="http://xiaoqianchang.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://xiaoqianchang.github.io/2016/02/24/Hello-Hexo/"/>
    <id>http://xiaoqianchang.github.io/2016/02/24/Hello-Hexo/</id>
    <published>2016-02-24T10:24:10.000Z</published>
    <updated>2017-02-25T14:28:20.415Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Hexo-介绍&quot;&gt;&lt;a href=&quot;#Hexo-介绍&quot; class=&quot;headerlink&quot; title=&quot;Hexo 介绍&quot;&gt;&lt;/a&gt;Hexo 介绍&lt;/h2&gt;&lt;p&gt;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架。通过Hexo我们可以快速创建自己的博客，仅需要几条命令就可以完成。&lt;/p&gt;
&lt;p&gt;发布时，Hexo可以部署在自己的Node服务器上面，也可以部署github上面。对于个人用户来说，部署在github上好处颇多，不仅可以省去服务器的成本，还可以减少各种系统运维的麻烦事(系统管理、备份、网络)。所以，基于github的个人站点，正在开始流行起来….&lt;/p&gt;
&lt;p&gt;Hexo的官方网站：&lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hexo.io/&lt;/a&gt; ，也是基于Github构建的网站。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Hexo安装&quot;&gt;&lt;a href=&quot;#Hexo安装&quot; class=&quot;headerlink&quot; title=&quot;Hexo安装&quot;&gt;&lt;/a&gt;Hexo安装&lt;/h2&gt;&lt;p&gt;系统环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;win7 64bit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;node v0.10.5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;npm 1.2.19&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hexo安装，要用全局安装，加-g参数。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c:\Users\ChangXiao&amp;gt;npm install -g hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看hexo的版本&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c:\Users\ChangXiao&amp;gt;hexo version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装好后，我们就可以使用Hexo创建项目了。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c:\Users\ChangXiao&amp;gt;hexo init nodejs-hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进入目录&lt;code&gt;cd nodejs-hexo&lt;/code&gt;，并启动Hexo服务器&lt;code&gt;hexo server&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这时端口4000被打开了，我们能过浏览器打开地址，&lt;a href=&quot;http://localhost:4000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://blog.fens.me/hexo-blog-github/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo在github上构建免费的Web应用&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Hexo-介绍&quot;&gt;&lt;a href=&quot;#Hexo-介绍&quot; class=&quot;headerlink&quot; title=&quot;Hexo 介绍&quot;&gt;&lt;/a&gt;Hexo 介绍&lt;/h2&gt;&lt;p&gt;Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架。通过Hexo我们可以快速创建自己的博客，仅需要几条命令就可以完成。&lt;/p&gt;
&lt;p&gt;发布时，Hexo可以部署在自己的Node服务器上面，也可以部署github上面。对于个人用户来说，部署在github上好处颇多，不仅可以省去服务器的成本，还可以减少各种系统运维的麻烦事(系统管理、备份、网络)。所以，基于github的个人站点，正在开始流行起来….&lt;/p&gt;
&lt;p&gt;Hexo的官方网站：&lt;a href=&quot;http://hexo.io/&quot;&gt;http://hexo.io/&lt;/a&gt; ，也是基于Github构建的网站。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://xiaoqianchang.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://xiaoqianchang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xiaoqianchang.github.io/2016/02/24/hello-world/"/>
    <id>http://xiaoqianchang.github.io/2016/02/24/hello-world/</id>
    <published>2016-02-24T10:00:10.000Z</published>
    <updated>2016-03-09T09:48:54.791Z</updated>
    
    <content type="html">&lt;p&gt;独立的博客搭建好了，0.0&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;独立的博客搭建好了，0.0&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
